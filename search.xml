<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>centos7上安装docker环境</title>
      <link href="/2018/09/17/centos7-docker-install/"/>
      <url>/2018/09/17/centos7-docker-install/</url>
      
        <content type="html"><![CDATA[<h2 id="准备-删除旧版本"><a href="#准备-删除旧版本" class="headerlink" title="准备:删除旧版本"></a>准备:删除旧版本</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h2 id="1-安装仓库"><a href="#1-安装仓库" class="headerlink" title="1. 安装仓库"></a>1. 安装仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --<span class="built_in">add</span>-repo \</span><br><span class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure><h2 id="2-安装指定版本的Docker-CE"><a href="#2-安装指定版本的Docker-CE" class="headerlink" title="2. 安装指定版本的Docker CE"></a>2. 安装指定版本的Docker CE</h2><h3 id="1-列出版本"><a href="#1-列出版本" class="headerlink" title="1. 列出版本"></a>1. 列出版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><h3 id="2-安装指定版本"><a href="#2-安装指定版本" class="headerlink" title="2.安装指定版本"></a>2.安装指定版本</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">install</span> docker-ce-&lt;<span class="keyword">VERSION</span> <span class="keyword">STRING</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-启动docker"><a href="#3-启动docker" class="headerlink" title="3. 启动docker"></a>3. 启动docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><h2 id="续："><a href="#续：" class="headerlink" title="续："></a>续：</h2><p>###（1）修改cgroup driver:<br>在 /usr/lib/systemd/system/docker.service 中添加以下启动项<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/dockerd \</span><br><span class="line">          --exec-opt native.<span class="attribute">cgroupdriver</span>=systemd</span><br></pre></td></tr></table></figure></p><p>###（2）修改storage-driver:<br>在/etc/docker/daemon.json 添加以下配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="attr">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启docker<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7内核升级</title>
      <link href="/2018/09/17/centos7-kernel-update/"/>
      <url>/2018/09/17/centos7-kernel-update/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看当前内核版本"><a href="#1-查看当前内核版本" class="headerlink" title="1. 查看当前内核版本"></a>1. 查看当前内核版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">3.10.0-229.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="2-导入public-key"><a href="#2-导入public-key" class="headerlink" title="2. 导入public key"></a>2. 导入public key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import http://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><h2 id="3-安装ELRepo到CentOS-6-5中"><a href="#3-安装ELRepo到CentOS-6-5中" class="headerlink" title="3. 安装ELRepo到CentOS-6.5中"></a>3. 安装ELRepo到CentOS-6.5中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="4-安装kernel-lt（lt-long-term）"><a href="#4-安装kernel-lt（lt-long-term）" class="headerlink" title="4. 安装kernel-lt（lt=long-term）"></a>4. 安装<strong>kernel-lt（lt=long-term）</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum --enablerepo=elrepo-kernel install kernel<span class="_">-lt</span> -y</span><br></pre></td></tr></table></figure><h2 id="5-修改Grub引导顺序"><a href="#5-修改Grub引导顺序" class="headerlink" title="5. 修改Grub引导顺序"></a>5. 修改Grub引导顺序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grub2-set-default 0</span><br></pre></td></tr></table></figure><h2 id="6-重启，查看内核版本号"><a href="#6-重启，查看内核版本号" class="headerlink" title="6. 重启，查看内核版本号"></a>6. 重启，查看内核版本号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">4.4.156-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM-In-Docker:暴涨的内存</title>
      <link href="/2018/04/12/JVMInDocker%E6%9A%B4%E6%B6%A8%E7%9A%84%E5%86%85%E5%AD%98/"/>
      <url>/2018/04/12/JVMInDocker%E6%9A%B4%E6%B6%A8%E7%9A%84%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>最近将java应用迁移至docker容器时，发现了一个有趣的现象：在容器内运行一段时间以后，总是被内核OOM Killed.顾名思义，这是java进程内存使用超过了一定的限制。<br>我们在启动容器的时候，限制其可用物理内存为1G，通过以下命令可查看内存限制</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">inspect</span> --<span class="keyword">format</span>='&#123;&#123;.HostConfig.<span class="keyword">Memory</span>&#125;&#125;' <span class="variable">$&#123;ContainerId&#125;</span></span><br></pre></td></tr></table></figure><p>容器启动之后，我们能过grafana观察其内存变量，其内存使用在一小时之内就涨到了1G，再经过差不多一小时，容器就被OOM Killed了。<br>有趣的是，我们将该程序放到一以1G内存的虚拟机上去执行，其内存使用量一直保存在300M左右，自然也不会触发OOM Killed。<br>同样是1G内存的限制，为什么在容器内就挂了而在物理机或虚拟机上就正常了呢？看来这值得我们深挖一下。</p><h1 id="CGroup"><a href="#CGroup" class="headerlink" title="CGroup"></a>CGroup</h1><p>首先，可以确定的是，容器之所以被杀死，是因为其内存超过了限制，那么这个限制，就是由Linux内核提供的CGroup来行限制的。<br>CGroup全名Control Group,其作用就是限制某一个或一组进程对系统资源的使用，在这里我们不对CGroup进行深入的探讨，有兴趣的同学可以<a href="https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt" target="_blank" rel="noopener">点击这里</a>进行深入学习。<br>在这里要提到的是，为什么上述容器在内存满了之后还要再过1小时才被Kill？这是因为我们的系统开启了交换内存的功能，而如果我们不对容器进行交换内存进行限制而只是限制物理内存，那么交换内存将会被设置为物理内存的2倍。（注意，这里交换内存包含了物理内存的容量）<br>所以当物理内存满了以后，容器还能继续跑是因为其还在涨的内存被交换出去了，还没到达交换内存的限制而已。</p><h1 id="JVM-–Xmx"><a href="#JVM-–Xmx" class="headerlink" title="JVM –Xmx"></a>JVM –Xmx</h1><p>除非我们显示的设置JVM的最大堆大小，否则，JVM将会根据宿主机的RAM来推断这个值 – 默认情况下，这个值会被设置成宿主机内存的1/4。<br>我们可以能过<a href="http://matthewkwilliams.com/index.php/2015/10/02/looking-inside-a-jvm-xxprintflagsfinal/" target="_blank" rel="noopener">-XX:+PrintFlagsFinal</a>来查看这个值的大小</p><p>笔者在一台64G内存的物理器上执行得到如下结果：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">java </span>-XX:+PrintFlagsFinal -version<span class="title">|grep -i heapsize|</span>egrep <span class="string">'Initial|Max'</span></span><br><span class="line"><span class="keyword">java </span>version <span class="string">"1.7.0_67"</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">1057991744</span>      &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">16928210944</span>     &#123;product&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 MaxHeapSize为 ~16G<br>我们在容器中执行看一下结果：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm <span class="keyword">java </span><span class="keyword">java </span> -XX:+PrintFlagsFinal -version <span class="title">|grep -i heapsize |</span> egrep <span class="string">'Initial|Max'</span></span><br><span class="line"><span class="keyword">java </span>version <span class="string">"1.7.0_67"</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">1057991744</span>      &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">16928210944</span>     &#123;product&#125;</span><br></pre></td></tr></table></figure></p><p>一样的结果。现在我们限制一下容器的内存为 1G(-m 1024m)<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -m <span class="number">1024</span>m --rm <span class="keyword">java </span><span class="keyword">java </span> -XX:+PrintFlagsFinal -version <span class="title">|grep -i heapsize |</span> egrep <span class="string">'Initial|Max'</span></span><br><span class="line"><span class="keyword">java </span>version <span class="string">"1.7.0_67"</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">1057991744</span>      &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">16928210944</span>     &#123;product&#125;</span><br></pre></td></tr></table></figure></p><p>结果还是一样。</p><h1 id="Memory-Inside-Linux-Containers"><a href="#Memory-Inside-Linux-Containers" class="headerlink" title="Memory Inside Linux Containers"></a>Memory Inside Linux Containers</h1><p>我们用free来看一下内存的情况<br>在宿主机上:<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:        <span class="number"> 64574 </span>    <span class="number"> 62979 </span>     <span class="number"> 1594 </span>        <span class="number"> 0 </span>      <span class="number"> 864 </span>     49236</span><br><span class="line">-/+ buffers/cache:     <span class="number"> 12878 </span>     51695</span><br><span class="line">Swap:        <span class="number"> 4095 </span>      <span class="number"> 448 </span>      3647</span><br></pre></td></tr></table></figure></p><p>在容器内:<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -1024 --rm busybox free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:        <span class="number"> 64574 </span>    <span class="number"> 62979 </span>     <span class="number"> 1594 </span>        <span class="number"> 0 </span>      <span class="number"> 864 </span>     49236</span><br><span class="line">-/+ buffers/cache:     <span class="number"> 12878 </span>     51695</span><br><span class="line">Swap:        <span class="number"> 4095 </span>      <span class="number"> 448 </span>      3647</span><br></pre></td></tr></table></figure></p><p>还是一模一样，为什么会出现这样的情况？这就等于我们在容器内无法读到容器的限制内存？<br>关于这个问题，这里有一篇文章（<a href="https://fabiokung.com/2014/03/13/memory-inside-linux-containers/" target="_blank" rel="noopener">Memory inside Linux containers</a>）解释得很详细,这里我们作一个简单的总结：<br>意思是我们并不是没办法读取容器内存的，而是读的地方不对。早期的统计工具，例如top,free（包括jvm）等都是从/proc目录下读取系统信息的，而在容器内，容器的内存限制并不是在/proc下面，而要从cgroup读取（docker内的cgroup目录在/sys/fs/cgroup),<br>而/proc目录，到目前为止，docker官方并没有对其进行容器化处理，所以从这里读取的信息都还是宿主机的信息，这也就很好解释我们上面看到的实验结果。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>一些人认为可以提供一个用户态的库供大家调用，这种方案只适合新的程序，那些旧的程序如top,free甚至jvm都无法使用这个方案了</li><li>另一种方案是在用户态重写/proc/meminfo，例如<a href="https://github.com/libfuse/libfuse" target="_blank" rel="noopener">FUSE</a>就可以实现这种功能。但这种方案的问题是要在宿主机上运行这个用户态的服务，如果这个服务挂了该如何处理？总之，这种方案可以解决问题，但并不是十分完美</li><li>直接内核支持，但是这种又会影响到那些没有容器化的系统，所以除非你自定义内核，否则不可能被合并到主流内核版本中。</li></ol><h2 id="JVM的解决"><a href="#JVM的解决" class="headerlink" title="JVM的解决"></a>JVM的解决</h2><p>知道了问题产生的原因，那么我们解决JVM在容器中的问题其实就很简单了：<br>我们结合容器的限制内存，给JVM设置一下最大堆参数就可以了<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -m <span class="number">1024</span>m --rm <span class="keyword">java </span><span class="keyword">java </span>-Xmx256m -Xms16m  -XX:+PrintFlagsFinal -version<span class="title">|grep -i heapsize|</span>egrep <span class="string">'Initial|Max'</span>     </span><br><span class="line"><span class="keyword">java </span>version <span class="string">"1.7.0_67"</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">16777216</span>        &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">268435456</span>       &#123;product&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到MaxHeapSize=256m,InitialHeapSize=16m</p><p>笔者最后给最开始被OOM Killed的Java程序加上最大堆限制之后，就再也没有出现被Kill的情况，附上内存图：<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/JVMInDocker.jpg" alt=""></p><p>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多线程一定比单线程快吗</title>
      <link href="/2017/08/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%80%E5%AE%9A%E6%AF%94%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%BF%AB%E5%90%97/"/>
      <url>/2017/08/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%80%E5%AE%9A%E6%AF%94%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%BF%AB%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先我们来看一下需求：</p><blockquote><p>有四个整型数（初始化为0）存在我们计算机的内存之中，现在要求对每个数分别进行++操作，重复这个动作1000000000次。</p></blockquote><p>这很显然是一个计算密集型的过程，其间并不会涉及任何的io操作，因此，我们可以考虑用四个线程来同时对这四个数进行操作（用四个线程是因为笔者的电脑CPU物理核数为4）,这样可以最大程度地利用我们的cpu资源。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>接下来，我们用程序来实现这个需求，笔者用的语言是C#，这个实验和使用的语言关系不是很大，各个语言之间的差异很小。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> m_numOfProcessor = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> m_step = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span>[] m_array = <span class="keyword">new</span> <span class="keyword">int</span>[m_numOfProcessor * m_step];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> m_ticks = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> events = InitEvents(m_numOfProcessor);</span><br><span class="line">        Stopwatch watch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        watch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_numOfProcessor; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart((o) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                UpdateCounter(Convert.ToInt32(o) * m_step);</span><br><span class="line">                events[Convert.ToInt32(o)].Set();</span><br><span class="line">            &#125;)).Start(i);</span><br><span class="line">        &#125;</span><br><span class="line">        WaitHandle.WaitAll(events);</span><br><span class="line">        watch.Stop();</span><br><span class="line">        Console.WriteLine(String.Format(<span class="string">"step &#123;0&#125; elapsed:"</span> + watch.ElapsedMilliseconds, m_step));</span><br><span class="line">        Print(m_array, m_step);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="keyword">int</span>[] array,<span class="keyword">int</span> step</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length; i = i + step)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ManualResetEvent[] <span class="title">InitEvents</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ManualResetEvent[] events = <span class="keyword">new</span> ManualResetEvent[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            events[i] = <span class="keyword">new</span> ManualResetEvent(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateCounter</span>(<span class="params"><span class="keyword">int</span> position</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_ticks; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_array[position] = m_array[position] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个示例中，我们将这四个整数放在一个数组中，当m_step为1时，这四个数在内存中是连续的。这里我们开启了四个线程同时行进计算，得到的结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step 1 elapsed:15495</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure></p><p>我们一开始的想法是通过多线程来充分利用CPU的计算资源，那么，我们现在来验证多线程是否确实比单线程速度快：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_numOfProcessor; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//new Thread(new ParameterizedThreadStart((o) =&gt;</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    UpdateCounter(Convert.ToInt32(o) * m_step);</span></span><br><span class="line">    <span class="comment">//    events[Convert.ToInt32(o)].Set();</span></span><br><span class="line">    <span class="comment">//&#125;)).Start(i);</span></span><br><span class="line">    UpdateCounter(i * m_step);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WaitHandle.WaitAll(events);</span></span><br></pre></td></tr></table></figure></p><p>调整程序为单线程执行，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step 1 elapsed:7741</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure></p><p>结果竟然是单线程比多线程的速度快！</p><p>接下来，我们调整一下m_step的值分别为2、4、8、16，来看一下不同的步长在多线程和单线程模式下的各自的性能表现：</p><table><thead><tr><th>m_step</th><th>多线程</th><th>单线程</th></tr></thead><tbody><tr><td>1</td><td>15495</td><td>7741</td></tr><tr><td>2</td><td>15768</td><td>7760</td></tr><tr><td>4</td><td>15485</td><td>7667</td></tr><tr><td>8</td><td><strong>11433</strong></td><td>7752</td></tr><tr><td>16</td><td><strong>5797</strong></td><td>7784</td></tr></tbody></table><p>这里，我们发现当步长为8和16的时候，多线程性能突然提升，并且在16的时候超过了单线程的性能，而这一切又是为什么呢？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>要解释这个结果，我们要先理解CPU的工作原理。<br>1) cpu从来都不直接访问主存, 都是通过cpu cache间接访问主存。<br>2) 每次需要访问主存时, 遍历一遍全部cache line, 查找主存的地址是否在某个cache line中。<br>3) 如果cache中没有找到, 则分配一个新的cache entry, 把主存的内存copy到cache line中, 再从cache line中读取。</p><p>那什么又是cache line呢？<br>现代的cpu从主存读取数据并不是一个字节一个字节读取，而是一整块一整块地读取，那么究竟一次会读取多少数据呢，这就取决于CPU的cache line的大小。CPU将它的cache划分成一块一块的，一块这样的存储区域就是一个cache line。<br>在现代计算机CPU的cache line大小一般为32Byte或64Byte，我们要如何查看cache line的大小呢？可以使用 <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/coreinfo" target="_blank" rel="noopener">CoreInfo</a>工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Logical Processor to Cache Map:</span><br><span class="line">**------  Data Cache          0, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">**------  Instruction Cache   0, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">**------  Unified Cache       0, Level 2,  256 KB, Assoc   8, LineSize  64</span><br><span class="line">********  Unified Cache       1, Level 3,    8 MB, Assoc  16, LineSize  64</span><br><span class="line">--**----  Data Cache          1, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">--**----  Instruction Cache   1, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">--**----  Unified Cache       2, Level 2,  256 KB, Assoc   8, LineSize  64</span><br><span class="line">----**--  Data Cache          2, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">----**--  Instruction Cache   2, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">----**--  Unified Cache       3, Level 2,  256 KB, Assoc   8, LineSize  64</span><br><span class="line">------**  Data Cache          3, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">------**  Instruction Cache   3, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">------**  Unified Cache       4, Level 2,  256 KB, Assoc   8, LineSize  64</span><br></pre></td></tr></table></figure></p><p>在笔者的计算机上看到的L1的cache line大小为64。这里显示我的L1的数据缓存为32KB，指令缓存为32KB。这里要注意的是，L1 cache是处理器独享，L2 cache是成对处理器共享的。<br>也就是说，笔者的四个线程，每个线程可以享用32KB的一级缓存。在上面的实验中，正是因为独享的一级缓存导致的程序性能低下。<br>在这里，我们可以联想一下我们宏观架构中的分布式缓存系统，如果我们将同一份数据存到多个地方的时候，那么数据一致性的维护将是一个非常头痛的问题。当有一份数据发生了变化，我们就必须通过某种手段来保证其它地方的数据也被更新。为了数据的一致性，势必会让我们损失很多性能。<br>我们回到上面的实验：，<br>一个32位整型数的大小为4Byte，而一个cache line长度为64Byte，因此，在一个cache line中，可以存放 64 / 4 = 16 个 32位整型数。</p><ul><li>当步长为1时，四个数全部在同一个cache line中</li><li>当步长为2时，四个数全部在同一个cache line中</li><li>当步长为4时，四个数全部在同一个cache line中</li><li>当步长为8时，每两个处于不同的cache line中</li><li>当步长为16时，每个数都处于不同的cache line中</li></ul><p>到这里我们就很好解释上述实验所显示的结果，正是因为多个CPU处理器同时操作了同一个cache line，一旦某一个处理器更新了cache line的数据，会导致其它处理器同一个cache line的数据失效，那么其它处理器就必须从主存再次读取，这正是导致其性能低下的原因。<br>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> performance </tag>
            
            <tag> cpu </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为Docker分配独立IP</title>
      <link href="/2017/07/10/%E4%B8%BADocker%E5%88%86%E9%85%8D%E7%8B%AC%E7%AB%8BIP/"/>
      <url>/2017/07/10/%E4%B8%BADocker%E5%88%86%E9%85%8D%E7%8B%AC%E7%AB%8BIP/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker的网络模型"><a href="#Docker的网络模型" class="headerlink" title="Docker的网络模型"></a>Docker的网络模型</h1><p>  熟悉docker的人都知道，它有以下四种网络模式</p><ol><li>host</li><li>container</li><li>none</li><li>bridge</li></ol><blockquote><p>要理解Docker的网络，首先要发解的是Linux下面的network namespace。Linux Namespace是Linux提供的一种内核级别环境隔离的方法。其中network namepspace是六种隔离中的一种。<br>简单来说，如果将某一个进程的network namespace为设置为ns1，那么它将无法看到宿主机上（默认的名称空间下）的任何网络设备，路由规则，iptables,甚至是整个tcp/ip协议栈。在ns1下面创建的网络设备等等，在宿主机（默认的名称空间下）也同样看不到这些新创建的设备。这样，让用户感觉像是让我们的进程跑在了另外一个操作系统上面，仿佛我们新创建了一个操作系统环境。</p></blockquote><p>了解了network namespace，我在再来了解docker的网络模式</p><ol><li>host:<br>当使用host模式启动容器时，这个容器将不会创建自己的network namespace，而是和宿主机共用同一个。那么这样也就很好理解了，我们的进程创建的任何网络设备，监听的任何端口，宿主机都可以感知得到，也就是说，容器可以使用宿主机的ip和端口资源。</li><li>none:<br>使用none模式，Docker容器拥有自己的network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。该模式和host模式的一个重要的区别就是，none模式有自己的network namespace，而host模式没有。</li><li>container:<br>这个模式指定新创建的容器和已经存在的一个容器共享一个network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</li><li>bridge:<br>bridge模式是docker的默认网络模式。当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。</li></ol><h1 id="bridge网络模式"><a href="#bridge网络模式" class="headerlink" title="bridge网络模式"></a>bridge网络模式</h1><p>作为docker默认的网络模式，是最复杂也是运用最广的模式。我们先来看一下，在这种模式下，它的网格拓扑结构。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-bridge.png" alt="docker-bridge"><br>这里首先要讲解一下linux下虚拟网桥的概念：</p><ul><li><p>虚拟网桥：<br>首先，它的主体部分是一个二层交换机，但是奇怪的是，我们在宿主机上查看linux网络设备docker0的时候，它会有一个ip地址（作者主机上的docker0）<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker0.png" alt="docker0"><br>稍微有点网络常识的人会知道，交换机是二层设备，是没有ip地址的。那么这个ip地址又是怎么来的呢。<br>我们可以思考一下，假设你买了一个物理交换机回来以后，我们的主机要如何使用这个交换机？答案很简单，用一根网线将主机上的某一块网卡接到交换机的一个端口上面！是的，那么docker0设备上的ip实际上就是主机上连接交换机网卡的ip。<br>所以，linux的虚拟网桥实际上包括三部分：</p><ul><li>一个L2的交换机</li><li>一个主机的网卡</li><li>一根连接以上两部分的网线</li></ul></li><li><p>veth pair<br>了解了虚拟网桥，我们再来看一下另一个linux的虚拟网络设备： veth-pair<br>它实际上是一对虚拟网卡,从一张veth网卡发出的数据包可以直接到达它的peer veth,两者之间存在着虚拟链路。也就是说，这种虚拟设备包括以下三部分：</p><ul><li>一个安装在主机上的网卡</li><li>另一个安装在主机上的网卡</li><li>一根连接这两个网卡的网线<br>大家可能会觉得奇怪，这样的网络设备有什么用，数据从一个网卡出去，再从另外一块网卡进来？其实，这种网络设备有一个特点，就是两块网卡可以分别处于不同的network namespace。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/veth-pair.png" alt="veth-pair"><br>docker正是利用了这种特性，将其中的一块网卡添加到容器内部，另外一块留在宿主机上面，大家通过ifconfig命令在宿主机可以看到vethxxx这样的网络设备，但是这样的网络设备它是没有ip地址的。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/vethxxx.png" alt="vethxxx"><br>这又是为什么呢？这要回到上面提到的虚拟网桥。实际上这块网卡被添加到了docker0的交换机设备上，变成了该交换机上的一个端口，交换机的端口没有ip也就很正常了。<br>我们可以通过brctl命令，将一个物理设备添加到一个虚拟网桥上面：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brctl addif docker0 vethae36b9b</span></span><br></pre></td></tr></table></figure></li></ul><p>这个命令的意思是将vethae36b9b这个网络设备添加到docker0这个网桥上面。<br>还可以查看已添加到网桥上面的设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brctl show docker0</span></span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">docker0         8000.0242f2558144       no              vethae36b9b</span><br></pre></td></tr></table></figure></li></ul><p>到此，我们来理解bridge网络模式的拓扑结构就很简单了，这是不是非常像我们家庭网络的结构：一个个容器代表了家里的一台台计算机，而宿主机这时候变成了连接外网的路由器了。在这个子网内部的各个容器之间是可以互相访问的，容器可以访问外部网络，而外部网络要访问内部容器，就必须通过nat端口映射才行。</p><h1 id="给docker容器分配一个和宿主机处于同一网段的ip"><a href="#给docker容器分配一个和宿主机处于同一网段的ip" class="headerlink" title="给docker容器分配一个和宿主机处于同一网段的ip"></a>给docker容器分配一个和宿主机处于同一网段的ip</h1><p>bridge网络有一个问题，就是多个容器要同时对外暴露服务时，会竞争宿主机上面的端口，导致端口资紧张的情况发生。那么我们能不能给docker分配一个和宿主机处于同一个网段的ip，这样，外部网络就可以直接访问该容器了呢?答案当然是可以，我们现在就利用上面的知识，来更改一下docker的网络拓扑结构。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-bridge2.png" alt="docker-bridge2"><br>这里我们为了避免连接不上宿主机，另外创建一个虚拟网桥br0<br>em1是宿主机上的网卡，它的ip为172.24.133.39/24。我们的做法很简单，将em1添加到docker0网桥上，然后将ip（172.24.133.39）设置给br0设备。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brctl addbr br0</span></span><br><span class="line"><span class="comment"># brctl stp br0 off</span></span><br><span class="line"><span class="comment"># ifconfig br0 172.24.133.39/24 up</span></span><br><span class="line"><span class="comment"># brctl addif br0 em1</span></span><br><span class="line"><span class="comment"># ifconfig em1 0.0.0.0</span></span><br><span class="line"><span class="comment"># route add default gw 172.24.133.254 dev br0</span></span><br></pre></td></tr></table></figure></p><p>创建一对veth pair,并将其中一个添加到br0中,另一个设置给容器（docker的network namespace的名称就是容器id)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip link add peerA type veth peer name peerB </span></span><br><span class="line"><span class="comment"># brctl addif br0 peerA</span></span><br><span class="line"><span class="comment"># ip link set peerA up</span></span><br><span class="line"><span class="comment"># ip link set peerB netns $&#123;container-pid&#125;</span></span><br></pre></td></tr></table></figure><p>然后，进入到容器中，将eth1的ip设置为172.24.133.253<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip link set dev peerB name eth1 </span></span><br><span class="line"><span class="comment"># ip link set eth1 up</span></span><br><span class="line"><span class="comment"># ip addr add 172.24.133.253/24 dev eth1</span></span><br><span class="line"><span class="comment"># route add default gw 172.24.133.254 dev eth1</span></span><br></pre></td></tr></table></figure></p><p>此时，我们就可以通过172.24.133.253这个ip直接访问容器了<br>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Ingress的BlueGreenDeployment</title>
      <link href="/2017/04/24/%E5%9F%BA%E4%BA%8Ekubernetes%E7%9A%84canary-deployment/"/>
      <url>/2017/04/24/%E5%9F%BA%E4%BA%8Ekubernetes%E7%9A%84canary-deployment/</url>
      
        <content type="html"><![CDATA[<h2 id="Blue-Green-Deployment"><a href="#Blue-Green-Deployment" class="headerlink" title="Blue-Green Deployment"></a>Blue-Green Deployment</h2><p><a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" target="_blank" rel="noopener">Blue-Green</a>是一种无宕机的升级技术，和滚动升级不同，蓝绿部署是启动一个运行着新版应用的副本的集群，旧版的应用依旧提供服务，直到新的应用真正启动并配置好负载均衡器。这种方式的一个好处是任何时候都只有一个版本的应用在运行，减少了处理多个并发版本带来的复杂性。当副本个数很少时，蓝绿部署也能很好地工作。</p><p>在传统的发布中，新版本的服务只有上线以后（此时新版本的软件已经暴露给了用户）测试人员才能够进行线上测试，实际上这个时候的测试的意义并不是太大，因为如果存在bug的话，那么这个bug已经暴露给了最终用户，要解决bug要么继续发布更新的版本，要么进行线上回滚，这对于用户来说是一种非常不友好的体验，对于开发和测试人员也产生了一定的压力。</p><p>蓝绿发布将新版本的服务发布到一个新的生产环境中，该环境和旧版本的环境完全一致，唯一的区别是最终用户是访问不到新版本的服务，这时候只有测试人员可以访问。这样，就有办法保证测试人员有足够的时间进行系统测试。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/canary-release-1.png" alt=""><br>当测试人员完成测试后，再将流量切换至新版本服务。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/canary-release-3.png" alt=""><br>切换成功以后，再将旧版本的环境进行删除。</p><h2 id="在kubernetes中实现蓝绿发布"><a href="#在kubernetes中实现蓝绿发布" class="headerlink" title="在kubernetes中实现蓝绿发布"></a>在kubernetes中实现蓝绿发布</h2><p>kubernetes本身并不提供蓝绿发布的功能，包括在deployment中，它的发布策略只包含滚动发布（rolling update）和重建发布(recreate)。要实现蓝绿发布，我们必须将其业务提取到自己的管理层来。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>一个kubernetes集群环境</li><li>至少有一个Ingress Controller。（我们将使用Ingress来进行host和service的绑定）</li></ol><h3 id="blue-deployment"><a href="#blue-deployment" class="headerlink" title="blue-deployment"></a>blue-deployment</h3><p>第一步，我们创建一个verion 为 1 的deployment。</p><p>deployment-blue.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-deployment-blue</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">        track:</span> <span class="string">blue</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">shared-data</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.7.9</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">shared-data</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">debian-container</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">debian</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">shared-data</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">["-c",</span> <span class="string">"echo hello this is version 1 &gt; /pod-data/index.html &amp;&amp; sleep 1000000000"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">kubectl create -f deployment-blue.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pod -l app=demo --show-labels</span><br><span class="line"></span><br><span class="line">demo-deployment-blue-2523566789-641sj    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-h88ch    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-kqsdg    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br></pre></td></tr></table></figure><h3 id="blue-service"><a href="#blue-service" class="headerlink" title="blue-service"></a>blue-service</h3><p>创建blue-service</p><p>service-blue.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-service-blue</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">demo-service-blue</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">    track:</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f service-blue.yaml</span><br><span class="line"></span><br><span class="line">kubectl describe svc demo-service-blue</span><br><span class="line"></span><br><span class="line">Name:                   demo-service-blue</span><br><span class="line">Namespace:              default</span><br><span class="line">Labels:                 app=demo-service-blue</span><br><span class="line">Selector:               app=demo,track=blue</span><br><span class="line">Type:                   ClusterIP</span><br><span class="line">IP:                     10.254.1.251</span><br><span class="line">Port:                   &lt;<span class="built_in">unset</span>&gt; 80/TCP</span><br><span class="line">Endpoints:              172.30.40.26:80,172.30.40.28:80,172.30.56.18:80</span><br><span class="line">Session Affinity:       None</span><br><span class="line">No events.</span><br></pre></td></tr></table></figure><p>该Service通过app=demo,track=blue的标签找到了三个终节点(我们在deployment中指定了复本数为3)</p><h3 id="stable-ingress"><a href="#stable-ingress" class="headerlink" title="stable-ingress"></a>stable-ingress</h3><p>最后我们通过stable-ingress将该服务暴露给最终用户。</p><p>ingress-stable.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-ingress-stable</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line">    <span class="string">ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">demo-stable</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">demo-service-blue</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></p><p>验证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ingress-stable.yaml</span><br><span class="line"></span><br><span class="line">kubectl get ing demo-ingress-stable</span><br><span class="line"></span><br><span class="line">NAME                  HOSTS         ADDRESS         PORTS     AGE</span><br><span class="line">demo-ingress-stable   demo-stable   172.24.133.92   80        1h</span><br></pre></td></tr></table></figure></p><p>最后我们访问一下该host<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 172.24.133.92 -H <span class="string">"HOST:demo-stable"</span></span><br><span class="line">hello this is version 1</span><br></pre></td></tr></table></figure></p><h3 id="green-deployment"><a href="#green-deployment" class="headerlink" title="green-deployment"></a>green-deployment</h3><p>接下来，我们打算发布一个新的服务版本（version 2）。我们先不删除旧版本的服务。而是直接发布一个新的deployment,我们称它为deployment-green:</p><p>deployment-green.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-deployment-green</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">        track:</span> <span class="string">green</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">shared-data</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="number">172.24</span><span class="number">.133</span><span class="number">.2</span><span class="string">:5000/nginx:1.7.9</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">shared-data</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">debian-container</span></span><br><span class="line"><span class="attr">        image:</span> <span class="number">172.24</span><span class="number">.133</span><span class="number">.2</span><span class="string">:5000/debian</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">shared-data</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">["-c",</span> <span class="string">"echo hello this is version 2 &gt; /pod-data/index.html &amp;&amp; sleep 1000000000"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deployment-green.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pod -l app=demo --show-labels</span><br><span class="line"></span><br><span class="line">NAME                                     READY     STATUS    RESTARTS   AGE       LABELS</span><br><span class="line">demo-deployment-blue-2523566789-641sj    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-h88ch    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-kqsdg    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-green-3779826479-7nfx3   2/2       Running   0          1h        app=demo,pod-template-hash=3779826479,track=green</span><br><span class="line">demo-deployment-green-3779826479-ck8v0   2/2       Running   0          1h        app=demo,pod-template-hash=3779826479,track=green</span><br><span class="line">demo-deployment-green-3779826479-n40kj   2/2       Running   0          1h        app=demo,pod-template-hash=3779826479,track=green</span><br></pre></td></tr></table></figure><p>这里可以看到新旧版本一共六个pod，我们能过标签track将它们区分开来。</p><h3 id="green-service"><a href="#green-service" class="headerlink" title="green-service"></a>green-service</h3><p>接下来创建新版本的service</p><p>service-green.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-service-green</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">demo-service-green</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">    track:</span> <span class="string">green</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f service-green.yaml</span><br><span class="line"></span><br><span class="line">kubectl describe svc demo-service-green</span><br><span class="line"></span><br><span class="line">Name:                   demo-service-green</span><br><span class="line">Namespace:              default</span><br><span class="line">Labels:                 app=demo-service-green</span><br><span class="line">Selector:               app=demo,track=green</span><br><span class="line">Type:                   ClusterIP</span><br><span class="line">IP:                     10.254.125.14</span><br><span class="line">Port:                   &lt;<span class="built_in">unset</span>&gt; 80/TCP</span><br><span class="line">Endpoints:              172.30.40.29:80,172.30.56.20:80,172.30.56.21:80</span><br><span class="line">Session Affinity:       None</span><br><span class="line">No events.</span><br></pre></td></tr></table></figure><h3 id="canary-ingress"><a href="#canary-ingress" class="headerlink" title="canary-ingress"></a>canary-ingress</h3><p>接下来创建一个专门针对测试人员的ingress。它的host为demo-canary。</p><p>ingress-canary.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-ingress-canary</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line">    <span class="string">ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">demo-canary</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">demo-service-green</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ingress-canary.yaml</span><br><span class="line"></span><br><span class="line">kubectl get ing demo-ingress-canary</span><br><span class="line"></span><br><span class="line">NAME                  HOSTS         ADDRESS         PORTS     AGE</span><br><span class="line">demo-ingress-canary   demo-canary   172.24.133.92   80        2h</span><br></pre></td></tr></table></figure><p>这时候，分别能过两个不同的host进行访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl 172.24.133.92 -H <span class="string">"HOST:demo-stable"</span></span><br><span class="line">hello this is version 1</span><br><span class="line"></span><br><span class="line">curl 172.24.133.92 -H <span class="string">"HOST:demo-canary"</span>                         </span><br><span class="line">hello this is version 2</span><br></pre></td></tr></table></figure></p><p>这个时候，最终用户还是能过host:demo-stable来进行访问，它所访问到的服务版本为1，而测试人员可以通过host:demo-canary访问版本2。</p><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>当测试人员完成测试，这个时候就可以将流量引到版本2<br>修改 ingress-stable.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-ingress-stable</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line">    <span class="string">ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">demo-stable</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">demo-service-green</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ingress-stable.yaml</span><br><span class="line"></span><br><span class="line">curl 172.24.133.92 -H <span class="string">"HOST:demo-stable"</span></span><br><span class="line">hello this is version 2</span><br></pre></td></tr></table></figure><p>这时候，用户流量被引到版本2，发布成功。</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ing demo-canary</span><br><span class="line">kubectl delete svc demo-service-blue</span><br><span class="line">kubectl delete deployment demo-deployment-blue</span><br></pre></td></tr></table></figure><p>按顺序清理以上资源。</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>关于蓝绿发布的缺陷，目前主要有两点：</p><ol><li>在发布期间要比原来多占用一倍的服务器资源。</li><li>需要维护一份当前用户流量所至的环境的数据（例如current:blue）。</li></ol><p>但相比旧的发布流程，蓝绿发布所带来的系统可用性的提升和用户体验的提升是非常巨大的。<br>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes Ingress（1）简介</title>
      <link href="/2017/04/13/KubernetesIngress%EF%BC%881%EF%BC%89/"/>
      <url>/2017/04/13/KubernetesIngress%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么选择Ingress"><a href="#为什么选择Ingress" class="headerlink" title="为什么选择Ingress"></a>为什么选择Ingress</h2><p>kubernets的service和pod在集群内部有着集群网络统一管理和分配的ip地址，但是这些ip地址只有在集群内部可见，任何集群外部的节点都无法直接访问内部节点。显然，我们必须通过其它的渠道来访问。</p><p>目前，kubernetes提供了三种访问的方式：</p><ul><li>NodePort</li><li>LoadBalance</li><li>Ingress</li></ul><p>其中，NodePort对于主机端口资原的要求非常高，无法应用于大规模的企业私有云，而LoadBalance方式只有在像GCE、Asure等等这些云服务提供商上面才能使用。因此，对于私有云可以采用的最佳入口方式非Ingress莫属。</p><h2 id="什么是Ingress"><a href="#什么是Ingress" class="headerlink" title="什么是Ingress"></a>什么是Ingress</h2><p>Ingress是一系列允许入站链接到达集群内部服务的规则的集合。<br>未使用Ingress，外部网络无法到达内部服务<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  internet</span><br><span class="line">      |</span><br><span class="line">------------</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure></p><p>Ingress的加入则使外部网络有了访问内部服务的途径<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure></p><p>Ingress可以为服务配置一系列的访问域名，负载均衡策略，SSL等等。</p><h2 id="Ingress-Resource"><a href="#Ingress-Resource" class="headerlink" title="Ingress Resource"></a>Ingress Resource</h2><p>Ingress和Pod、Servce等等类似，被定义为kubernetes的一种资源<br>它的一个简单的示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: test-ingress</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: foo.bar.com</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /testpath</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: test</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure></p><p>这段Ingress的描述的意思是：将host为foo.bar.com且路径为/testpath的访问引导到test:80这个服务上面。</p><h2 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h2><p>本质上说Ingress只是存储在etcd上面一些数据，我们可以能过kubernetes的apiserver添加删除和修改ingress资源。那么真正让整个Ingress运转起来的一个重要组件是Ingress Controller。<br>然而，这个Controller并不像其它Controller一样作为kubernetes的核心组件在master启动的时候一起启动起来，它实际上是kubernetes的一个扩展，我们必须选择一个适合自己的Ingress Controller，或者自己去实现一个。</p><p>对于Ingress Controller官方的定义是这样子的：</p><blockquote><p>An Ingress Controller is a daemon, deployed as a Kubernetes Pod, that watches the apiserver’s /ingresses endpoint for updates to the Ingress resource. Its job is to satisfy requests for ingress.</p></blockquote><p>Ingress Controller作为一个守户进程，通过监听apiserver的ingresses资源变化，并且根据其指定的规则建立起外部网络访问内部服务的通道。对于官方描述的 deployed as a Kubernetes Pod，实际上是没办法运用到生产环境当中去的，这个我们在后面会提到这个问题，并且会有相应的解决方案。</p><h2 id="Ingress-Controller的架构"><a href="#Ingress-Controller的架构" class="headerlink" title="Ingress Controller的架构"></a>Ingress Controller的架构</h2><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/ingress-controller.png" alt="ingress-controller"></p><p>上图展示了一个nginx ingress controller的部署架构图，ingress controller通过轮询监听apiserver的方式来获取ingress资源的变化，将ingress资源存储到本地缓存，并通知nginx进行相应的配置修改的加载。<br>ingress controller监控了ingress、service、endpoint、secret、node、configmap一系列资源，一旦资源发生了变化（包括增加、删除和修改），会立即通知backend，例如nginx等。<br>为了减少对apiserver的请求次数，nginx controllder会将每次请求在本地进行缓存，该缓存import了kubernetes提供的包”k8s.io/kubernetes/pkg/client/cache”。</p><h2 id="Ingress-Controller的漂移问题"><a href="#Ingress-Controller的漂移问题" class="headerlink" title="Ingress Controller的漂移问题"></a>Ingress Controller的漂移问题</h2><p>在官方定义的ingress controller，将它部署在kubernetes内部，以pod的方式存在kubernetes集群内部。既然是pod，那么就会存在漂移的问题，而作为外部网络的访问入口，我们是不允许这样的情况发生的。其中一种解决方案是通过VIP和服务发现来解决，但这无疑增加了整个系统的复杂度。<br>其实要解决漂移的问题很简单，我们只要将其部署在kubernetes集群外部，那么它就不受kubernetes的控制，自然而然就不会漂移了。<br>细心的读者可能会发现部署在外部的话，那么集群内外的网络通讯又会成为一个问题。笔者的集群环境的网络覆盖方案选择的是flannel，在每一个node上面初始化kubernetes环境的时候，都会一并装上flannel。<br>关于flannel的原理，这里有一篇文章分析得很详细<a href="http://dockone.io/article/618" target="_blank" rel="noopener">DockOne技术分享（十八）：一篇文章带你了解Flannel</a></p><p>这是flannel的原理图：<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/flannel.png" alt="flannel"></p><p>通过该图我们可以看到通过docker0和flannel0这两块网卡打通了宿主机和集群内部的一个网络通道。</p><p>笔记在自己的节点上进行了验证<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/flannel-if.png" alt="flannel-if"></p><p>也就是说只要部署在该宿主机上的程序，都可以访问该节点上的任何docker容器，至于其它节点的docker容器，通过flanneld到节点的物理网卡，在flanned的时候数据包会被另外一种协议包装（如UDP、VxLAN、AWS VPC和GCE路由）成packet，该包到了另外一个节点的物理网卡再交由flanned进行解包，之后再通过虚拟的flannel和docker两块网卡路由到容器内部。</p><p>因此，我们可以以docker容器和方式或者直接以宿主机进程的方式部署我们的ingress controller。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此我们简单的介绍了kubernetes ingress 的整体结构的设计，还有ingress controller的实现机制以及部署问题等，在下一篇文章中我们会通过ingress controller的源码分析，详细讲解它的实现原理。</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes Ingress（2）Controller源码分析</title>
      <link href="/2017/04/13/KubernetesIngress%EF%BC%882%EF%BC%89/"/>
      <url>/2017/04/13/KubernetesIngress%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>经过上一篇文章的介绍，我们简单了解了整个Ingress的运行机制，这里我们将通过Ingress Controller的源码来更深入分析其运行过程。<br>要了解本文的内容我们要先了解一个概念，就是kuberentes的events</p><h1 id="events"><a href="#events" class="headerlink" title="events"></a>events</h1><p>关于events的概念，kubernetes中文社区有一个系列文章剖析得很清析</p><ul><li><a href="https://www.kubernetes.org.cn/1031.html" target="_blank" rel="noopener">Kubernetes Events介绍（上）</a></li><li><a href="https://www.kubernetes.org.cn/1090.html" target="_blank" rel="noopener">Kubernetes Events介绍（中）</a></li><li><a href="https://www.kubernetes.org.cn/1195.html" target="_blank" rel="noopener">Kubernetes Events介绍（下）</a></li></ul><p>文章详细介绍了Events的概念，从哪里产生以及去向哪里等，以及更复杂的Events聚合操作。事实上，kubernetes正是通过Events让Ingress Controller知道资源的变化情况。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>从官方提供的一个Ingress Controller简单实现的示例中，我们可以找到整个框架代码的入口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dc := newDummyController()</span><br><span class="line">ic := controller.NewIngressController(dc)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"Shutting down ingress controller..."</span>)</span><br><span class="line">ic.Stop()</span><br><span class="line">&#125;()</span><br><span class="line">ic.Start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main函数的工作内容十分简单，就是实例化一个IngressContrller并将其Start起来。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"k8s.io/ingress/core/pkg/ingress/controller"</span></span><br></pre></td></tr></table></figure></p><p>这是controller框架核心所在的包<br>我们看一下NewIngressController的定义<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIngressController</span><span class="params">(backend ingress.Controller)</span> *<span class="title">GenericController</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法接收一个ingress.Controller接口，并返回一个GenericController结构体的指针<br>再来看一下ingress.Controller接口的定义<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Controller <span class="keyword">interface</span> &#123;</span><br><span class="line">healthz.HealthzChecker</span><br><span class="line">Reload(data []<span class="keyword">byte</span>) ([]<span class="keyword">byte</span>, <span class="keyword">bool</span>, error)</span><br><span class="line">OnUpdate(Configuration) ([]<span class="keyword">byte</span>, error)</span><br><span class="line">SetConfig(*api.ConfigMap)</span><br><span class="line">SetListers(StoreLister)</span><br><span class="line">BackendDefaults() defaults.Backend</span><br><span class="line">Info() *BackendInfo</span><br><span class="line">OverrideFlags(*pflag.FlagSet)</span><br><span class="line">DefaultIngressClass() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个接口就是ingress controller留给用户自已实现代码的地方，只要实现了这个接口，那么你自定义的ingress controller也就完成了。这里先点一下最重要的两个方法 OnUpdate和Reload<br>当资源发生变化时，框架会调用OnUpdate方法，并将资源配置信息传入，用户根据这些配置信息生成配置（以[]byte返回），然后框架再调用Reload方法，用户在这个方法中可以重新加载配置(例如 nginx -r reload) 嘿嘿是不是一个很典型的模板方法！！</p><p>NewIngressController的主要工作是初始化命令行参数，接着在方法最后调用包内私有函数newIngressController</p><h2 id="newIngressController"><a href="#newIngressController" class="headerlink" title="newIngressController"></a>newIngressController</h2><p>这个包内方法是整个框架核心所在，它真正的初始化了IngressController<br>来看函数定义：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newIngressController</span><span class="params">(config *Configuration)</span> *<span class="title">GenericController</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的Configuration包含了从命令行传进来的参数配置，以及用户实现的一个Controller接口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Configuration <span class="keyword">struct</span> &#123;</span><br><span class="line">Client clientset.Interface</span><br><span class="line">ResyncPeriod   time.Duration</span><br><span class="line">DefaultService <span class="keyword">string</span></span><br><span class="line">IngressClass   <span class="keyword">string</span></span><br><span class="line">Namespace      <span class="keyword">string</span></span><br><span class="line">ConfigMapName  <span class="keyword">string</span></span><br><span class="line">TCPConfigMapName <span class="keyword">string</span></span><br><span class="line">UDPConfigMapName      <span class="keyword">string</span></span><br><span class="line">DefaultSSLCertificate <span class="keyword">string</span></span><br><span class="line">DefaultHealthzURL     <span class="keyword">string</span></span><br><span class="line">DefaultIngressClass   <span class="keyword">string</span></span><br><span class="line">PublishService <span class="keyword">string</span></span><br><span class="line">    <span class="comment">//用户实现的接口</span></span><br><span class="line">Backend ingress.Controller</span><br><span class="line">UpdateStatus <span class="keyword">bool</span></span><br><span class="line">ElectionID   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的Backed就是上文提到的Controller接口，接下来看一下该方法做了哪些事情<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">eventBroadcaster := record.NewBroadcaster()</span><br><span class="line">eventBroadcaster.StartLogging(glog.Infof)</span><br><span class="line">eventBroadcaster.StartRecordingToSink(&amp;unversionedcore.EventSinkImpl&#123;</span><br><span class="line">    Interface: config.Client.Core().Events(config.Namespace),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ic := GenericController&#123;</span><br><span class="line">    cfg:             config,</span><br><span class="line">    stopLock:        &amp;sync.Mutex&#123;&#125;,</span><br><span class="line">    stopCh:          <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    syncRateLimiter: flowcontrol.NewTokenBucketRateLimiter(<span class="number">0.1</span>, <span class="number">1</span>),</span><br><span class="line">    recorder: eventBroadcaster.NewRecorder(api.EventSource&#123;</span><br><span class="line">        Component: <span class="string">"ingress-controller"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    sslCertTracker: newSSLCertTracker(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ic.syncQueue = task.NewTaskQueue(ic.sync)</span><br><span class="line">ic.secretQueue = task.NewTaskQueue(ic.syncSecret)</span><br></pre></td></tr></table></figure></p><p>这段代码做了三件事情：<br>1.初始化了一个事件广播器<br>2.初始化了GenericController，将前面的配置传过去，并且new了一个事件的recorder，这个recorder用来在后面产生事件。<br>3.初始化了syncQueue和secretQueue</p><p>这两个Queue有什么作用呢?来看一下它的定义和注释:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewTaskQueue creates a new task queue with the given sync function.</span></span><br><span class="line"><span class="comment">// The sync function is called for every element inserted into the queue.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTaskQueue</span><span class="params">(syncFn <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span>) *<span class="title">Queue</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewCustomTaskQueue(syncFn, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注释已经解释得很清楚了，这个方法所创建的queue，每接收一个元素就会调用一个syncFn，并将该元素作为该方法的参数传进去。可以看到ic.syncQueue和ic.secretQueue对应的处理方法为ic.sync和ic.syncSecret，这两个方法到底做了些什么事情，我们后面再分析。<br>这里还有一个问题就是为什么不直接调用syncFn而要通过队列呢，很显然这里队列的作用就是将并行的事情串行化掉而已。</p><h2 id="kubernetes客户端的资源监听机制"><a href="#kubernetes客户端的资源监听机制" class="headerlink" title="kubernetes客户端的资源监听机制"></a>kubernetes客户端的资源监听机制</h2><p>kubernetes的资源监听机制是一个相对比较复杂的过程，首先来看一下这段定义<br>在 “k8s.io/kubernetes/pkg/client/cache” 包下面存在着<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResourceEventHandlerFuncs <span class="keyword">struct</span> &#123;</span><br><span class="line">AddFunc    <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">UpdateFunc</span> <span class="title">func</span><span class="params">(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">DeleteFunc</span> <span class="title">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这样一样结构体，该结构体实现了以下接口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResourceEventHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">OnAdd(obj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">OnUpdate(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">OnDelete(obj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResourceEventHandlerFuncs)</span> <span class="title">OnAdd</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.AddFunc != <span class="literal">nil</span> &#123;</span><br><span class="line">r.AddFunc(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResourceEventHandlerFuncs)</span> <span class="title">OnUpdate</span><span class="params">(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.UpdateFunc != <span class="literal">nil</span> &#123;</span><br><span class="line">r.UpdateFunc(oldObj, newObj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResourceEventHandlerFuncs)</span> <span class="title">OnDelete</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.DeleteFunc != <span class="literal">nil</span> &#123;</span><br><span class="line">r.DeleteFunc(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着再来看一下NewInformer函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInformer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">lw ListerWatcher,</span></span></span><br><span class="line"><span class="function"><span class="params">objType runtime.Object,</span></span></span><br><span class="line"><span class="function"><span class="params">resyncPeriod time.Duration,</span></span></span><br><span class="line"><span class="function"><span class="params">h ResourceEventHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(Store, *Controller)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数初始化一个消息通知器，ListerWatcher指定了监听资源的方法，一旦资源发生了变化（增、删、改），就会触发ResourceEventHandler相应的函数。这里是一个观察者模式的简化版，将多播委托简化成单播委托，并且将多个事件聚合在了一起。好了，这里要说一下整个controller最重要的list和watch模型。</p><h2 id="List和Watch"><a href="#List和Watch" class="headerlink" title="List和Watch"></a>List和Watch</h2><p>我们先来看一下这段代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ic.ingLister.Store, ic.ingController = cache.NewInformer(</span><br><span class="line">cache.NewListWatchFromClient(ic.cfg.Client.Extensions().RESTClient(), <span class="string">"ingresses"</span>, ic.cfg.Namespace, fields.Everything()),</span><br><span class="line">&amp;extensions.Ingress&#123;&#125;, ic.cfg.ResyncPeriod, ingEventHandler)</span><br></pre></td></tr></table></figure></p><p>顺藤摸瓜：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewListWatchFromClient</span><span class="params">(c Getter, resource <span class="keyword">string</span>, namespace <span class="keyword">string</span>, fieldSelector fields.Selector)</span> *<span class="title">ListWatch</span></span> &#123;</span><br><span class="line">listFunc := <span class="function"><span class="keyword">func</span><span class="params">(options api.ListOptions)</span> <span class="params">(runtime.Object, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fieldSelector).</span><br><span class="line">Do().</span><br><span class="line">Get()</span><br><span class="line">&#125;</span><br><span class="line">watchFunc := <span class="function"><span class="keyword">func</span><span class="params">(options api.ListOptions)</span> <span class="params">(watch.Interface, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Prefix(<span class="string">"watch"</span>).</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fieldSelector).</span><br><span class="line">Watch()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;ListWatch&#123;ListFunc: listFunc, WatchFunc: watchFunc&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里我们找到了controller如何和apiserver交互的代码，既然找到了，那我们就动起手来，看看它具体干了一些什么事睛。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createApiserverClient</span><span class="params">(apiserverHost <span class="keyword">string</span>, kubeConfig <span class="keyword">string</span>)</span> <span class="params">(*client.Clientset, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">clientConfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(</span><br><span class="line">&amp;clientcmd.ClientConfigLoadingRules&#123;ExplicitPath: kubeConfig&#125;,</span><br><span class="line">&amp;clientcmd.ConfigOverrides&#123;ClusterInfo: clientcmdapi.Cluster&#123;Server: apiserverHost&#125;&#125;)</span><br><span class="line"></span><br><span class="line">cfg, err := clientConfig.ClientConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg.QPS = defaultQPS</span><br><span class="line">cfg.Burst = defaultBurst</span><br><span class="line">cfg.ContentType = <span class="string">"application/vnd.kubernetes.protobuf"</span></span><br><span class="line">proxy := <span class="function"><span class="keyword">func</span><span class="params">(_ *http.Request)</span> <span class="params">(*url.URL, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> url.Parse(<span class="string">"http://127.0.0.1:8888"</span>)</span><br><span class="line">&#125;</span><br><span class="line">cfg.Transport = &amp;http.Transport&#123;Proxy: proxy&#125;</span><br><span class="line"></span><br><span class="line">glog.Infof(<span class="string">"Creating API server client for %s"</span>, cfg.Host)</span><br><span class="line"></span><br><span class="line">client, err := client.NewForConfig(cfg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> client, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kubeClient, err := createApiserverClient(*apiserverHost, *kubeConfigFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list, err := kubeClient.Extensions().RESTClient().</span><br><span class="line">Get().</span><br><span class="line">Namespace(<span class="string">"default"</span>).</span><br><span class="line">Resource(<span class="string">"ingresses"</span>).</span><br><span class="line">VersionedParams(&amp;api.ListOptions&#123;ResourceVersion: <span class="string">"0"</span>&#125;, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fields.Everything()).</span><br><span class="line">Do().</span><br><span class="line">Get()</span><br></pre></td></tr></table></figure><p>在创建client的时候我们设置了http代理，这里我用了fiddler工具用于抓取http的请求内容。接着我们请求了default名称空间下的ingresses资源列表，设置了resourceVersion为0<br>在fiddler中我们发现其请求了/apis/extensions/v1beta1/namespaces/default/ingresses?resourceVersion=0这个api<br>并且返回了一下的内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"IngressList"</span>,</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"extensions/v1beta1"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"selfLink"</span>: <span class="string">"/apis/extensions/v1beta1/namespaces/default/ingresses"</span>,</span><br><span class="line">    <span class="attr">"resourceVersion"</span>: <span class="string">"2264497"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"nginx-test"</span>,</span><br><span class="line">        <span class="attr">"namespace"</span>: <span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"selfLink"</span>: <span class="string">"/apis/extensions/v1beta1/namespaces/default/ingresses/nginx-test"</span>,</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"fa01f640-231f-11e7-b7f6-ecf4bbc532cc"</span>,</span><br><span class="line">        <span class="attr">"resourceVersion"</span>: <span class="string">"2264486"</span>,</span><br><span class="line">        <span class="attr">"generation"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"creationTimestamp"</span>: <span class="string">"2017-04-17T03:43:10Z"</span>,</span><br><span class="line">        <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">          <span class="attr">"ingress.kubernetes.io/force-ssl-redirect"</span>: <span class="string">"false"</span>,</span><br><span class="line">          <span class="attr">"kubernetes.io/ingress.class"</span>: <span class="string">"nginx"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"spec"</span>: &#123;</span><br><span class="line">        <span class="attr">"rules"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"stickyingress.example.com"</span>,</span><br><span class="line">            <span class="attr">"http"</span>: &#123;</span><br><span class="line">              <span class="attr">"paths"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                  <span class="attr">"backend"</span>: &#123;</span><br><span class="line">                    <span class="attr">"serviceName"</span>: <span class="string">"echoheaders-x"</span>,</span><br><span class="line">                    <span class="attr">"servicePort"</span>: <span class="number">80</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"status"</span>: &#123;</span><br><span class="line">        <span class="attr">"loadBalancer"</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"yangz-lb-test"</span>,</span><br><span class="line">        <span class="attr">"namespace"</span>: <span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"selfLink"</span>: <span class="string">"/apis/extensions/v1beta1/namespaces/default/ingresses/yangz-lb-test"</span>,</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"fef1d670-231f-11e7-b7f6-ecf4bbc532cc"</span>,</span><br><span class="line">        <span class="attr">"resourceVersion"</span>: <span class="string">"2264497"</span>,</span><br><span class="line">        <span class="attr">"generation"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"creationTimestamp"</span>: <span class="string">"2017-04-17T03:43:18Z"</span>,</span><br><span class="line">        <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">          <span class="attr">"ingress.kubernetes.io/force-ssl-redirect"</span>: <span class="string">"false"</span>,</span><br><span class="line">          <span class="attr">"kubernetes.io/ingress.class"</span>: <span class="string">"nginx"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"spec"</span>: &#123;</span><br><span class="line">        <span class="attr">"rules"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"www.yangz.com"</span>,</span><br><span class="line">            <span class="attr">"http"</span>: &#123;</span><br><span class="line">              <span class="attr">"paths"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                  <span class="attr">"backend"</span>: &#123;</span><br><span class="line">                    <span class="attr">"serviceName"</span>: <span class="string">"yangz-lb-test"</span>,</span><br><span class="line">                    <span class="attr">"servicePort"</span>: <span class="number">80</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"status"</span>: &#123;</span><br><span class="line">        <span class="attr">"loadBalancer"</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段json列出了当前default名称空间下的所有ingress资源的情况。有了这些列表数据（可以使用同样的方法列出service,node,secret等其它资源），对于我们生成backend的配置（如nginx的配置）就已经足够了，我们可以通过不停的轮询这个接口，一旦发现数据发生了变化，我们就重新生成配置并加载它。一切工作到这里似乎就可以结束了，但是细心的读者可能会发生我们还有一watch接口。这里要记住list接口返回的resourceVersion:2264497</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch, err := kubeClient.Extensions().RESTClient().</span><br><span class="line">Get().</span><br><span class="line">Prefix(<span class="string">"watch"</span>).</span><br><span class="line">Namespace(<span class="string">"default"</span>).</span><br><span class="line">Resource(<span class="string">"ingresses"</span>).</span><br><span class="line">VersionedParams(&amp;api.ListOptions&#123;ResourceVersion: <span class="string">"2264497"</span>&#125;, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fields.Everything()).</span><br><span class="line">Watch()</span><br></pre></td></tr></table></figure><p>通过fiddler可以看到请求了/apis/extensions/v1beta1/watch/namespaces/default/ingresses?resourceVersion=2264497这个接口，值得注意的是在返回的http头是这样子的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/vnd.kubernetes.protobuf;stream=watch</span><br><span class="line">Date: Mon, 17 Apr 2017 03:54:47 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure></p><p>这个时候这个http请求是没有Content-Lenth头，而且服务端一直hold住这个请求，注意Transfer-Encoding: chunked。对于http服务端主动通知客户端的，除了轮询外，还有使用这种方式的，这也是大多数web聊天工具使用的方式。<br>这时候我们发现通过resourceVersion=2264497请求不到任何的东西，这是因为对于2264497这个版本号来说，当前ingress资源并没有发生任何变化<br>我们再做以下实验:在master机上运行kubectl delete -n default ing –all<br>这个命令删除default名称空间下面的所有ingress资源，这时候可以发下刚才hold住的http请求立即返回了一些信息：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"DELETED"</span>,</span><br><span class="line">    <span class="attr">"object"</span>: &#123;</span><br><span class="line">        <span class="attr">"kind"</span>: <span class="string">"Ingress"</span>,</span><br><span class="line">        <span class="attr">"apiVersion"</span>: <span class="string">"extensions/v1beta1"</span>,</span><br><span class="line">        <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"nginx-test"</span>,</span><br><span class="line">            <span class="attr">"namespace"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="attr">"selfLink"</span>: <span class="string">"/apis/extensions/v1beta1/namespaces/default/ingresses/nginx-test"</span>,</span><br><span class="line">            <span class="attr">"uid"</span>: <span class="string">"fa01f640-231f-11e7-b7f6-ecf4bbc532cc"</span>,</span><br><span class="line">            <span class="attr">"resourceVersion"</span>: <span class="string">"2273842"</span>,</span><br><span class="line">            <span class="attr">"generation"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"creationTimestamp"</span>: <span class="string">"2017-04-17T03:43:10Z"</span>,</span><br><span class="line">            <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">                <span class="attr">"ingress.kubernetes.io/force-ssl-redirect"</span>: <span class="string">"false"</span>,</span><br><span class="line">                <span class="attr">"kubernetes.io/ingress.class"</span>: <span class="string">"nginx"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"spec"</span>: &#123;</span><br><span class="line">            <span class="attr">"rules"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"host"</span>: <span class="string">"stickyingress.example.com"</span>,</span><br><span class="line">                    <span class="attr">"http"</span>: &#123;</span><br><span class="line">                        <span class="attr">"paths"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                                <span class="attr">"backend"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"serviceName"</span>: <span class="string">"echoheaders-x"</span>,</span><br><span class="line">                                    <span class="attr">"servicePort"</span>: <span class="number">80</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"status"</span>: &#123;</span><br><span class="line">            <span class="attr">"loadBalancer"</span>: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"DELETED"</span>,</span><br><span class="line">    <span class="attr">"object"</span>: &#123;</span><br><span class="line">        <span class="attr">"kind"</span>: <span class="string">"Ingress"</span>,</span><br><span class="line">        <span class="attr">"apiVersion"</span>: <span class="string">"extensions/v1beta1"</span>,</span><br><span class="line">        <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"yangz-lb-test"</span>,</span><br><span class="line">            <span class="attr">"namespace"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="attr">"selfLink"</span>: <span class="string">"/apis/extensions/v1beta1/namespaces/default/ingresses/yangz-lb-test"</span>,</span><br><span class="line">            <span class="attr">"uid"</span>: <span class="string">"fef1d670-231f-11e7-b7f6-ecf4bbc532cc"</span>,</span><br><span class="line">            <span class="attr">"resourceVersion"</span>: <span class="string">"2273843"</span>,</span><br><span class="line">            <span class="attr">"generation"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"creationTimestamp"</span>: <span class="string">"2017-04-17T03:43:18Z"</span>,</span><br><span class="line">            <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">                <span class="attr">"ingress.kubernetes.io/force-ssl-redirect"</span>: <span class="string">"false"</span>,</span><br><span class="line">                <span class="attr">"kubernetes.io/ingress.class"</span>: <span class="string">"nginx"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"spec"</span>: &#123;</span><br><span class="line">            <span class="attr">"rules"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"host"</span>: <span class="string">"www.yangz.com"</span>,</span><br><span class="line">                    <span class="attr">"http"</span>: &#123;</span><br><span class="line">                        <span class="attr">"paths"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                                <span class="attr">"backend"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"serviceName"</span>: <span class="string">"yangz-lb-test"</span>,</span><br><span class="line">                                    <span class="attr">"servicePort"</span>: <span class="number">80</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"status"</span>: &#123;</span><br><span class="line">            <span class="attr">"loadBalancer"</span>: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>json显示了我们所删掉的ingress资源信息，注意其中的resourceVersion，这个时候我们修改watch接口中的resourceVersion为2273842的话，那么其返回内容会变成<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"DELETED"</span>,</span><br><span class="line">    <span class="attr">"object"</span>: &#123;</span><br><span class="line">        <span class="attr">"kind"</span>: <span class="string">"Ingress"</span>,</span><br><span class="line">        <span class="attr">"apiVersion"</span>: <span class="string">"extensions/v1beta1"</span>,</span><br><span class="line">        <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"yangz-lb-test"</span>,</span><br><span class="line">            <span class="attr">"namespace"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="attr">"selfLink"</span>: <span class="string">"/apis/extensions/v1beta1/namespaces/default/ingresses/yangz-lb-test"</span>,</span><br><span class="line">            <span class="attr">"uid"</span>: <span class="string">"fef1d670-231f-11e7-b7f6-ecf4bbc532cc"</span>,</span><br><span class="line">            <span class="attr">"resourceVersion"</span>: <span class="string">"2273843"</span>,</span><br><span class="line">            <span class="attr">"generation"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"creationTimestamp"</span>: <span class="string">"2017-04-17T03:43:18Z"</span>,</span><br><span class="line">            <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">                <span class="attr">"ingress.kubernetes.io/force-ssl-redirect"</span>: <span class="string">"false"</span>,</span><br><span class="line">                <span class="attr">"kubernetes.io/ingress.class"</span>: <span class="string">"nginx"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"spec"</span>: &#123;</span><br><span class="line">            <span class="attr">"rules"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"host"</span>: <span class="string">"www.yangz.com"</span>,</span><br><span class="line">                    <span class="attr">"http"</span>: &#123;</span><br><span class="line">                        <span class="attr">"paths"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">                                <span class="attr">"backend"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"serviceName"</span>: <span class="string">"yangz-lb-test"</span>,</span><br><span class="line">                                    <span class="attr">"servicePort"</span>: <span class="number">80</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"status"</span>: &#123;</span><br><span class="line">            <span class="attr">"loadBalancer"</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说，watch接口根据请求的版本号返回当前服务器的状态与给定版本之间的差异。例如在版本2264497和2273843之间，有两个ingress被删除，而2273842和2273843这两个版本之间只有一个ingress被删除。</p><p>小结：listwatch在初始化的时候先通过list接口获取当前资源的列表以及resourceVersion，接着再通过watch接口监听资源的变化。</p><h2 id="事件的传递"><a href="#事件的传递" class="headerlink" title="事件的传递"></a>事件的传递</h2><p>了解了资源的监听机制，那么程序是在什么时候开始监听的，并且发生变化后事件是如何传递的呢？<br>在上文件的NewInformer函数返回了两个值:cache.Store和cache.Controller，其中Controller在GenericController的Start方法中被用到<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ic GenericController)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">glog.Infof(<span class="string">"starting Ingress controller"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> ic.ingController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.endpController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.svcController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.nodeController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.secrController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.mapController.Run(ic.stopCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> ic.secretQueue.Run(<span class="number">5</span>*time.Second, ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.syncQueue.Run(<span class="number">5</span>*time.Second, ic.stopCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ic.syncStatus != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">go</span> ic.syncStatus.Run(ic.stopCh)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;-ic.stopCh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法就是在文章开头的main函数中被调用到的ic.Start方法,这里可以看到有6个controller，分别对应了6种资源:ingresses,endpoints,services,nodes,secrets,configmaps。在调用cache.Controller的Run方法时，每个Controller都会开始ListWatch流程，对相应的资源进行监听。</p><p>看一下Run方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span> <span class="title">Run</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> utilruntime.HandleCrash()</span><br><span class="line">r := NewReflector(</span><br><span class="line">c.config.ListerWatcher,</span><br><span class="line">c.config.ObjectType,</span><br><span class="line">c.config.Queue,</span><br><span class="line">c.config.FullResyncPeriod,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">c.reflectorMutex.Lock()</span><br><span class="line">c.reflector = r</span><br><span class="line">c.reflectorMutex.Unlock()</span><br><span class="line"></span><br><span class="line">r.RunUntil(stopCh)</span><br><span class="line"></span><br><span class="line">wait.Until(c.processLoop, time.Second, stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际运行是通过Reflector的RunUntil<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">RunUntil</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">glog.V(<span class="number">3</span>).Infof(<span class="string">"Starting reflector %v (%s) from %s"</span>, r.expectedType, r.resyncPeriod, r.name)</span><br><span class="line"><span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.ListAndWatch(stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">utilruntime.HandleError(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, r.period, stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Until loops until stop channel is closed, running f every period.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Until is syntactic sugar on top of JitterUntil with zero jitter factor and</span></span><br><span class="line"><span class="comment">// with sliding = true (which means the timer for period starts after the f</span></span><br><span class="line"><span class="comment">// completes).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Until</span><span class="params">(f <span class="keyword">func</span>()</span>, <span class="title">period</span> <span class="title">time</span>.<span class="title">Duration</span>, <span class="title">stopCh</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125;) &#123;</span><br><span class="line">JitterUntil(f, period, <span class="number">0.0</span>, <span class="literal">true</span>, stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释里面说到，Until循环调用f函数，每隔period时长调用一次，直到stop channel被关闭。可以看到这个period参数是在应用程序启动的时候通过命令行参数指定的，如果不指定，则默认值为60s<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resyncPeriod = flags.Duration(<span class="string">"sync-period"</span>, <span class="number">60</span>*time.Second,</span><br><span class="line"><span class="string">`Relist and confirm cloud resources this often.`</span>)</span><br></pre></td></tr></table></figure></p><p>笔者猜测，这么做的目的应该是防止watch的时候http连接异常断开之后导致后续的监听失效，毕竟http无法保证连接的稳定性。</p><p>那么真正干活的地方应该就是Reflactor的ListAndWatch方法了<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListAndWatch first lists all items and get the resource version at the moment of call,</span></span><br><span class="line"><span class="comment">// and then use the resource version to watch.</span></span><br><span class="line"><span class="comment">// It returns error if ListAndWatch didn't even try to initialize watch.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">ListAndWatch</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">glog.V(<span class="number">3</span>).Infof(<span class="string">"Listing and watching %v from %s"</span>, r.expectedType, r.name)</span><br><span class="line"><span class="keyword">var</span> resourceVersion <span class="keyword">string</span></span><br><span class="line">resyncCh, cleanup := r.resyncChan()</span><br><span class="line"><span class="keyword">defer</span> cleanup()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Explicitly set "0" as resource version - it's fine for the List()</span></span><br><span class="line"><span class="comment">// to be served from cache and potentially be delayed relative to</span></span><br><span class="line"><span class="comment">// etcd contents. Reflector framework will catch up via Watch() eventually.</span></span><br><span class="line">options := api.ListOptions&#123;ResourceVersion: <span class="string">"0"</span>&#125;</span><br><span class="line">list, err := r.listerWatcher.List(options)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"%s: Failed to list %v: %v"</span>, r.name, r.expectedType, err)</span><br><span class="line">&#125;</span><br><span class="line">listMetaInterface, err := meta.ListAccessor(list)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"%s: Unable to understand list result %#v: %v"</span>, r.name, list, err)</span><br><span class="line">&#125;</span><br><span class="line">resourceVersion = listMetaInterface.GetResourceVersion()</span><br><span class="line">items, err := meta.ExtractList(list)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"%s: Unable to understand list result %#v (%v)"</span>, r.name, list, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.syncWith(items, resourceVersion); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"%s: Unable to sync list result: %v"</span>, r.name, err)</span><br><span class="line">&#125;</span><br><span class="line">r.setLastSyncResourceVersion(resourceVersion)</span><br><span class="line"></span><br><span class="line">resyncerrc := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">1</span>)</span><br><span class="line">cancelCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(cancelCh)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-resyncCh:</span><br><span class="line"><span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-cancelCh:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">glog.V(<span class="number">4</span>).Infof(<span class="string">"%s: forcing resync"</span>, r.name)</span><br><span class="line"><span class="keyword">if</span> err := r.store.Resync(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">resyncerrc &lt;- err</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cleanup()</span><br><span class="line">resyncCh, cleanup = r.resyncChan()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">timemoutseconds := <span class="keyword">int64</span>(minWatchTimeout.Seconds() * (rand.Float64() + <span class="number">1.0</span>))</span><br><span class="line">options = api.ListOptions&#123;</span><br><span class="line">ResourceVersion: resourceVersion,</span><br><span class="line"><span class="comment">// We want to avoid situations of hanging watchers. Stop any wachers that do not</span></span><br><span class="line"><span class="comment">// receive any events within the timeout window.</span></span><br><span class="line">TimeoutSeconds: &amp;timemoutseconds,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w, err := r.listerWatcher.Watch(options)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">case</span> io.EOF:</span><br><span class="line"><span class="comment">// watch closed normally</span></span><br><span class="line"><span class="keyword">case</span> io.ErrUnexpectedEOF:</span><br><span class="line">glog.V(<span class="number">1</span>).Infof(<span class="string">"%s: Watch for %v closed with unexpected EOF: %v"</span>, r.name, r.expectedType, err)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: Failed to watch %v: %v"</span>, r.name, r.expectedType, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If this is "connection refused" error, it means that most likely apiserver is not responsive.</span></span><br><span class="line"><span class="comment">// It doesn't make sense to re-list all objects because most likely we will be able to restart</span></span><br><span class="line"><span class="comment">// watch where we ended.</span></span><br><span class="line"><span class="comment">// If that's the case wait and resend watch request.</span></span><br><span class="line"><span class="keyword">if</span> urlError, ok := err.(*url.Error); ok &#123;</span><br><span class="line"><span class="keyword">if</span> opError, ok := urlError.Err.(*net.OpError); ok &#123;</span><br><span class="line"><span class="keyword">if</span> errno, ok := opError.Err.(syscall.Errno); ok &amp;&amp; errno == syscall.ECONNREFUSED &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := r.watchHandler(w, &amp;resourceVersion, resyncerrc, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != errorStopRequested &#123;</span><br><span class="line">glog.Warningf(<span class="string">"%s: watch of %v ended with: %v"</span>, r.name, r.expectedType, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于watch资源的处理方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchHandler watches w and keeps *resourceVersion up to date.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">watchHandler</span><span class="params">(w watch.Interface, resourceVersion *<span class="keyword">string</span>, errc <span class="keyword">chan</span> error, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">eventCount := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stopping the watcher should be idempotent and if we return from this function there's no way</span></span><br><span class="line"><span class="comment">// we're coming back in with the same watch interface.</span></span><br><span class="line"><span class="keyword">defer</span> w.Stop()</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line"><span class="keyword">return</span> errorStopRequested</span><br><span class="line"><span class="keyword">case</span> err := &lt;-errc:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> event, ok := &lt;-w.ResultChan():</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> loop</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> event.Type == watch.Error &#123;</span><br><span class="line"><span class="keyword">return</span> apierrs.FromObject(event.Object)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> e, a := r.expectedType, reflect.TypeOf(event.Object); e != <span class="literal">nil</span> &amp;&amp; e != a &#123;</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: expected type %v, but watch event object had type %v"</span>, r.name, e, a))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">meta, err := meta.Accessor(event.Object)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: unable to understand watch event %#v"</span>, r.name, event))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">newResourceVersion := meta.GetResourceVersion()</span><br><span class="line"><span class="keyword">switch</span> event.Type &#123;</span><br><span class="line"><span class="keyword">case</span> watch.Added:</span><br><span class="line">r.store.Add(event.Object)</span><br><span class="line"><span class="keyword">case</span> watch.Modified:</span><br><span class="line">r.store.Update(event.Object)</span><br><span class="line"><span class="keyword">case</span> watch.Deleted:</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Will any consumers need access to the "last known</span></span><br><span class="line"><span class="comment">// state", which is passed in event.Object? If so, may need</span></span><br><span class="line"><span class="comment">// to change this.</span></span><br><span class="line">r.store.Delete(event.Object)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: unable to understand watch event %#v"</span>, r.name, event))</span><br><span class="line">&#125;</span><br><span class="line">*resourceVersion = newResourceVersion</span><br><span class="line">r.setLastSyncResourceVersion(newResourceVersion)</span><br><span class="line">eventCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watchDuration := time.Now().Sub(start)</span><br><span class="line"><span class="keyword">if</span> watchDuration &lt; <span class="number">1</span>*time.Second &amp;&amp; eventCount == <span class="number">0</span> &#123;</span><br><span class="line">glog.V(<span class="number">4</span>).Infof(<span class="string">"%s: Unexpected watch close - watch lasted less than a second and no items received"</span>, r.name)</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"very short watch"</span>)</span><br><span class="line">&#125;</span><br><span class="line">glog.V(<span class="number">4</span>).Infof(<span class="string">"%s: Watch close - %v total %v items received"</span>, r.name, r.expectedType, eventCount)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里发现资源变化的时候，是通过cache.Store这样一个接口来存储变化的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Store <span class="keyword">interface</span> &#123;</span><br><span class="line">Add(obj <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">Update(obj <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">Delete(obj <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">List() []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">ListKeys() []<span class="keyword">string</span></span><br><span class="line">Get(obj <span class="keyword">interface</span>&#123;&#125;) (item <span class="keyword">interface</span>&#123;&#125;, exists <span class="keyword">bool</span>, err error)</span><br><span class="line">GetByKey(key <span class="keyword">string</span>) (item <span class="keyword">interface</span>&#123;&#125;, exists <span class="keyword">bool</span>, err error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace will delete the contents of the store, using instead the</span></span><br><span class="line"><span class="comment">// given list. Store takes ownership of the list, you should not reference</span></span><br><span class="line"><span class="comment">// it after calling this function.</span></span><br><span class="line">Replace([]<span class="keyword">interface</span>&#123;&#125;, <span class="keyword">string</span>) error</span><br><span class="line">Resync() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个Store是在NewInformer的时候初始化的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fifo := NewDeltaFIFO(MetaNamespaceKeyFunc, <span class="literal">nil</span>, clientState)</span><br></pre></td></tr></table></figure></p><p>并且在cache.Controller调用Run的时候，开始对该队列进行监听<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wait.Until(c.processLoop, time.Second, stopCh)</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span> <span class="title">processLoop</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">obj, err := c.config.Queue.Pop(PopProcessFunc(c.config.Process))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.config.RetryOnError &#123;</span><br><span class="line"><span class="comment">// This is the safe way to re-enqueue.</span></span><br><span class="line">c.config.Queue.AddIfNotPresent(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样c.config.Process也是在NewInformer的时候定义的：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Process: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// from oldest to newest</span></span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> obj.(Deltas) &#123;</span><br><span class="line"><span class="keyword">switch</span> d.Type &#123;</span><br><span class="line"><span class="keyword">case</span> Sync, Added, Updated:</span><br><span class="line"><span class="keyword">if</span> old, exists, err := clientState.Get(d.Object); err == <span class="literal">nil</span> &amp;&amp; exists &#123;</span><br><span class="line"><span class="keyword">if</span> err := clientState.Update(d.Object); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">h.OnUpdate(old, d.Object)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := clientState.Add(d.Object); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">h.OnAdd(d.Object)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> Deleted:</span><br><span class="line"><span class="keyword">if</span> err := clientState.Delete(d.Object); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">h.OnDelete(d.Object)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的h就是上文提到的ResourceEventHandler接口。当资源发化变化时，会先将资源保存到本地缓存中，再触发对应的事件，这里将资源缓存起来，以便后续的程序可以直接取，不用再次请求服务端。</p><p>这里简单看一下对于ingress资源发生变动时相应的处理逻辑:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">ingEventHandler := cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">AddFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">addIng := obj.(*extensions.Ingress)</span><br><span class="line"><span class="keyword">if</span> !class.IsValid(addIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &#123;</span><br><span class="line">glog.Infof(<span class="string">"ignoring add for ingress %v based on annotation %v"</span>, addIng.Name, class.IngressKey)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ic.recorder.Eventf(addIng, api.EventTypeNormal, <span class="string">"CREATE"</span>, fmt.Sprintf(<span class="string">"Ingress %s/%s"</span>, addIng.Namespace, addIng.Name))</span><br><span class="line">ic.syncQueue.Enqueue(obj)</span><br><span class="line"><span class="keyword">if</span> ic.annotations.ContainsCertificateAuth(addIng) &#123;</span><br><span class="line">s, err := ic.annotations.CertificateAuthSecret(addIng)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">ic.secretQueue.Enqueue(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">DeleteFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">delIng := obj.(*extensions.Ingress)</span><br><span class="line"><span class="keyword">if</span> !class.IsValid(delIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &#123;</span><br><span class="line">glog.Infof(<span class="string">"ignoring delete for ingress %v based on annotation %v"</span>, delIng.Name, class.IngressKey)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ic.recorder.Eventf(delIng, api.EventTypeNormal, <span class="string">"DELETE"</span>, fmt.Sprintf(<span class="string">"Ingress %s/%s"</span>, delIng.Namespace, delIng.Name))</span><br><span class="line">ic.syncQueue.Enqueue(obj)</span><br><span class="line">&#125;,</span><br><span class="line">UpdateFunc: <span class="function"><span class="keyword">func</span><span class="params">(old, cur <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">oldIng := old.(*extensions.Ingress)</span><br><span class="line">curIng := cur.(*extensions.Ingress)</span><br><span class="line"><span class="keyword">if</span> !class.IsValid(curIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &amp;&amp;</span><br><span class="line">!class.IsValid(oldIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(old, cur) &#123;</span><br><span class="line">upIng := cur.(*extensions.Ingress)</span><br><span class="line">ic.recorder.Eventf(upIng, api.EventTypeNormal, <span class="string">"UPDATE"</span>, fmt.Sprintf(<span class="string">"Ingress %s/%s"</span>, upIng.Namespace, upIng.Name))</span><br><span class="line"><span class="comment">// the referenced secret is different?</span></span><br><span class="line"><span class="keyword">if</span> diff := pretty.Compare(curIng.Spec.TLS, oldIng.Spec.TLS); diff != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, secretName := <span class="keyword">range</span> curIng.Spec.TLS &#123;</span><br><span class="line">secKey := <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> secretName.SecretName != <span class="string">""</span> &#123;</span><br><span class="line">secKey = fmt.Sprintf(<span class="string">"%v/%v"</span>, curIng.Namespace, secretName.SecretName)</span><br><span class="line">&#125;</span><br><span class="line">glog.Infof(<span class="string">"TLS section in ingress %v/%v changed (secret is now \"%v\")"</span>, upIng.Namespace, upIng.Name, secKey)</span><br><span class="line"><span class="comment">// default cert is already queued</span></span><br><span class="line"><span class="keyword">if</span> secKey != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// we need to wait until the ingress store is updated</span></span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">key, err := ic.GetSecret(secKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Errorf(<span class="string">"unexpected error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> key != <span class="literal">nil</span> &#123;</span><br><span class="line">ic.secretQueue.Enqueue(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ic.annotations.ContainsCertificateAuth(upIng) &#123;</span><br><span class="line">s, err := ic.annotations.CertificateAuthSecret(upIng)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">ic.secretQueue.Enqueue(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ic.syncQueue.Enqueue(cur)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里主要处理的就是对ingress资源的tsl节点，如果发现了对应的tsl资源，则会对secretQueue进行Enqueue操作。</p><p>到这里，整个框架的来龙去脉就基本上理清楚了，现在回到这两个队列上面:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic.syncQueue = task.NewTaskQueue(ic.sync)</span><br><span class="line">ic.secretQueue = task.NewTaskQueue(ic.syncSecret)</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ic *GenericController)</span> <span class="title">sync</span><span class="params">(e <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">ic.syncRateLimiter.Accept()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ic.syncQueue.IsShuttingDown() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !ic.controllersInSync() &#123;</span><br><span class="line">time.Sleep(podStoreSyncedPollPeriod)</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"deferring sync till endpoints controller has synced"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstreams, servers := ic.getBackendServers()</span><br><span class="line"><span class="keyword">var</span> passUpstreams []*ingress.SSLPassthroughBackend</span><br><span class="line"><span class="keyword">for</span> _, server := <span class="keyword">range</span> servers &#123;</span><br><span class="line"><span class="keyword">if</span> !server.SSLPassthrough &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, loc := <span class="keyword">range</span> server.Locations &#123;</span><br><span class="line"><span class="keyword">if</span> loc.Path != rootLocation &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">passUpstreams = <span class="built_in">append</span>(passUpstreams, &amp;ingress.SSLPassthroughBackend&#123;</span><br><span class="line">Backend:  loc.Backend,</span><br><span class="line">Hostname: server.Hostname,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := ic.cfg.Backend.OnUpdate(ingress.Configuration&#123;</span><br><span class="line">Backends:            upstreams,</span><br><span class="line">Servers:             servers,</span><br><span class="line">TCPEndpoints:        ic.getStreamServices(ic.cfg.TCPConfigMapName, api.ProtocolTCP),</span><br><span class="line">UDPEndpoints:        ic.getStreamServices(ic.cfg.UDPConfigMapName, api.ProtocolUDP),</span><br><span class="line">PassthroughBackends: passUpstreams,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out, reloaded, err := ic.cfg.Backend.Reload(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">incReloadErrorCount()</span><br><span class="line">glog.Errorf(<span class="string">"unexpected failure restarting the backend: \n%v"</span>, <span class="keyword">string</span>(out))</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> reloaded &#123;</span><br><span class="line">glog.Infof(<span class="string">"ingress backend successfully reloaded..."</span>)</span><br><span class="line">incReloadCount()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将一切资源组织成ingress.Configuration结构传给OnUpdate方法，OnUpdate由各个Ingress Controller实现方实现，生成对应的配置数据（例如nginx的config）以byte切片返回，然后再将这些配置数据传给Reload方法，这个方法同样由第三方实现。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文通过分析源码的方式理清了整个Ingress Controller框架的来龙去脉，在下一篇文章中，通过对Nginx Ingress Controller源码分析，来看一下如何实现一个Ingress Controller。</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java中的随机数</title>
      <link href="/2017/02/20/java%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2017/02/20/java%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>首先来看下面一段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">100</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; ticks = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> result = random.nextInt(limit);</span><br><span class="line">            <span class="keyword">if</span> (!ticks.containsKey(result)) &#123;</span><br><span class="line">                ticks.put(result, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ticks.put(result, ticks.get(result) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">":"</span> + ticks.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码的运行结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">0:1048</span><br><span class="line">1:988</span><br><span class="line">2:1015</span><br><span class="line">3:955</span><br><span class="line">4:1017</span><br><span class="line">5:1018</span><br><span class="line">6:990</span><br><span class="line">7:1052</span><br><span class="line">8:993</span><br><span class="line">9:1012</span><br><span class="line">10:1027</span><br><span class="line">11:1008</span><br><span class="line">12:976</span><br><span class="line">13:994</span><br><span class="line">14:990</span><br><span class="line">15:994</span><br><span class="line">16:1019</span><br><span class="line">17:1072</span><br><span class="line">18:1043</span><br><span class="line">19:1015</span><br><span class="line">20:1011</span><br><span class="line">21:977</span><br><span class="line">22:998</span><br><span class="line">23:1000</span><br><span class="line">24:1031</span><br><span class="line">25:995</span><br><span class="line">26:1008</span><br><span class="line">27:1007</span><br><span class="line">28:1001</span><br><span class="line">29:998</span><br><span class="line">30:1101</span><br><span class="line">31:970</span><br><span class="line">32:1008</span><br><span class="line">33:969</span><br><span class="line">34:931</span><br><span class="line">35:1030</span><br><span class="line">36:1023</span><br><span class="line">37:994</span><br><span class="line">38:1019</span><br><span class="line">39:972</span><br><span class="line">40:999</span><br><span class="line">41:1002</span><br><span class="line">42:929</span><br><span class="line">43:948</span><br><span class="line">44:1002</span><br><span class="line">45:985</span><br><span class="line">46:970</span><br><span class="line">47:971</span><br><span class="line">48:960</span><br><span class="line">49:1019</span><br><span class="line">50:1003</span><br><span class="line">51:1027</span><br><span class="line">52:1011</span><br><span class="line">53:930</span><br><span class="line">54:1004</span><br><span class="line">55:1002</span><br><span class="line">56:985</span><br><span class="line">57:987</span><br><span class="line">58:976</span><br><span class="line">59:1037</span><br><span class="line">60:969</span><br><span class="line">61:1006</span><br><span class="line">62:965</span><br><span class="line">63:967</span><br><span class="line">64:1047</span><br><span class="line">65:1019</span><br><span class="line">66:1009</span><br><span class="line">67:973</span><br><span class="line">68:998</span><br><span class="line">69:959</span><br><span class="line">70:999</span><br><span class="line">71:984</span><br><span class="line">72:964</span><br><span class="line">73:1015</span><br><span class="line">74:979</span><br><span class="line">75:989</span><br><span class="line">76:973</span><br><span class="line">77:997</span><br><span class="line">78:962</span><br><span class="line">79:1043</span><br><span class="line">80:1001</span><br><span class="line">81:1010</span><br><span class="line">82:1029</span><br><span class="line">83:992</span><br><span class="line">84:1049</span><br><span class="line">85:994</span><br><span class="line">86:975</span><br><span class="line">87:1076</span><br><span class="line">88:992</span><br><span class="line">89:1009</span><br><span class="line">90:977</span><br><span class="line">91:1020</span><br><span class="line">92:994</span><br><span class="line">93:976</span><br><span class="line">94:983</span><br><span class="line">95:1028</span><br><span class="line">96:1019</span><br><span class="line">97:1062</span><br><span class="line">98:936</span><br><span class="line">99:1045</span><br></pre></td></tr></table></figure></p><p>可以看到实际的结果在1000左右摆动。也就是说这样的代码产生的结果均匀分布。（笔者对上述代码进行了多次测试，结果都和这个是差不多的）均匀分布对于一个抽奖系统来说是非常重要的。例如，你花五块钱买一张彩票，我也花五块钱买一张彩票，大家抽中五万块钱的概率都是万分之一，<br>那么这个抽奖系统对于大家来说就是公平的。虽然这一段代码看起来是一段公平的代码，但事实上真的是这样子的吗？要理解其中的缘由，我们需要补充一些基础知识。</p><h1 id="“真”随机数"><a href="#“真”随机数" class="headerlink" title="“真”随机数"></a>“真”随机数</h1><p>要生成一个“真”随机数，电脑会检测电脑外部发生的某种物理现象。比如说，电脑可以测量某个原子的放射性衰变。根据量子理论，原子衰变是随机而不可测的，所以这就是宇宙中的“纯粹”随机性。攻击者永远无法预测原子衰变的发生时间，也就不可能猜出随机值。<br>举个更实际的例子，电脑会根据环境中的噪音或者采取你敲击键盘的精确时间作为随机数据或熵的生成依据。举个例子，你的电脑监测到你某天下午2点以后敲击键盘的精确时间是0.23423523秒，有足够的这些特定长数字你就能得到一个熵源，也就可以生成“真”随机数。由于人不是机器，所以攻击者无法掌握你的敲击时间。<br>Linux中的/dev/random随机设备生成随机数，“阻拦”访问直到熵积累量足够才返回一个真随机数。（熵，热力学中表征物质状态的参量之一，用符号S表示，其物理意义是体系混乱程度的度量。）（注：/dev/random产生随机数的效率十分低下，很难运用到生产环境中）</p><h1 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h1><p>伪随机数这个概念是相对于“真”随机数而言。电脑通过发送种子数值，运用算法产生某个看起来像随机数的数字，但是实际上这个数字是可以预测的。因为电脑没有从环境中收集到任何随机信息。</p><h1 id="如何判断一个随机数发生器的优劣"><a href="#如何判断一个随机数发生器的优劣" class="headerlink" title="如何判断一个随机数发生器的优劣"></a>如何判断一个随机数发生器的优劣</h1><p>德国联邦信息安全办公室给出了随机数发生器质量评判的四个标准</p><ul><li>K1——相同序列的概率非常低</li><li>K2——符合统计学的平均性，比如所有数字出现概率应该相同，卡方检验应该能通过，超长游程长度概略应该非常小，自相关应该只有一个尖峰，任何长度的同一数字之后别的数字出现概率应该仍然是相等的等等</li><li>K3——不应该能够从一段序列猜测出随机数发生器的工作状态或者下一个随机数</li><li>K4——不应该从随机数发生器的状态能猜测出随机数发生器以前的工作状态</li></ul><p>文章开头那段代码，只满足了K2这个要求。其实K1，K3,和k4一个都不符合。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>笔者好奇的是，这段代码在C#中是不可能均匀分布的。因为在C#中new Random()是以1970年1月1日到当前时间的毫秒数作为线性同余算法的种子的。而在现代计算机中1毫秒内可以运行几十万次的while循环，因此你会发现获得的随机数大都相同。<br>来看下面的实验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bmp = new Bitmap(300, 300);</span><br><span class="line">Graphics g = Graphics.FromImage(bmp);</span><br><span class="line">SolidBrush b = new SolidBrush(Color.Black);</span><br><span class="line"></span><br><span class="line">Random random = new Random();</span><br><span class="line">int count = 100000;</span><br><span class="line">while (count-- &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    int x = random.Next(300);</span><br><span class="line">    int y = random.Next(300);</span><br><span class="line">    g.FillRectangle(b, x, y, 1, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段程序生成的图片如下<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/hello.png" alt=""></p><p>将Random放入While循环中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bmp = new Bitmap(300, 300);</span><br><span class="line">Graphics g = Graphics.FromImage(bmp);</span><br><span class="line">SolidBrush b = new SolidBrush(Color.Black);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int count = 100000;</span><br><span class="line">while (count-- &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    Random random = new Random();   </span><br><span class="line">    int x = random.Next(300);</span><br><span class="line">    int y = random.Next(300);</span><br><span class="line">    g.FillRectangle(b, x, y, 1, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/Csharp2.png" alt=""></p><p>这里只能看到零星的几个黑点，可以看到两者的差异非常大。但是在Java中这两种写法产生的结果是一致的。（实际上在早期的JDK版本也是和C#同样的结果）</p><p>那么这到底是怎么回事呢？</p><p>我们来看一下Java中Random类的构建函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(seedUniquifier() ^ System.nanoTime());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>再来看一下seedUniquifier()这个函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong seedUniquifier</span><br><span class="line">        = <span class="keyword">new</span> AtomicLong(<span class="number">8682522807148012L</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">seedUniquifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// L'Ecuyer, "Tables of Linear Congruential Generators of</span></span><br><span class="line">        <span class="comment">// Different Sizes and Good Lattice Structure", 1999</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">long</span> current = seedUniquifier.get();</span><br><span class="line">            <span class="keyword">long</span> next = current * <span class="number">181783497276652981L</span>;</span><br><span class="line">            <span class="keyword">if</span> (seedUniquifier.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这就是一个线性同余的算法，其中的种子是一个64位整型：8682522807148012L</p><p>我们截取这一段代码运行一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(seedUniquifier());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8006678197202707420</span><br><span class="line">-3282039941672302964</span><br><span class="line">3620162808252824828</span><br><span class="line">199880078823418412</span><br><span class="line">-358888042979226340</span><br><span class="line">-3027244073376649012</span><br><span class="line">2753936029964524604</span><br><span class="line">-9114341766410567060</span><br><span class="line">-4556895898465471908</span><br><span class="line">7145509263664170764</span><br></pre></td></tr></table></figure></p><p>也就是说无论你运行多少次都是这个结果。那么再来看一下System.nanoTime()这个函数</p><p>在代码的注释中可以找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Returns the current value of the running Java Virtual Machine<span class="string">'s</span></span><br><span class="line"><span class="string">     * high-resolution time source, in nanoseconds.</span></span><br></pre></td></tr></table></figure></p><p>这句话的意思是返回当前java虚拟机的当前时间，是一个高精度的时间源，单位为纳秒。</p><h1 id="抽奖程序"><a href="#抽奖程序" class="headerlink" title="抽奖程序"></a>抽奖程序</h1><p>那么这时候我们来分析一下在java中每次都new一个 Random实例时，如何破解这样一个抽奖程序。</p><ul><li><p>首先我们要知道我们抽奖的序号，也就是在那么多抽奖先后顺序，通过这个我们可以得出线性同余的随机数，因此，我们将抽奖序号设为N</p></li><li><p>抽奖的时间点，也就是System.nanoTime(),我们设为T</p></li><li><p>奖池</p></li></ul><p>其中，如果作为一名抽奖程序的开发人员要知道第一个和第三个条件其实很简单。至于System.nanoTime()要获取可以说是难于登天。所以，这段程序从表面上看似乎并没有什么漏洞。</p><p>如果我们将时间放慢一亿倍（你能接近光速么？），我们就能精确的控制在哪一秒点下去就能中五万元了不是么？不过要接近光速似乎是不可能的事情。</p><p>不过，我们换一种方式来分析问题。虽然纳秒太细我们无法精确的控制，但是我们可以计算出在哪一秒内出现中五万元的纳秒数最多，于是我们可以选择在那一秒去点击抽奖按钮。这样我们中五万元的概率是不是就比别人高了许多？</p><p>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven和docker调试java应用程序</title>
      <link href="/2016/12/31/maven+docker%E8%B0%83%E8%AF%95java%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2016/12/31/maven+docker%E8%B0%83%E8%AF%95java%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>&#160; &#160; &#160; &#160;平常开发java应用程序，我们经常会遇到这样的一种场景：开发机使用的是Windows操作系统，但往往程序是跑在Linux操作系统上面的，甚至会调用一些Linux上的程序或者是系统api等，这种情况下我们的程序调试就会变得非常的麻烦。以往解决这种问题的方式一般是在Windows装一个Linux虚拟机，然后将程序部署到虚拟机上进行调试。这种方式虽然可以解决问题，但是总感觉效率太低：一来是虚拟机消耗太多的系统资源，二来编译和部署过程相当的繁琐（虽然你可以自己编写自动化脚本，但总归难以通用化）。</p><h1 id="Docker的出现"><a href="#Docker的出现" class="headerlink" title="Docker的出现"></a>Docker的出现</h1><p>&#160; &#160; &#160; &#160;Docker相比虚拟机来说，拥有更小的系统资源占用，更快的部署速度等优势，而且现在Windows上也能完美的运行Docker服务了。前提条件是要升级到Win10操作系统。至于Windows上Docker的安装非常的简单，Docker官方提供了傻瓜安装包，我们只要一键到底就行了。<br><a href="https://docs.docker.com/docker-for-windows/" target="_blank" rel="noopener">安装点我</a></p><h1 id="与maven配合使用"><a href="#与maven配合使用" class="headerlink" title="与maven配合使用"></a>与maven配合使用</h1><p>&#160; &#160; &#160; &#160;Docker自身提供了丰富RestApi供大家调用，其本身的DockerCli也是通过这些api与其Daemon进程进行交互的，因此我们可以通过编程的方式来使用Docker。我们可以利用maven的插件来完成我们程序的快速部署工作。现下farbric8就已提供了一款功能丰富的maven插件，接下来我们就来看一下如何使用它：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ROOT<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;mainclass&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.fabric8<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>$&#123;dockerHost&#125;<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">useColor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useColor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">images</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;image.name&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">from</span>&gt;</span>$&#123;image.from&#125;<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>5005<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mode</span>&gt;</span>dir<span class="tag">&lt;/<span class="name">mode</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetDir</span>&gt;</span>$&#123;container.targetDir&#125;<span class="tag">&lt;/<span class="name">targetDir</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inline</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">inline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>$&#123;container.port&#125;:5005<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cmd</span>&gt;</span>$&#123;container.cmd&#125;<span class="tag">&lt;/<span class="name">cmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">images</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们使用了两个插件，第一个插件将程序和其所有的依赖打进jar包，并指定mainclass,第二个插件就是docker插件了。我们将一些配置提取到property当中，使得这些配置具体一定的通用性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://localhost:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mainclass</span>&gt;</span>nd.com.sdp.Program<span class="tag">&lt;/<span class="name">mainclass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image.from</span>&gt;</span>openjdk:7-jre<span class="tag">&lt;/<span class="name">image.from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image.name</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">image.name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">container.targetDir</span>&gt;</span>/maven<span class="tag">&lt;/<span class="name">container.targetDir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">container.port</span>&gt;</span>5005<span class="tag">&lt;/<span class="name">container.port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">container.cmd</span>&gt;</span>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -jar /maven/ROOT.jar<span class="tag">&lt;/<span class="name">container.cmd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>dockerHost代表DockerDaemon进程所在的主机和其所监听的端口，你如果拥有一台装有Docker的远端机器，这里只要修改主机名和端口号就可以了。</li><li>mainClass指定程序main函数所在的类</li><li>image.from指定要使用的原始镜像，我们使用官方openjdk:7-jre(这里可以修改成任何你喜欢的镜像，Docker灵活性的体现)</li><li>image.name指定我们构建出来的镜像名称，我们简单的使用项目名称代替</li><li>container.targetDir指定了我们编译后的jar包要放到镜像中的什么位置</li><li>container.port指定了容器运行之后要暴露的调试端口，我们的ide就是通过此端口与其进行通信的</li><li>container.cmd容器启动时所运行的命令，这里指定程序以调试的方式启动</li></ul><p>我们甚至可以将这些配置作为pom项目install到机器上让其它项目继承，如果你有一台nexus服务器，还可以将其deploy到上面去让团队其它成员使用^_^。<br><a href="https://dmp.fabric8.io/#introduction" target="_blank" rel="noopener">附上fabric-maven-docker-plugin操作手册</a></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>&#160; &#160; &#160; &#160;配置好pom文件，下面编写一段代码来试一下Linux调试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        Process process = runtime.exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"ls -l /"</span>&#125;);</span><br><span class="line">        process.waitFor();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(line + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>笔者使用的是Intellij Idea，Eclipse的使用大同小异。首先要点击右上角的Edit Configurations：<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-debug.png" alt="Edit Configurations"><br>在弹出界面的左上角点击+号，选择Remote：<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-debug2.png" alt="Remote"><br>在配置界面中确保Host和Port和我们刚才在Docker插件中配置的值一致：<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-debug3.png" alt="configuration"><br>最关键的一步是添加maven goal,点击+号，在弹出框中输入clean package docker:build docker:start<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-debug4.png" alt="maven goal"><br>这一步的意思是编译打包，然后build Docker镜像，最后创建并运行容器，这么多步骤在一个maven命中完成，虽然java那么烂，但好歹有个maven看得过去^_^。<br>最后使用Shift+F9调试运行程序，可以看到断点命中，整个过程和本地调试体验一样:<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/docker-debug5.png" alt="break point"></p><p>(全文完)</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> tool </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈java中List接口</title>
      <link href="/2016/12/15/%E6%B5%85%E8%B0%88java%E4%B8%ADList%E6%8E%A5%E5%8F%A3/"/>
      <url>/2016/12/15/%E6%B5%85%E8%B0%88java%E4%B8%ADList%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="List接口的定义"><a href="#List接口的定义" class="headerlink" title="List接口的定义"></a>List接口的定义</h1><p>List接口在java中算是使用频率相当高的一个接口，我们先来看一下它的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里只列出一些比较重要的方法，相比其它语言里面的类似的接口，可以说是大同小异，它的设计并没有什么问题。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在jdk中，关于这个接口有三个实现，分别是ArrayList,LinkedList和Vector,我们分别来看一下它们的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>既然实现了List接口，那我们便可以用List指针来接收这三个类的实例。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List list = <span class="keyword">new</span> Vector();</span><br></pre></td></tr></table></figure></p><h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>在平常使用List接口的过程中，我们经常需要遍历List里面的元素。<br>于是我们可以这样写代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Interator inter = list.Interator();iter.hasNext();)&#123;</span><br><span class="line">     Object obj = inter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们甚至还可以这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么可以这样？这是因为AbstractList实现了Iterable接口，而这里仅仅只是一种语法糖而已，实际代码编译后还是会被转成第一种写法。<br>（大家可以想想这里为什么要有一个Iterable接口，而不直接实现Iterator接口）</p><p>文章写到这里似乎并没有什么价值，但是我们发现在List接口中存在：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br></pre></td></tr></table></figure></p><p>这样一个方法，我们似乎可以改改上面遍历的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">     Object obj = list.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我相信大家在日常编码中会经常使用到这种方式。</p><h1 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h1><p>&#160; &#160; &#160; &#160;这种通过下标访问的方式，我们把它称之为RandomAccess。我们知道数组这种数据结构对这种随机访问的天生支持（事实上ArrayList和Vector就是用数组实现的），也就是说它的访问效率是非常高的。<br>现在我们回过头来看JDK中对List的三种实现，我们会发现其中的ArrayList和Vector竟然实现了一个叫RandomAccess接口，查看它的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>竟然是一个空接口？好吧这种接口的作用实际上是一种标记接口，对于它的使用，往往需要配合instanceof这种<a href="http://baike.baidu.com/link?url=c6vVFXT41_awqHe0TVcfrR74uwaprffqcyzQP4qw_o3VQQ0L2OSvQgzxWGR_a6_argI5qoOg2Pe5P_cv2X0YEq" target="_blank" rel="noopener">RTTI</a>的方式。可以说并不是一种很理想的方式。</p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>我们可以写一个小程序来测试一下使用迭代器和使用RandomAccess的性能差异<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">travelwithoutIterator</span><span class="params">(List list, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">long</span> endTime;</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= count; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">    System.out.println(<span class="string">"不使用迭代器的间隔时间："</span> + interval);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">travelwithIterator</span><span class="params">(List list, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">long</span> endTime;</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= count; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">    System.out.println(<span class="string">"使用迭代器的间隔时间："</span> + interval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(List list, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= n; m++) &#123;</span><br><span class="line">        list.add(<span class="string">""</span> + m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在main中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">System.out.println(<span class="string">"遍历ArrayList："</span>);</span><br><span class="line">addObject(list, number);</span><br><span class="line">travelwithoutIterator(list, count);</span><br><span class="line">travelwithIterator(list, count);</span><br></pre></td></tr></table></figure></p><p>结果是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">遍历ArrayList：</span><br><span class="line">不使用迭代器的间隔时间：5</span><br><span class="line">使用迭代器的间隔时间：12</span><br></pre></td></tr></table></figure></p><p>我们对于ArrayList，使用RandomAccess的效率要比使用迭代器高不少，这对于一些对于性能要求比较苛刻的程序来说，可能会是一个优化的点。</p><p>但是我们现在换成LinkedList来试一试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">System.out.println(<span class="string">"遍历LinkedList："</span>);</span><br><span class="line">addObject(list, number);</span><br><span class="line">travelwithoutIterator(list, count);</span><br><span class="line">travelwithIterator(list, count);</span><br></pre></td></tr></table></figure></p><p>结果是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">遍历LinkedList：</span><br><span class="line">不使用迭代器的间隔时间：1043247</span><br><span class="line">使用迭代器的间隔时间：139</span><br></pre></td></tr></table></figure></p><p>对于List的使用者来说，或者说正在编写一个框架的人，我们经常不知道List指针会接到什么样的一个具体实例，于是乎，我们只能以这种贴膏药的方式来修补我们的程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.size(); i &lt; list.size(); i++) &#123;</span><br><span class="line">        Object obj = list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="设计的问题"><a href="#设计的问题" class="headerlink" title="设计的问题"></a>设计的问题</h1><p>&#160; &#160; &#160; &#160;到这里，我们可以看出LinkedList明显是不应该实现List这么大的一个接口了，或者说早期的jdk设计人员并没有考虑到这样的性能问题。我们再回过头来看RandomAccess接口，jdk设计人员似乎也是意识到了这一点，才搞出了这么一个东西。<br>那会为什么不让LinkedList直接去掉List接口呢？（在C#中LinkedList并没有实现IList接口）我想这应该是Java设计人员始终坚持的兼容性原则，这跟Jvm始终不愿意引入泛型是一个道理。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>协同进程的死锁问题</title>
      <link href="/2016/12/14/%E5%8D%8F%E5%90%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/"/>
      <url>/2016/12/14/%E5%8D%8F%E5%90%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>&#160; &#160; &#160; &#160;要理解协同进程的话，首先要知道什么是管道。管道是UNIX系统当中IPC的最古老形式，所有的UNIX系统都提供这种通信机制。<br>管道是通过调用pipe函数创建的:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure><p>经由参数返回两个文件描述符：fd[0]为读而打开，fd[1]为写而打开。fd[1]的输出是fd[0]的输入。下图是管道的结构：</p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/pipe.jpg" alt="管道"></p><p>单个进程中的管道几乎没有任何用处。通常，进程会先调用pipe，接着调用fork，从而创建从父进程到子进程的IPC通道，反之亦然。下图显示了这种情况</p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/fork_pipe.jpg" alt="父子进程的管道"></p><p>fork之后做什么取决于我们想要的数据流的方向。对于从父进程到子进程的管道，父进程关闭管道的读端(fd[0]),子进程关闭写端(fd[1])。下图显示了在此之后描述符的状态结果：</p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/fork_pipe2.jpg" alt="父子进程的管道"></p><h1 id="协同进程"><a href="#协同进程" class="headerlink" title="协同进程"></a>协同进程</h1><p>&#160; &#160; &#160; &#160;当A进程既产生B进程的输入，又读取B进程的输出时，B进程就变成了A进程的<strong>协同进程</strong>（coprocess）。下图显示了这种安排：<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/coprocess.jpg" alt="协同进程"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>让我们通过一个示例来观察协同进程。我们先创建一个简单的协同进程，它从其标准输入读取两个数，计算它们的和，然后将和写至其标准输出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, int1,int2;</span><br><span class="line">  <span class="keyword">char</span> line[MAXLINE];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((n = read(STDIN_FILENO, line, MAXLINE)) &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    line[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sscanf</span>(line, <span class="string">"%d%d"</span>,&amp;int1,&amp;int2) == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(line, <span class="string">"%d\n"</span>,int1 + int2);</span><br><span class="line">      n = <span class="built_in">strlen</span>(line);</span><br><span class="line">      <span class="keyword">if</span>(write(STDOUT_FILENO,line,n) != n)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"write error"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(write(STDOUT_FILENO,<span class="string">"invalid args\n"</span>,<span class="number">13</span>) != <span class="number">13</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"write error"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对此程序进行编译，并保存为可执行文件add</p><p>下面的程序创建两个管道： 一个是协同进程的标准输入，另一个是协同进程的标准输出。它先从其标准输入读取两个数之后调用add协同进程，并将协同进程送来的值写到其标准输出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_pipe</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,fd1[<span class="number">2</span>],fd2[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  <span class="keyword">char</span> line[MAXLINE];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(signal(SIGPIPE,sig_pipe) == SIG_ERR)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"signal error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pipe(fd1) &lt; <span class="number">0</span> || pipe(fd2) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"pipe error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>((pid = fork()) &lt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"fork error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    close(fd1[<span class="number">0</span>]);</span><br><span class="line">    close(fd2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(fgets(line,MAXLINE,<span class="built_in">stdin</span>) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      n = <span class="built_in">strlen</span>(line);</span><br><span class="line">      <span class="keyword">if</span>(write(fd1[<span class="number">1</span>],line,n) != n)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"write error to pipe"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>((n = read(fd2[<span class="number">0</span>],line,MAXLINE)) &lt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"read error from pipe"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        err_msg(<span class="string">"child closed pipe"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      line[n] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">fputs</span>(line,<span class="built_in">stdout</span>) == EOF)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"fputs error"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ferror(<span class="built_in">stdin</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      err_sys(<span class="string">"fgets error on stdin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    close(fd1[<span class="number">1</span>]);</span><br><span class="line">    close(fd2[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(fd1[<span class="number">0</span>] != STDIN_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(dup2(fd1[<span class="number">0</span>],STDIN_FILENO) != STDIN_FILENO)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"dup2 error to stdin"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      close(fd1[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fd2[<span class="number">1</span>] != STDOUT_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(dup2(fd2[<span class="number">1</span>],STDOUT_FILENO) != STDOUT_FILENO)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"dup2 error to stdout"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      close(fd2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(execl(<span class="string">"./add"</span>,<span class="string">"add"</span>,(<span class="keyword">char</span> *)<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      err_sys(<span class="string">"execl error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_pipe</span><span class="params">(<span class="keyword">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"SIGPIPE caught\n"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译运行此程序，它会按预期工作。但是如果在它等待输入的时候杀死add协同进程，然后又输入两个数，那么程序对没有读进程的管道进行写操作时，会产生SIGPIPE信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">SIGPIPE caught</span><br></pre></td></tr></table></figure></p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>&#160; &#160; &#160; &#160;我们用这个程序替换原来的add协同程序，则会发生死锁的问题：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> int1,int2;</span><br><span class="line">  <span class="keyword">char</span> line[MAXLINE];</span><br><span class="line">  <span class="keyword">while</span>(fgets(line,MAXLINE,<span class="built_in">stdin</span>) != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sscanf</span>(line,<span class="string">"%d%d"</span>,&amp;int1,&amp;int2) == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,int1 + int2) == EOF)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"printf error"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">printf</span>(<span class="string">"invalid args\n"</span>) == EOF)</span><br><span class="line">      &#123;</span><br><span class="line">        err_sys(<span class="string">"printf error"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>&#160; &#160; &#160; &#160;我们第一个add程序是直接使用write和read的系统调用，后一个add程序则使用了标准I/O。因为标准输入现在变换成了管道，所以标准I/O的缓冲方式从行缓冲变成了全缓冲，标准输出也是如此，当子进程从其标准输入读取而发生阻塞时，父进程从管道读时也发生阻塞，于是产生了死锁。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>&#160; &#160; &#160; &#160;知道了原因，我们就可以通过设置标准I/O缓冲方式为行缓冲来解决问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IOLBF,<span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    err_sys(<span class="string">"setvbuf error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IOLBF,<span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    err_sys(<span class="string">"setvbuf error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中：</p><ul><li>_IOFBF: 全缓冲</li><li>_IOLBF: 行缓冲</li><li>_IONBF: 无缓冲</li></ul><p>重新编译并运行程序，发现死锁问题被解决了。<br>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux中的文件强制锁</title>
      <link href="/2016/12/07/linux%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%BC%BA%E5%88%B6%E9%94%81/"/>
      <url>/2016/12/07/linux%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%BC%BA%E5%88%B6%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是建议性锁和强制性锁"><a href="#什么是建议性锁和强制性锁" class="headerlink" title="什么是建议性锁和强制性锁"></a>什么是建议性锁和强制性锁</h1><ul><li>建议性锁：建议性锁并不从内核限制程序访问文件，而是依赖各个合作进程(cooperating process)之间遵循相应的规则。</li><li>强制性锁：强制性锁会让内核检查每一个open、read、和write,验证调用进程是否违背了正访问的文件上的某一把锁。<blockquote><p>就好比红灯亮了，人们遵守规则不闯红灯，但是如果有人要强行闯红灯的话，并没有好的方法去阻止，这就是建议性锁。<br>但是如果我们在红灯亮的同时，把道路也封起来，这时候你想闯也闯不了，这就是强制性锁。</p></blockquote></li></ul><h1 id="Linux上的强制性锁"><a href="#Linux上的强制性锁" class="headerlink" title="Linux上的强制性锁"></a>Linux上的强制性锁</h1><p>Linux系统上的强制性锁默认情况下是不开启的。如果要开启强制性锁，要由以下两个步骤完成：</p><ol><li>在文件系统mount的时候加上-o mand参数</li><li>打开文件的设置组ID位并且关闭其组执行位</li></ol><p>在shell下可以这样打开<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod g+s &lt;filename&gt;</span><br><span class="line">$ chmod g-x &lt;filename&gt;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;或者通过fchmod函数设置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fchmod(fd,(statbuf.st_mode &amp; ~S_IXGRP) | S_ISGID)</span><br></pre></td></tr></table></figure></p><h1 id="验证强制性锁"><a href="#验证强制性锁" class="headerlink" title="验证强制性锁"></a>验证强制性锁</h1><p> 我们可以编写一段测试程序，它打开一个文件（系统已打开强制性锁模式），对该文件整体设置一把读锁，然后休眠一段时间。<br> 该程序如下：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> fd;</span><br><span class="line">   <span class="keyword">pid_t</span> pid;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statbuf</span>;</span></span><br><span class="line">   <span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"usage: %s filename\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>((fd = open(argv[<span class="number">1</span>],O_RDWR | O_CREAT | O_TRUNC,FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     err_sys(<span class="string">"open error"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(write(fd,<span class="string">"abcef"</span>,<span class="number">6</span>) != <span class="number">6</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     err_sys(<span class="string">"write error"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">if</span>(fstat(fd,&amp;statbuf) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     err_sys(<span class="string">"fstat error"</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">if</span>(fchmod(fd,(statbuf.st_mode &amp; ~S_IXGRP) | S_ISGID) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     err_sys(<span class="string">"fchmod error"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>((read_lock(fd, <span class="number">0</span>, SEEK_SET, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     err_sys(<span class="string">"read_lock error"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sleep(<span class="number">60</span>);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 运行程序<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./lock temp.lock</span><br></pre></td></tr></table></figure></p><p> 在另一个终端验证<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"hello"</span> &gt; temp.lock</span><br></pre></td></tr></table></figure></p><p> 可以看到出现了下面的错误<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: temp.lock: Resource temporarily unavailable</span><br></pre></td></tr></table></figure></p><p> 事实证明我们的读锁生效了。</p><h1 id="绕过强制性锁"><a href="#绕过强制性锁" class="headerlink" title="绕过强制性锁"></a>绕过强制性锁</h1><p> 我们用vi程序对temp.lock进行洗编辑，其结果竟然可以写回磁盘！强制性锁不起作用了？<br> 我们用strace -c vim 命令跟踪vim程序的系统调用<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ strace -c vim temp.lock</span><br></pre></td></tr></table></figure></p><p> 返回如下信息：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> % time     seconds  usecs/call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000015          15         1           setxattr</span><br><span class="line">  0.00    0.000000           0        34           <span class="built_in">read</span></span><br><span class="line">  0.00    0.000000           0        31           write</span><br><span class="line">  0.00    0.000000           0        29         2 open</span><br><span class="line">  0.00    0.000000           0        29           close</span><br><span class="line">  0.00    0.000000           0        22         4 <span class="built_in">stat</span></span><br><span class="line">  0.00    0.000000           0        20           fstat</span><br><span class="line">  0.00    0.000000           0         4         3 lstat</span><br><span class="line">  0.00    0.000000           0         2           poll</span><br><span class="line">  0.00    0.000000           0         5           lseek</span><br><span class="line">  0.00    0.000000           0        34           mmap</span><br><span class="line">  0.00    0.000000           0        17           mprotect</span><br><span class="line">  0.00    0.000000           0         8           munmap</span><br><span class="line">  0.00    0.000000           0         6           brk</span><br><span class="line">  0.00    0.000000           0        22           rt_sigaction</span><br><span class="line">  0.00    0.000000           0         6           rt_sigprocmask</span><br><span class="line">  0.00    0.000000           0        19           ioctl</span><br><span class="line">  0.00    0.000000           0         6         2 access</span><br><span class="line">  0.00    0.000000           0        46           select</span><br><span class="line">  0.00    0.000000           0         1           getpid</span><br><span class="line">  0.00    0.000000           0         2           socket</span><br><span class="line">  0.00    0.000000           0         2           connect</span><br><span class="line">  0.00    0.000000           0         2           sendto</span><br><span class="line">  0.00    0.000000           0         1           recvmsg</span><br><span class="line">  0.00    0.000000           0         1           execve</span><br><span class="line">  0.00    0.000000           0         1           uname</span><br><span class="line">  0.00    0.000000           0         9           fcntl</span><br><span class="line">  0.00    0.000000           0         1           fsync</span><br><span class="line">  0.00    0.000000           0         8           getcwd</span><br><span class="line">  0.00    0.000000           0         5           <span class="built_in">chdir</span></span><br><span class="line">  0.00    0.000000           0         4           fchdir</span><br><span class="line">  0.00    0.000000           0         1           rename</span><br><span class="line">  0.00    0.000000           0         6         1 unlink</span><br><span class="line">  0.00    0.000000           0         1         1 readlink</span><br><span class="line">  0.00    0.000000           0         2           chmod</span><br><span class="line">  0.00    0.000000           0         1           fchown</span><br><span class="line">  0.00    0.000000           0         1           getrlimit</span><br><span class="line">  0.00    0.000000           0         1           sysinfo</span><br><span class="line">  0.00    0.000000           0         3           getuid</span><br><span class="line">  0.00    0.000000           0         1           sigaltstack</span><br><span class="line">  0.00    0.000000           0         1           statfs</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">  0.00    0.000000           0         1         1 getxattr</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000015                   398        14 total</span><br></pre></td></tr></table></figure></p><p> 我们可以发现其调用了rename函数，我们知道rename其实是通过unlink和link函数来实现对文件硬连接的改变。<br> 分析其原理：</p><blockquote><p>vim将新内容写到一个临时文件中，然后删除原文件，最后将临时文件名改为原文件名。而强制性锁对unlink函数没有影响^_^。</p></blockquote><p> 知道了原理那么我们可以自己编写一段代码来验证：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"usage: %s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((fd = open(<span class="string">".temp"</span>,O_RDWR | O_CREAT | O_TRUNC,FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"open error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(write(fd,<span class="string">"ghijkl"</span>,<span class="number">6</span>) != <span class="number">6</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"write error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(unlink(argv[<span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"unlink error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(link(<span class="string">".temp"</span>,argv[<span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"link error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(unlink(<span class="string">".temp"</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_sys(<span class="string">"unlink error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该程序先创建一个.temp临时文件，然后写放一些数据，接着unlink原文件，再将.temp重命名成原文件，最后记得unlink临时文件。<br>记得该程序的工作目录必须和原文件处在同一个磁盘，因为跨磁盘的link是不允许的。最后看看效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat temp.lock</span><br><span class="line">ghijkl</span><br></pre></td></tr></table></figure></p><p>(全文完)</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux的控制终端</title>
      <link href="/2016/11/17/linux%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%88%E7%AB%AF/"/>
      <url>/2016/11/17/linux%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>&#160; &#160; &#160; &#160;我们都知道，linux打开一个终端运行一个程序，在程序运行未结束的时候如果关掉终端的话，那么该程序也会跟着退出。但我们有时候需要长期间的运行一个程序，又不想开着我们的终端，那么我们就可以利用下面的语句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup &lt;<span class="built_in">command</span>&gt; &amp;</span><br></pre></td></tr></table></figure></p><ul><li>nohup的意思是让我们的程序进程忽略所有挂断（SIGHUP）信号。</li><li>“&amp;” 符号表示让我们的程序进程进入后台运行</li></ul><p>为什么这样做以后我们的程序就不会退出呢，接下来我们先补充一些相关的知识</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><p>&#160; &#160; &#160; &#160;终端(Terminal)也是一台物理设备，只用于输入输出，本身没有强大的计算能力。一台计算机只有一个控制台，在计算资源紧张的时代，人们想共享一台计算机，可以通过终端连接到计算机上，将指令输入终端，终端传送给计算机，计算机完成指令后，将输出传送给终端，终端将结果显示给用户。</p><h2 id="登录终端"><a href="#登录终端" class="headerlink" title="登录终端"></a>登录终端</h2><p>&#160; &#160; &#160; &#160;在早期的计算机上面，用户用哑终端（用硬连接连到主机）进行登录，这种登录要经由内核的终端设备驱动程序。因为连到主机上的终端设备数是固定的，所以同时的登录数也就有了已知的上限。随着图形终端的出现，创建终端窗口的应用也被开发出来，它仿真了基于字符的终端，使用户可以用熟悉的方式（shell命令行）与主机进行交互。包括使用网络进行远程登录的远程终端也是使用的这种方式。</p><h2 id="伪终端"><a href="#伪终端" class="headerlink" title="伪终端"></a>伪终端</h2><p>&#160; &#160; &#160; &#160;随着图形终端的出现，创建终端窗口的应用也被开发出来，它仿真了基于字符的终端，使用户可以用熟悉的方式（shell命令行）与主机进行交互。包括使用网络进行远程登录的远程终端也是使用的这种方式。网络登录与传统的串行终端登录的区别在于，前者必须等待一个网络连接请求到达，而不是使一个进程等待每一个可能的登录。为了使同一个软件既能处理终端登录又能处理网络登录，系统使用了一种称为伪终端（pseudo terminal）的软件驱动程序，<br>它仿真串行终端的运行行为，并将终端操作映射为网络操作。</p><h2 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h2><p>&#160; &#160; &#160; &#160;每个进程除了有一进程ID外，还属于一个进程组，进程组就是一个或多个进程的集合。<br>&#160; &#160; &#160; &#160;那为啥Linux里要有进程组呢？其实，提供进程组就是为了方便对进程进行管理。假设要完成一个任务，需要同时并发100个进程。当用户处于某种原因要终止 这个任务时，要是没有进程组，就需要手动的一个个去杀死这100个进程。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>&#160; &#160; &#160; &#160;Shell分前后台来控制的不是进程而是作业（Job）或者进程组（Process Group）。一个前台作业可以由多个进程组成，一个后台也可以由多个进程组成，Shell可以运行一个前台作业和任意多个后台作业，这称为作业控制。<br>&#160; &#160; &#160; &#160;作业与进程组的区别：如果作业中的某个进程又创建了子进程，则子进程不属于作业。一旦作业运行结束，Shell就把自己提到前台，如果原来的前台进程还存在（如果这个子进程还没终止），它自动变为后台进程组。</p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>&#160; &#160; &#160; &#160;会话（session）是一个或多个进程组的集合。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/session.jpg" alt="会话"><br>&#160; &#160; &#160; &#160;如图，该会话中有三个进程组。通常是由shell的管道将几个进程编成一组的。上图有可能是由下列形式的shell命令形成的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ proc1 | proc2 &amp; </span><br><span class="line">$ proc3 | proc4 | proc5</span><br></pre></td></tr></table></figure></p><h2 id="控制终端"><a href="#控制终端" class="headerlink" title="控制终端"></a>控制终端</h2><ul><li>当一个终端与一个会话相关联后，那么这个终端就称为该会话的控制终端(controlling terminal)。</li><li>建立与控制终端连接的会话首进程被称为控制进程(controlling process)。</li><li>一个会话中的几个进程组可被分成一个前台进程组(foreground process group)以及一个或多个后台进程组(background process group)。</li><li>如果一个会话有一个控制终端的话， 则它有一个前台进程组，其他进程组为后台进程组。</li><li>无论何时键入终端的中断键或退出键，都会将中断信号或退出信号发送至前台进程组的所有进程。</li><li>如果终端检测到调制解调器（或网络）断开，则挂断信号（SIGHUP）发送至控制进程（会话首进程），如果会<strong>话首进程退出,则将挂断信号（SIGHUP）发送至前台进程组的所有进程</strong>。<br><img src="http://7xlovv.com1.z0.glb.clouddn.com/session2.jpg" alt="会话"><br>&#160; &#160; &#160; &#160;有的时候程序的标准输入，输出会被重定向到其它地方，那么会话中的进程要<strong>获取终端的话可以open文件/dev/tty</strong>，这就告诉内核我要获取当前会话的控制终端。如果会话没有控制终端的话，那么对此设备的open将失败。</li></ul><h2 id="孤儿进程组"><a href="#孤儿进程组" class="headerlink" title="孤儿进程组"></a>孤儿进程组</h2><p>&#160; &#160; &#160; &#160;孤儿进程组定义为：该组中每个成员的父进程要么是该组的一个成员，要么不是该组所属会话的成员。换句话说，一个进程组中有一个进程，其父进程在属于同一个会话的另一个组中，那么它就不是孤儿进程组。</p><blockquote><p>在POSIX.1中，要求向新产生的孤儿进程组中处于停止状态的每一个进程发送挂断信号（SIGHUP），接着又向其发送继续信号（SIGCONT）。<strong>对挂断信号的系统默认动作是终止该进程</strong>。</p></blockquote><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ol><li>当控制中端退出的时候，首先会发一个挂断信号(SIGHUP)给会话首进程，一般会话首进程都是shell进程，而此动作将导致shell进程退出。</li><li>当会话首进程退出时，挂断信号（SIGHUP）还会继续发送给前台进程组的所有进程。</li><li>若进程未对挂断信号（SIGHUP）进行处理时，内核默认动作是终止该进程。</li></ol><p>&#160; &#160; &#160; &#160;由此我们可以得出，导致进程退出的罪魁祸首就是这一个挂断信号（SIGHUP）。回到文章最前面提出的解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup &lt;<span class="built_in">command</span>&gt; &amp;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;其中的nohup命令是让程序忽略<strong>所有</strong>的挂断信号，所以就算终端退出，我们的程序也不会退出了。而最后面的”&amp;”符号其实对防止程序退出没有任何用处。</p><h1 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h1><p>&#160; &#160; &#160; &#160;那么我们能不能让程序自动具备防退出功能呢？其实原理很简单，我们只要注册挂断信号(SIGHUP)的处理程序，那么内核就认为你对该信号作出响应了，自然就不会终止程序了。来看代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_hup</span><span class="params">(<span class="keyword">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"received signup\n"</span>);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"pid = %d\n"</span>,getpid());</span><br><span class="line">  signal(SIGHUP, sig_hup);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    count++;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;函数void (<em>signal(int, void(</em>)(int)))(int) 带两个参数,一个为整型,一个为函数指针，返回值也是一个函数指针。这两个函数指针所指向的函数接受一个整型参数 且没有返回值。我们代码中定义的sig_hup正好是这一种类型。因此可以将其注册为挂断信号（SIGHUP）的处理函数。这样一来，我们的程序就不会因收到挂断信号而退出了。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>&#160; &#160; &#160; &#160;如果我们再次向进程发送SIGHUP信号(可利用kill -1命令)，那么我们的程序将会怎样呢，对于这种状况我们又该如何应对呢？</p><p>(全文完)</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>制作unix环境高级编程编译环境的docker镜像</title>
      <link href="/2016/10/31/%E5%88%B6%E4%BD%9Cunix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/"/>
      <url>/2016/10/31/%E5%88%B6%E4%BD%9Cunix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，下载第三版的<a href="http://www.apuebook.com/src.3e.tar.gz" target="_blank" rel="noopener">源码包</a></p><p>再下载两个libbsd库<br><a href="http://elrepo.reloumirrors.net/testing/el6/x86_64/RPMS/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm" target="_blank" rel="noopener">http://elrepo.reloumirrors.net/testing/el6/x86_64/RPMS/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm</a><br><a href="http://elrepo.reloumirrors.net/testing/el6/x86_64/RPMS/libbsd-devel-0.2.0-4.el6.elrepo.x86_64.rpm" target="_blank" rel="noopener">http://elrepo.reloumirrors.net/testing/el6/x86_64/RPMS/libbsd-devel-0.2.0-4.el6.elrepo.x86_64.rpm</a></p><h2 id="镜像build"><a href="#镜像build" class="headerlink" title="镜像build"></a>镜像build</h2><h3 id="1-解压src-3e-tar-gz"><a href="#1-解压src-3e-tar-gz" class="headerlink" title="1. 解压src.3e.tar.gz"></a>1. 解压src.3e.tar.gz</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf src.3e.tar.gz</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-Dockerfile"><a href="#2-Dockerfile" class="headerlink" title="2. Dockerfile"></a>2. Dockerfile</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER shareinto</span><br><span class="line"></span><br><span class="line">COPY libbsd-0.2.0-4.el6.elrepo.x86_64.rpm /tmp/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm</span><br><span class="line"></span><br><span class="line">COPY libbsd-devel-0.2.0-4.el6.elrepo.x86_64.rpm /tmp/libbsd-devel-0.2.0-4.el6.elrepo.x86_64.rpm</span><br><span class="line"></span><br><span class="line">RUN yum install make -y \</span><br><span class="line">&amp;&amp; yum install gcc -y \</span><br><span class="line">&amp;&amp; rpm -ivh /tmp/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm \</span><br><span class="line">&amp;&amp; rpm -ivh /tmp/libbsd-devel-0.2.0-4.el6.elrepo.x86_64.rpm \</span><br><span class="line">&amp;&amp; rm -rf /tmp/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm \</span><br><span class="line">&amp;&amp; rm -rf /tmp/libbsd-devel-0.2.0-4.el6.elrepo.x86_64.rpm</span><br><span class="line"></span><br><span class="line">COPY apue.3e /root/apue.3e</span><br><span class="line"></span><br><span class="line">WORKDIR /root/apue.3e</span><br><span class="line"></span><br><span class="line">RUN make \</span><br><span class="line">&amp;&amp; cp ./include/apue.h ./lib/error.c /usr/include \</span><br><span class="line">&amp;&amp; cp ./lib/libapue.a  /usr/lib \</span><br><span class="line">&amp;&amp; rm -rf /root/apue.3e</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-build"><a href="#3-build" class="headerlink" title="3. build"></a>3. build</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t apue .</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-alias一下编译命令-方便编译"><a href="#4-alias一下编译命令-方便编译" class="headerlink" title="4. alias一下编译命令 方便编译"></a>4. alias一下编译命令 方便编译</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>添加下面到.bashrc里面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> apue=<span class="string">'apue()&#123; docker run --rm -v $(pwd):/root apue gcc $1 -o $(echo $1 | sed "s/\.c//")  -lapue; &#125;;apue'</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-编译"><a href="#5-编译" class="headerlink" title="5. 编译"></a>5. 编译</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apue ls.c</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>将会自动生成可执行文件ls</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排列组合算法</title>
      <link href="/2016/10/31/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%AE%97%E6%B3%95/"/>
      <url>/2016/10/31/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>组合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void Comb(int[] array, int offset, int n, int[] result)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Print(result);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = offset; i &lt; array.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result[result.Length - n] = array[i];</span><br><span class="line">        Comb(array, i + 1, n - 1, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>排列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void Perm(int[] array, int offset,int n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset == n)</span><br><span class="line">    &#123;</span><br><span class="line">        Print(array, n);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = offset; i &lt; array.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != offset)</span><br><span class="line">        &#123;</span><br><span class="line">            Swap(ref array[i], ref array[offset]);</span><br><span class="line">        &#125;</span><br><span class="line">        Perm(array, offset + 1, n);</span><br><span class="line">        <span class="keyword">if</span> (i != offset)</span><br><span class="line">        &#123;</span><br><span class="line">            Swap(ref array[i], ref array[offset]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker-compose开机自动重启</title>
      <link href="/2016/03/09/docker-compose%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/"/>
      <url>/2016/03/09/docker-compose%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="docker-compose开机自动重启"><a href="#docker-compose开机自动重启" class="headerlink" title="docker-compose开机自动重启"></a>docker-compose开机自动重启</h2><blockquote><p> 在生产环境中，整个团队需要发布的容器数量很可能极其庞大，而容器之间的联系和拓扑结构也很可能非常复杂，如果依赖人工记录和维护这样复杂的容器关系，并保障集群正常运行、监控、迁移、高可用等常规运维需求，实在是力不从心。<br>因此，我们需要一种像Dockerfile定义Docker容器一样能够定义容器集群的编排和部署工具，Compose就是来解决这种问题的工具。</p></blockquote><h2 id="docker-compose的安装"><a href="#docker-compose的安装" class="headerlink" title="docker-compose的安装"></a>docker-compose的安装</h2><blockquote><p>docker-compose的安装非常简单：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="docker-compose-yml的编写"><a href="#docker-compose-yml的编写" class="headerlink" title="docker-compose.yml的编写"></a>docker-compose.yml的编写</h2><blockquote><p>这是sdp环境的一个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">gitlab: </span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/sameersbn/gitlab'</span> </span><br><span class="line">    ports: </span><br><span class="line">        - <span class="string">"8082:80"</span> </span><br><span class="line">        - <span class="string">"10022:22"</span> </span><br><span class="line">    links: </span><br><span class="line">        - redis:redisio </span><br><span class="line">        - postgresql:postgresql </span><br><span class="line">        - ldap:ldap1 </span><br><span class="line">    volumes: </span><br><span class="line">        - /data/srv/docker/gitlab/gitlab:/home/git/data </span><br><span class="line">    environment: </span><br><span class="line">        - GITLAB_PORT=80 </span><br><span class="line">        - GITLAB_SSH_PORT=10022 </span><br><span class="line">        - GITLAB_HOST=git.menethil.neti </span><br><span class="line">        - LDAP_ENABLED=<span class="literal">true</span> </span><br><span class="line">        - LDAP_HOST=10.117.105.140 </span><br><span class="line">        - LDAP_UID=uid </span><br><span class="line">        - LDAP_BIND_DN=cn=Manager,dc=tuleap,dc=<span class="built_in">local</span> </span><br><span class="line">        - LDAP_PASS=123456 </span><br><span class="line">        - LDAP_ALLOW_USERNAME_OR_EMAIL_LOGIN=<span class="literal">false</span> </span><br><span class="line">        - LDAP_BLOCK_AUTO_CREATED_USERS=<span class="literal">false</span> </span><br><span class="line">        - LDAP_BASE=ou=people,dc=tuleap,dc=<span class="built_in">local</span> </span><br><span class="line">        - LDAP_LABEL=LDAP </span><br><span class="line">        - UNICORN_TIMEOUT=72000 </span><br><span class="line">        - NGINX_MAX_UPLOAD_SIZE=10000M </span><br><span class="line">redis: </span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/sameersbn/redis:latest'</span> </span><br><span class="line">    volumes: </span><br><span class="line">        - /data/var/lib/redis:/var/lib/redis </span><br><span class="line">    expose: </span><br><span class="line">        - <span class="string">"6379"</span> </span><br><span class="line">postgresql: </span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/sameersbn/postgresql:9.4-3'</span> </span><br><span class="line">    volumes: </span><br><span class="line">        - /data/var/lib/postgresql:/var/lib/postgresql </span><br><span class="line">    environment: </span><br><span class="line">        - DB_NAME=gitlabhq_production</span><br><span class="line">        - DB_USER=gitlab</span><br><span class="line">        - DB_PASS=password</span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"5432:5432"</span></span><br><span class="line">    expose:</span><br><span class="line">        - <span class="string">"5432"</span></span><br><span class="line"></span><br><span class="line">nginx:</span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/shareinto/nginx:0.1'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">'80:80'</span></span><br><span class="line">    volumes:</span><br><span class="line">        - /root/nginx/nginx-conf:/etc/nginx/conf.d</span><br><span class="line">        - /data/etc/salt/pki/minion:/etc/salt/pki/minion</span><br><span class="line">ldap:</span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/enalean/ldap'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">'389:389'</span></span><br><span class="line">        - <span class="string">'636:636'</span></span><br><span class="line">    expose:</span><br><span class="line">        - <span class="string">"389"</span></span><br><span class="line">        - <span class="string">"636"</span></span><br><span class="line">    volumes:</span><br><span class="line">        - /data/ldap/data:/data</span><br><span class="line">    environment:</span><br><span class="line">        - LDAP_ROOT_PASSWORD=123456</span><br><span class="line">        - LDAP_MANAGER_PASSWORD=123456</span><br><span class="line">jenkins:</span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/shareinto/jenkins:0.1'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"8080:8080"</span></span><br><span class="line">    volumes:</span><br><span class="line">        - /data/home/.m2/repository:/home/.m2/repository</span><br><span class="line">        - /data/data/jenkins/<span class="built_in">jobs</span>:/data/jenkins/<span class="built_in">jobs</span></span><br><span class="line">        - /data/data/jenkins:/data/jenkins</span><br><span class="line">    environment:</span><br><span class="line">        - JENKINS_HOME=/data/jenkins</span><br><span class="line">        - NEXUS_HOST=http://10.117.105.140:8081</span><br><span class="line">    user: root</span><br><span class="line">    links:</span><br><span class="line">        - ldap:ldap1</span><br><span class="line">nexus:</span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/sonatype/nexus'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"8081:8081"</span></span><br><span class="line">    volumes:</span><br><span class="line">        - /data/sonatype-work:/sonatype-work</span><br><span class="line">    user: root</span><br><span class="line">mongo:</span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/tutum/mongodb'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"27017:27017"</span></span><br><span class="line">        - <span class="string">"28017:28017"</span></span><br><span class="line">    volumes:</span><br><span class="line">        - AUTH=no</span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"4506:4506"</span></span><br><span class="line">        - /data/etc/salt/pki:/etc/salt/pki</span><br><span class="line">        - /data/var/cache/salt:/var/cache/salt</span><br><span class="line">        - /data/etc/salt/master.d:/etc/salt/master.d</span><br><span class="line">        - /data/srv/salt:/srv/salt</span><br><span class="line">erp:</span><br><span class="line">    image: <span class="string">'registry.menethil.net:5000/shareinto/omco.erp.web:1.0.0'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"5004:5004"</span></span><br><span class="line">    links:</span><br><span class="line">        - ldap:ldap1</span><br><span class="line">sdp:</span><br><span class="line">    image: <span class="string">'shareinto/portal'</span></span><br><span class="line">    ports:</span><br><span class="line">        - <span class="string">"8889:8080"</span></span><br><span class="line">    links:</span><br><span class="line">        - saltmaster</span><br><span class="line">        - jenkins</span><br><span class="line">        - nexus</span><br><span class="line">        - gitlab</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>文件的说明文档可以查看<a href="https://docs.docker.com/v1.8/compose/yml/" target="_blank" rel="noopener">这里</a></p></blockquote><h2 id="开机自动运行"><a href="#开机自动运行" class="headerlink" title="开机自动运行"></a>开机自动运行</h2><blockquote><p>找到/etc/rc.d/rc.local文件,添加以下脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/docker-compose -f /root/gitlab-compose/docker-compose.yml up -d</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其中-f参数是指定docker-compose.yml文件的参数<br>设置完以后，重启操作系统，耐心等待一会，就可以看到对应的docker容器都启动起来了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go Data Structures Interfaces</title>
      <link href="/2016/03/08/GoDataStructures-Interfaces/"/>
      <url>/2016/03/08/GoDataStructures-Interfaces/</url>
      
        <content type="html"><![CDATA[<p>go对我而言其最令人激动的地方就是接口的设计，例如静态类型、编译时检查。如果非要让我将go的一个特性运用到其它语言的设计当中，那一定非接口莫属。</p><p>这篇文章描述了我对接口值在“ GC ”的编译器的实现。 Ian Lance Taylor已经写了两篇关于接口值在gccgo中如何实现的文章。这篇文章与其大同小异：最大的区别是，本文有图片。</p><h2 id="Usgae"><a href="#Usgae" class="headerlink" title="Usgae"></a><strong>Usgae</strong></h2><p>go接口的使用让你感觉像是在用python这样纯粹的动态语言一样，但不同的是仍然有编译器帮你进行静态检查，例如传了一个int型变量给Read方法，或者给Read方法传了错误的参数个数。要使用go的接口，首先得定义一个接口类型(比如下面的ReadCloser)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadCloser <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(b []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err os.Error)</span><br><span class="line">    Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后定义一个带有ReadCloser参数的函数。例如，下面这个函数通过循环调用Read方法获取所有的请求数据，然后再调用Close方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAndClose</span><span class="params">(r ReadCloser, buf []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err os.Error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(buf) &gt; <span class="number">0</span> &amp;&amp; err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nr <span class="keyword">int</span></span><br><span class="line">        nr, err = r.Read(buf)</span><br><span class="line">        n += nr</span><br><span class="line">        buf = buf[nr:]</span><br><span class="line">    &#125;</span><br><span class="line">    r.Close()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用ReadAndClose函数的时候，只要任何实现了Read和Close方法的类型，都可以作为该函数的第一个参数传递进去。而且不像python，如果你传递了一个错误的类型，那么编译器就会报告类型错误，而不是等到运行时才报错。</p><p>当然，接口并不局限于静态检查，你也可以在运行时动态的检查一个接口的实际类型。例如：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToString</span><span class="params">(any <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> v, ok := any.(Stringer); ok &#123;</span><br><span class="line">        <span class="keyword">return</span> v.String()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> v := any.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        <span class="keyword">return</span> strconv.Itoa(v)</span><br><span class="line">    <span class="keyword">case</span> float:</span><br><span class="line">        <span class="keyword">return</span> strconv.Ftoa(v, <span class="string">'g'</span>, <span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"???"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>any参数的类型是interface{}，即该接口没有任何的方法，这意味着它可以接收任何类型的参数。在if语句中的”comma ok”表达式尝试将any转成Stringer接口类型，这个接口类型包含了String方法，如果转换成功，在if的中括号内，将调用String方法获取字符串值并返回回去。如果转换失败，在接下来的的switch语句中，又验证了了两个基础类型。这个函数就像是<a href="https://golang.org/pkg/fmt/" target="_blank" rel="noopener">fmt包</a>的一个精简版的实现。（这里那个if语句实际上可以转化为case Stringer放到swtich顶部中去，这里为了演示故意写成这样）</p><p>举一个简单的例子:考虑定义一个底层类型为unit64的Binary类型，并为它写一个String()方法和Get()方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Binary <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i Binary)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strconv.Uitob64(i.Get(), <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i Binary)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">uint64</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设将类型为Binary的值传给ToString函数，那么在ToString内部将调用String方法并返回。在程序运行的过程中，运行时知道Binary类型有String方法，所以，程序认为它实现了Stringer接口。这是一种奇妙的设计，因为有时候甚至连Binary的作者都不知道Stringer接口的存在。</p><p>以上这些例子表明即使所有的隐式转换是在编译时进行检查，显示的接口到接口的转换也可以在运行时进行。<a href="https://golang.org/doc/effective_go.html#interfaces" target="_blank" rel="noopener">Effective Go</a>有更多关于接口的详细例子。</p><h2 id="Interface-Values"><a href="#Interface-Values" class="headerlink" title="Interface Values"></a><strong>Interface Values</strong></h2><p>拥有方法的语言通常分为两大阵营：</p><ul><li>拥有方法表的静态语言（如C++和Java）</li><li>每次调用都进行方法地址查询的动态语言（如Smalltalk和它的众多模仿者、javascript和python等，有的会通过缓存提高它调用的效率）。<br>Go则位于两者的中间，它拥有方法表，但却是在运行时计算它们。我不知道go是不是第一个使用该技术的语言，但这种方式肯定是不常见的。</li></ul><p>举个例子,一个Binary类型的值是一个64位整型，它由两个32位的字组成（假设我们现在使用的是32位的机器）</p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/gointer1.png" alt=""></p><p>Interface由两个字长组成，其中一个存储指向接口类型表的指针，另一个存储指向数据的指针。如果将b赋值给一个Stringer类型的接口变量，其内存结构如下图所示</p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/gointer2.png" alt=""></p><p>(接口中存储的指针对程序是不可见的，它不会直接暴露给用户)</p><p>第一个字节中的指针指向一个名字叫作itable的内存块（在C中叫作Itab）。itable头部存储了一些与类型相关的元数据，然后才是函数指针列表。itable对应的是接口类型，而不是动态类型。以我们的例子来讲，Stringer的itable保存了类型Binary的元数据，然后才是那些满足Stringer接口的函数指针列表，在这个例子中就只有一个String方法，而Binary的其它方法则不会在itable中出现。</p><p>第二个字节中的指针则指向b的一个副本。下面这个赋值语句 var s Stringer = b 将会申请一个b的副本，并将第二个字节中的指针指向该副本，其原理和 var c unit64 = b 一样。当我们改变b的值的时候，s和c的值将不会被改变。在接口中存储的值可能是任意大小的，但是接口本身却只有一个字来存储数据，所以程序会在堆上申请一组内存来存储该数据，然后再将第二个字上的指针指向该内存组。（如果数据的大小刚才等于或小于一个字，我们在后面会讨论该情况）</p><p>像上面的switch语句所进行的特定类型检查，go编译器会生成相当于C中 s.tag-&gt;type这样的代码来检查实际类型和期望类型是否相同，如果相同的话，那么s.data将被拷贝并赋值给期望值。</p><p>当调用s.String()时，Go编译器生成相当于C语言中的 s.tab-&gt;fun[0](s.data)它调用了函数指针指向的方法，并将接口第二个字作为第一个参数传递进去。值得注意的是，它传递的是第二个字中的32位的指针的值，而不是指针所指向的那个64位的值。一般情况下，接口调用并不知道该字节代表什么也不知道它所指向的数据有多大。而方法调用时会严格尊守itable里面所存储的函数指针的签名，因此在本例中该方法的签名应该是(*Binary) string而不是(Binary) string。</p><p>在该示例中只有一个方法，如果有多个方法的时候，在itable表的底部将会有多个函数指针。</p><h2 id="Computing-the-Itable"><a href="#Computing-the-Itable" class="headerlink" title="Computing the Itable"></a><strong>Computing the Itable</strong></h2><p>现在我们了解了itable的结构，但它是怎么生成的呢？go语言的动态类型转换特性决定了它不可能在编译时就生成它，因为会有太多的（interface type和concrete type）组成的对，并且大多数不会被使用到。取而代之的是，编译器会为各个实际类型生成一个类型描述结构，该结构就包含了该类型所实现的方法列表。同样的，编译器也会每个接口类型生成这样一个类型描述结构，它也同样包含了接口方法列表。接口在运行时才会生成itable，通过查找接口的类型描述结构和具体类型的类型描述结构，并且将itable缓存起来，因此，这个计算只会被执行一次。</p><p>在我们的例子中，Stringer的类型描述结构中只有一个方法，而Binary中有两个方法。假设接口类型拥有ni个方法，实际类型拥有nt个方法，那么找到它所相互匹配的方法所花费的时间复杂度为O(ni x nt),我们可以能过Map存储它们，然后查找过程中时间复杂度则变成O(ni + nt)。</p><h2 id="Memory-Optimizations"><a href="#Memory-Optimizations" class="headerlink" title="Memory Optimizations"></a><strong>Memory Optimizations</strong></h2><p>接口的内存使用在两种情况下可以被优化。</p><ul><li>如果接口类型是interface{}的情况下，也就是没有任何方法的情况下，itable也就没有存在的必要。在这种情况下，第一个字就可以存储实际类型了：</li></ul><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/gointer3.png" alt=""></p><p>一个接口有没有方法go将用一个静态属性表示，因此编译器知道第一个字表示的是哪一种情况。</p><ul><li>如果接口所关联的类型的值大小刚好是一个机器字长，那就没有必要进行堆内存的申请了。如果我们像Binary一样定义一个Binary32，将uint32作为它的底层类型，那么它的值就可以直接存储在第二个字中：</li></ul><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/gointer4.png" alt=""></p><p>在这种情况下，String的函数签名将变成(Binary) string,而不是原来的(*Binary) string。</p><p>因此，当给一个空接口赋值一个大小为一个机器字长的值（或更小）时，它将同时采用上面这两种优化方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker-开启远程访问</title>
      <link href="/2016/03/03/docker-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
      <url>/2016/03/03/docker-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>默认情况下，Docker守护进程会生成一个socket（/var/run/docker.sock）文件来进程本地进程通信，而不会监听任何端口，因此只能在本地使用docker客户端或者使用Docker API进行操作。<br>如果想在其他主机上操作Docker主机，就需要让Docker守护进程监听一个端口，这样才能实现远程通信。</p><p>修改Docker服务启动配置文件，添加一个未被占用的端口号，重启docker守护进程。</p><p>centos用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/docker</span></span><br><span class="line">other_args=<span class="string">"-H tcp://0.0.0.0:4243"</span></span><br><span class="line"><span class="comment"># service docker restart</span></span><br></pre></td></tr></table></figure></p><p>ubuntu用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/default/docker</span></span><br><span class="line">DOCKER_OPTS=<span class="string">"-H 0.0.0.0:4243"</span></span><br><span class="line"><span class="comment"># service docker restart</span></span><br></pre></td></tr></table></figure></p><p>此时发现docker守护进程已经在监听4243端口，在另一台主机上可以通过该端口访问Docker进程了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker -H IP:4243 images</span></span><br></pre></td></tr></table></figure><p>但是我们却发现在本地操作docker却出现问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">FATA[0000] Cannot connect to the Docker daemon. Is <span class="string">'docker -d'</span> running on this host?</span><br></pre></td></tr></table></figure></p><p>这是因为Docker进程只开启了远程访问，本地套接字访问未开启。我们修改配置，然后重启即可。</p><p>centos用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/docker</span></span><br><span class="line">other_args=<span class="string">"-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock"</span></span><br><span class="line"><span class="comment"># service docker restart</span></span><br></pre></td></tr></table></figure></p><p>ubuntu用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/default/docker</span></span><br><span class="line">DOCKER_OPTS=<span class="string">"-H 0.0.0.0:4243 -H unix:///var/run/docker.sock"</span></span><br><span class="line"><span class="comment"># service docker restart</span></span><br></pre></td></tr></table></figure></p><p>现在本地和远程均可访问docker进程了。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cocoapods-proxy服务器部署</title>
      <link href="/2016/02/26/cocoapods-proxy-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2016/02/26/cocoapods-proxy-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="cocoapods-proxy服务器部署"><a href="#cocoapods-proxy服务器部署" class="headerlink" title="cocoapods-proxy服务器部署"></a>cocoapods-proxy服务器部署</h1><hr><h2 id="1-制作git-mirrors镜像"><a href="#1-制作git-mirrors镜像" class="headerlink" title="1. 制作git-mirrors镜像"></a>1. 制作git-mirrors镜像</h2><blockquote><p>Dockerfile:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER &lt;dockerfun&gt;</span><br><span class="line"></span><br><span class="line">ENV GITLAB_HOST=<span class="string">"git.menethil.net"</span> \</span><br><span class="line">    GITLAB_USER=<span class="string">"850428"</span> \</span><br><span class="line">    PRIVATE_TOKEN=<span class="string">"xmyV3Q4TXz1WDzPvyhha"</span> \</span><br><span class="line">    GITLAB_NAMESPACE=<span class="string">"Mirrors"</span> \</span><br><span class="line">    GITLAB_URL=<span class="string">"http:\/\/git.menethil.net"</span> \</span><br><span class="line">    SYSTEM_USER=<span class="string">"root"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line"></span><br><span class="line">RUN yum install python-setuptools -y  &amp;&amp; yum install git -y &amp;&amp; git <span class="built_in">clone</span> https://github.com/alexvh/python-gitlab3.git</span><br><span class="line"></span><br><span class="line">WORKDIR /root/python-gitlab3</span><br><span class="line"></span><br><span class="line">RUN git checkout v0.5.4 &amp;&amp; python setup.py install</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /root/.ssh &amp;&amp;  <span class="built_in">echo</span> <span class="string">'Host $&#123;GITLAB_HOST&#125;'</span> &gt; /root/.ssh/config &amp;&amp; <span class="built_in">echo</span> <span class="string">'User $&#123;GITLAB_USER&#125;'</span> &gt;&gt; /root/.ssh/config \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">'$&#123;PRIVATE_TOKEN&#125;'</span> &gt; /root/private_token</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line"></span><br><span class="line">RUN mkdir /root/repositories &amp;&amp; git <span class="built_in">clone</span> https://github.com/samrocketman/gitlab-mirrors.git</span><br><span class="line"></span><br><span class="line">WORKDIR /root/gitlab-mirrors</span><br><span class="line"></span><br><span class="line">COPY config.sh /root/gitlab-mirrors/config.sh</span><br><span class="line"></span><br><span class="line">COPY entrypoint.sh /sbin/entrypoint.sh</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"/sbin/entrypoint.sh"</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其中另外两个文件如下：<br>config.sh:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Environment file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># gitlab-mirrors settings</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The user git-mirrors will run as.</span></span><br><span class="line">system_user=<span class="variable">$&#123;SYSTEM_USER&#125;</span></span><br><span class="line"><span class="comment">#The home directory path of the $system_user</span></span><br><span class="line">user_home=<span class="string">"/home/<span class="variable">$&#123;SYSTEM_USER&#125;</span>"</span></span><br><span class="line"><span class="comment">#The repository directory where gitlab-mirrors will contain copies of mirrored</span></span><br><span class="line"><span class="comment">#repositories before pushing them to gitlab.</span></span><br><span class="line">repo_dir=<span class="string">"<span class="variable">$&#123;user_home&#125;</span>/repositories"</span></span><br><span class="line"><span class="comment">#colorize output of add_mirror.sh, update_mirror.sh, and git-mirrors.sh</span></span><br><span class="line"><span class="comment">#commands.</span></span><br><span class="line">enable_colors=<span class="literal">true</span></span><br><span class="line"><span class="comment">#These are additional options which should be passed to git-svn.  On the command</span></span><br><span class="line"><span class="comment">#line type "git help svn"</span></span><br><span class="line">git_svn_additional_options=<span class="string">"-s"</span></span><br><span class="line"><span class="comment">#Force gitlab-mirrors to not create the gitlab remote so a remote URL must be</span></span><br><span class="line"><span class="comment">#provided. (superceded by no_remote_set)</span></span><br><span class="line">no_create_set=<span class="literal">false</span></span><br><span class="line"><span class="comment">#Force gitlab-mirrors to only allow local remotes only.</span></span><br><span class="line">no_remote_set=<span class="literal">false</span></span><br><span class="line"><span class="comment">#Enable force fetching and pushing.  Will overwrite references if upstream</span></span><br><span class="line"><span class="comment">#forced pushed.  Applies to git projects only.</span></span><br><span class="line">force_update=<span class="literal">false</span></span><br><span class="line"><span class="comment">#This option is for pruning mirrors.  If a branch is deleted upstream then that</span></span><br><span class="line"><span class="comment">#change will propagate into your GitLab mirror.  Aplies to git projects only.</span></span><br><span class="line">prune_mirrors=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Gitlab settings</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#This is the Gitlab group where all project mirrors will be grouped.</span></span><br><span class="line">gitlab_namespace=<span class="string">"<span class="variable">$&#123;GITLAB_NAMESPACE&#125;</span>"</span></span><br><span class="line"><span class="comment">#This is the base web url of your Gitlab server.</span></span><br><span class="line">gitlab_url=<span class="string">"<span class="variable">$&#123;GITLAB_URL&#125;</span>"</span></span><br><span class="line"><span class="comment">#Special user you created in Gitlab whose only purpose is to update mirror sites</span></span><br><span class="line"><span class="comment">#and admin the $gitlab_namespace group.</span></span><br><span class="line">gitlab_user=<span class="string">"<span class="variable">$&#123;GITLAB_USER&#125;</span>"</span></span><br><span class="line"><span class="comment">#Generate a token for your $gitlab_user and set it here.</span></span><br><span class="line">gitlab_user_token_secret=<span class="string">"<span class="variable">$&#123;PRIVATE_TOKEN&#125;</span>"</span></span><br><span class="line"><span class="comment">#Verify signed SSL certificates?</span></span><br><span class="line">ssl_verify=<span class="literal">false</span></span><br><span class="line"><span class="comment">#Push to GitLab over http?  Otherwise will push projects via SSH.</span></span><br><span class="line">http_remote=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Gitlab new project default settings.  If a project needs to be created by</span></span><br><span class="line"><span class="comment"># gitlab-mirrors then it will assign the following values as defaults.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#values must be true or false</span></span><br><span class="line">issues_enabled=<span class="literal">false</span></span><br><span class="line">wall_enabled=<span class="literal">false</span></span><br><span class="line">wiki_enabled=<span class="literal">false</span></span><br><span class="line">snippets_enabled=<span class="literal">false</span></span><br><span class="line">merge_requests_enabled=<span class="literal">false</span></span><br><span class="line">public=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>entrypoint.sh:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">[[ -n <span class="variable">$DEBUG_ENTRYPOINT</span> ]] &amp;&amp; <span class="built_in">set</span> -x</span><br><span class="line"></span><br><span class="line">sed <span class="string">'s/\$&#123;GITLAB_NAMESPACE&#125;/'</span><span class="string">"<span class="variable">$&#123;GITLAB_NAMESPACE&#125;</span>"</span><span class="string">'/'</span> -i ~/gitlab-mirrors/config.sh</span><br><span class="line"></span><br><span class="line">sed <span class="string">'s/\$&#123;GITLAB_URL&#125;/'</span><span class="string">"<span class="variable">$&#123;GITLAB_URL&#125;</span>"</span><span class="string">'/'</span> -i ~/gitlab-mirrors/config.sh</span><br><span class="line"></span><br><span class="line">sed <span class="string">'s/\$&#123;GITLAB_USER&#125;/'</span><span class="string">"<span class="variable">$&#123;GITLAB_USER&#125;</span>"</span><span class="string">'/'</span> -i ~/gitlab-mirrors/config.sh</span><br><span class="line"></span><br><span class="line">sed <span class="string">'s/\$&#123;PRIVATE_TOKEN&#125;/'</span><span class="string">"<span class="variable">$&#123;PRIVATE_TOKEN&#125;</span>"</span><span class="string">'/'</span> -i ~/gitlab-mirrors/config.sh</span><br><span class="line"></span><br><span class="line">sed <span class="string">'s/\$&#123;SYSTEM_USER&#125;/'</span><span class="string">"<span class="variable">$&#123;SYSTEM_USER&#125;</span>"</span><span class="string">'/'</span> -i ~/gitlab-mirrors/config.sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"no arguments"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  $*</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>镜像完成后，记得先在宿主机上面生成ssh-keygen,添加到自己搭建的gitlab服务器上，并运行镜像一次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name git-mirrors -v /root/.ssh:/root/.ssh gitlab-mirrors /bin/bash</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>记得-v映射到宿主机上的/root/.ssh目录<br>进入容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-enter git-mirrors</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>手动运行一次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./add_mirror.sh --git --project-name gitlab-mirrors --mirror https://github.com/samrocketman/gitlab-mirrors.git</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在提示是否接受host的时候，输入yes<br>之后退出容器并删除容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker rm -f git-mirrors</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="2-拉取salt-master镜像"><a href="#2-拉取salt-master镜像" class="headerlink" title="2.拉取salt-master镜像"></a>2.拉取salt-master镜像</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 120.26.128.207:5000/shareinto/salt-master:0.2</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>该镜像集成了salt-master，salt-api环境<br>运行该镜像脚本如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker rm -f salt-master</span><br><span class="line">docker run \</span><br><span class="line">--name salt-master \</span><br><span class="line">-p 1022:22 \</span><br><span class="line">-p 4505:4505 \</span><br><span class="line">-p 4506:4506 \</span><br><span class="line">-p 8886:8886 \</span><br><span class="line">-v /data/etc/salt/pki:/etc/salt/pki -v /data/var/cache/salt:/var/cache/salt -v /data/srv/salt:/srv/salt \</span><br><span class="line">-d 120.26.128.207:5000/shareinto/salt-master:0.2</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-安装salt-minion"><a href="#3-安装salt-minion" class="headerlink" title="3.安装salt-minion"></a>3.安装salt-minion</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install salt-minion -y</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>修改/etc/salt/minion文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master: 172.24.133.159</span><br><span class="line">id: 172.24.133.159</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里因为master机和minion机是同一台机器，所以master和id一样，使用时替换成你自己的ip<br>完成后，启动salt-minion服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service salt-minion start</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="4-安装git客户端"><a href="#4-安装git客户端" class="headerlink" title="4.安装git客户端"></a>4.安装git客户端</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git -y</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-创建几个目录-data-original-data-temp-specs-data-formal-specs"><a href="#5-创建几个目录-data-original-data-temp-specs-data-formal-specs" class="headerlink" title="5.创建几个目录 /data/original /data/temp/specs /data/formal/specs"></a>5.创建几个目录 /data/original /data/temp/specs /data/formal/specs</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /data/original</span><br><span class="line">sudo mkdir -p /data/temp/specs</span><br><span class="line">sudo mkdir -p /data/formal/specs</span><br><span class="line"><span class="built_in">cd</span> /data/original</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/cocoapods/specs.git</span><br><span class="line"><span class="built_in">cd</span> /data/formal/specs</span><br><span class="line">sudo git init</span><br><span class="line">sudo git add .</span><br><span class="line">sudo git commit -m <span class="string">"first commit"</span></span><br><span class="line">sudo git remote add origin git@git.sdp.nd:Mirrors/specs.git</span><br><span class="line">sudo git push -u origin master</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在最后push到服务器之前，记得先生成ssh-keygen,添加到自己搭建的gitlab服务器上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5上安装docker环境</title>
      <link href="/2015/09/11/centos6-5-docker-install/"/>
      <url>/2015/09/11/centos6-5-docker-install/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>docker容器最早受到RHEL完善的支持是从最近的CentOS 7.0开始的，官方说明是只能运行于64位架构平台，内核版本为2.6.32-431及以上（建议升级到3.10.x,否则低版本会出现各种各样莫名的问题），升级内核请参考<a href="http://shareinto.github.io/2015/09/11/centos6-5-kernel-update/" target="_blank" rel="noopener">centos6.5内核升级</a></p><h2 id="1-禁用selinux"><a href="#1-禁用selinux" class="headerlink" title="1. 禁用selinux"></a>1. 禁用selinux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ getenforce</span><br><span class="line">Enforcing</span><br><span class="line"></span><br><span class="line">$ setenforce 0</span><br><span class="line"></span><br><span class="line">$ vi /etc/selinux/config</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h2 id="2-安装-Fedora-EPEL"><a href="#2-安装-Fedora-EPEL" class="headerlink" title="2. 安装 Fedora EPEL"></a>2. 安装 Fedora EPEL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="3-安装-docker-io"><a href="#3-安装-docker-io" class="headerlink" title="3. 安装 docker-io"></a>3. 安装 docker-io</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ yum install docker-io -y</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">===========================================================================================</span><br><span class="line"> Package                        Arch               Version          Repository     Size</span><br><span class="line">Installing:</span><br><span class="line"> docker-io                      x86_64         1.1.2-1.el6          epel          4.5 M</span><br><span class="line">Installing <span class="keyword">for</span> dependencies:</span><br><span class="line"> lua-alt-getopt                 noarch         0.7.0-1.el6          epel          6.9 k</span><br><span class="line"> lua-filesystem                 x86_64         1.4.2-1.el6          epel           24 k</span><br><span class="line"> lua-lxc                        x86_64         1.0.6-1.el6          epel           15 k</span><br><span class="line"> lxc                            x86_64         1.0.6-1.el6          epel          120 k</span><br><span class="line"> lxc-libs                       x86_64         1.0.6-1.el6          epel          248 k</span><br><span class="line">===========================================================================================</span><br><span class="line">Install       6 Package(s)</span><br></pre></td></tr></table></figure><h2 id="4-安装device-mapper相关包"><a href="#4-安装device-mapper相关包" class="headerlink" title="4. 安装device-mapper相关包"></a>4. 安装device-mapper相关包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum install http://mirror.centos.org/centos/6/os/x86_64/Packages/device-mapper-1.02.95-2.el6.x86_64.rpm </span><br><span class="line">http://mirror.centos.org/centos/6/os/x86_64/Packages/device-mapper-libs-1.02.95-2.el6.x86_64.rpm </span><br><span class="line">http://mirror.centos.org/centos/6/os/x86_64/Packages/device-mapper-event-1.02.95-2.el6.x86_64.rpm </span><br><span class="line">http://mirror.centos.org/centos/6/os/x86_64/Packages/device-mapper-event-libs-1.02.95-2.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="5-安装docker进程查看工具"><a href="#5-安装docker进程查看工具" class="headerlink" title="5. 安装docker进程查看工具"></a>5. 安装docker进程查看工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install util-linux -y</span><br><span class="line">$ wget --no-check-certificate -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker"</span> &gt;&gt; ~/.bashrc; <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="6-安装完成-启动docker服务"><a href="#6-安装完成-启动docker服务" class="headerlink" title="6. 安装完成,启动docker服务"></a>6. 安装完成,启动docker服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service docker start</span><br></pre></td></tr></table></figure><h2 id="7-续-》docker-compose安装"><a href="#7-续-》docker-compose安装" class="headerlink" title="7. 续==》docker-compose安装"></a>7. 续==》docker-compose安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5内核升级</title>
      <link href="/2015/09/11/centos6-5-kernel-update/"/>
      <url>/2015/09/11/centos6-5-kernel-update/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看当前内核版本"><a href="#1-查看当前内核版本" class="headerlink" title="1. 查看当前内核版本"></a>1. 查看当前内核版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">2.6.32-431.el6.x86_64</span><br></pre></td></tr></table></figure><h2 id="2-导入public-key"><a href="#2-导入public-key" class="headerlink" title="2. 导入public key"></a>2. 导入public key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><h2 id="3-安装ELRepo到CentOS-6-5中"><a href="#3-安装ELRepo到CentOS-6-5中" class="headerlink" title="3. 安装ELRepo到CentOS-6.5中"></a>3. 安装ELRepo到CentOS-6.5中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh http://www.elrepo.org/elrepo-release-6-5.el6.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="4-安装kernel-lt（lt-long-term）"><a href="#4-安装kernel-lt（lt-long-term）" class="headerlink" title="4. 安装kernel-lt（lt=long-term）"></a>4. 安装<strong>kernel-lt（lt=long-term）</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum --enablerepo=elrepo-kernel install kernel<span class="_">-lt</span> -y</span><br></pre></td></tr></table></figure><h2 id="5-编辑grub-conf文件，修改Grub引导顺序"><a href="#5-编辑grub-conf文件，修改Grub引导顺序" class="headerlink" title="5. 编辑grub.conf文件，修改Grub引导顺序"></a>5. 编辑grub.conf文件，修改Grub引导顺序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/grub.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># grub.conf generated by anaconda</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that you do not have to rerun grub after making changes to this file</span></span><br><span class="line"><span class="comment"># NOTICE:  You do not have a /boot partition.  This means that</span></span><br><span class="line"><span class="comment">#          all kernel and initrd paths are relative to /, eg.</span></span><br><span class="line"><span class="comment">#          root (hd0,0)</span></span><br><span class="line"><span class="comment">#          kernel /boot/vmlinuz-version ro root=/dev/sda1</span></span><br><span class="line"><span class="comment">#          initrd /boot/initrd-[generic-]version.img</span></span><br><span class="line"><span class="comment">#boot=/dev/sda</span></span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">splashimage=(hd0,0)/boot/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS (3.10.28-1.el6.elrepo.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /boot/vmlinuz-3.10.28-1.el6.elrepo.x86_64 ro root=UUID=0a05411f-16f2-4d69-beb0-2db4cefd3613 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_MD crashkernel=auto LANG=en_US.UTF-8</span><br><span class="line"> rd_NO_LVM rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /boot/initramfs-3.10.28-1.el6.elrepo.x86_64.img</span><br><span class="line">title CentOS (2.6.32-431.3.1.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /boot/vmlinuz-2.6.32-431.3.1.el6.x86_64 ro root=UUID=0a05411f-16f2-4d69-beb0-2db4cefd3613 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_MD crashkernel=auto LANG=en_US.UTF-8 r</span><br><span class="line">d_NO_LVM rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /boot/initramfs-2.6.32-431.3.1.el6.x86_64.img</span><br><span class="line">title CentOS (2.6.32-431.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /boot/vmlinuz-2.6.32-431.el6.x86_64 ro root=UUID=0a05411f-16f2-4d69-beb0-2db4cefd3613 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_MD crashkernel=auto LANG=zh_CN.UTF-8 rd_NO</span><br><span class="line">_LVM rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /boot/initramfs-2.6.32-431.el6.x86_64.img</span><br></pre></td></tr></table></figure><blockquote><p>确认刚安装好的内核在哪个位置，然后设置default值（从0开始），一般新安装的内核在第一个位置，所以设置default=0。</p></blockquote><h2 id="6-重启，查看内核版本号"><a href="#6-重启，查看内核版本号" class="headerlink" title="6. 重启，查看内核版本号"></a>6. 重启，查看内核版本号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">3.10.28-1.el6.elrepo.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows下git-flow的安装</title>
      <link href="/2015/09/10/windows-git-flow-install/"/>
      <url>/2015/09/10/windows-git-flow-install/</url>
      
        <content type="html"><![CDATA[<h1 id="windows下git-flow的安装"><a href="#windows下git-flow的安装" class="headerlink" title="windows下git-flow的安装"></a>windows下git-flow的安装</h1><hr><h3 id="本教程只针对安装了1-9-5-高版本此方法不行-版本的MSysGit的git-flow安装，如果是Cygwin版的请参照这里"><a href="#本教程只针对安装了1-9-5-高版本此方法不行-版本的MSysGit的git-flow安装，如果是Cygwin版的请参照这里" class="headerlink" title="本教程只针对安装了1.9.5(高版本此方法不行)版本的MSysGit的git-flow安装，如果是Cygwin版的请参照这里"></a>本教程只针对安装了<a href="http://cdncs.101.com/v0.1/static/skin_manager/default/biz-comp-main/ios/Git_V1.9.5_preview20150319.1435310867.exe?&amp;attachment=true" target="_blank" rel="noopener">1.9.5</a>(高版本此方法不行)版本的MSysGit的git-flow安装，如果是Cygwin版的请参照<a href="https://github.com/nvie/gitflow/wiki/Windows" target="_blank" rel="noopener">这里</a></h3><p>安装流程如下：</p><blockquote><ol><li>下载git-flow所依赖的包</li><li>clone git-flow安装包</li></ol></blockquote><h2 id="1-下载git-flow所依赖的包"><a href="#1-下载git-flow所依赖的包" class="headerlink" title="1. 下载git-flow所依赖的包"></a>1. 下载git-flow所依赖的包</h2><p>  下载 <a href="http://cdncs.101.com/v0.1/static/skin_manager/default/biz-comp-main/ios/git-flow.zip?&amp;attachment=true" target="_blank" rel="noopener">git-flow.zip</a>。解压出<strong>getopt.exe,libintl3.dll和libiconv2.dll</strong>,放到Git安装目录（一般是C:\Program Files (x86)\Git）的bin目录下</p><h2 id="2-clone-git-flow安装包"><a href="#2-clone-git-flow安装包" class="headerlink" title="2. clone git-flow安装包"></a>2. clone git-flow安装包</h2><p>  在C盘（此处随便，什么地方都可以）根目录下右键，点击<strong>Git Bash</strong> 运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive git://github.com/nvie/gitflow.git</span><br></pre></td></tr></table></figure><p> 找到cmd(windows命令行)，右键点击-&gt;以管理员身份运行,进入到c:\gitflow文件夹,运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\gitflow&gt; contrib\msysgit-install.cmd <span class="string">"C:\Program Files (x86)\Git"</span></span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>运行下面命令检测是否成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p><img src="http://7xlovv.com1.z0.glb.clouddn.com/git-flow-success.jpg" alt="git-flow-success"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git-flow </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
