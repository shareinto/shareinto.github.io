<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shareinto</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-11T04:42:39.711Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dockerfun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过uprobe验证int3指令</title>
    <link href="http://yoursite.com/2021/11/11/uprobe-int3/"/>
    <id>http://yoursite.com/2021/11/11/uprobe-int3/</id>
    <published>2021-11-11T04:40:40.000Z</published>
    <updated>2021-11-11T04:42:39.711Z</updated>
    
    <content type="html"><![CDATA[<p>首先准备以下go程序：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int32</span>)</span><span class="title">int32</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        a := rand.Int31n(<span class="number">100</span>)</span><br><span class="line">        b := rand.Int31n(<span class="number">100</span>)</span><br><span class="line">        r := add(a, b)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d + %d = %d\n&quot;</span>, a, b, r)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里我们主要声明一个add方法，并在main函数中调用它，之后编译并运行该程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -gcflags=<span class="string">&#x27;-N -l&#x27;</span> main.go &amp;&amp; ./main</span><br></pre></td></tr></table></figure></p><p>开启另一个shell，我们要来获取add函数在代码段中的地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ objdump --syms main | grep add</span><br><span class="line">...</span><br><span class="line">0000000000480220 g     F .text  0000000000000034 main.add</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/`pgrep main`/maps | grep /root/study/main | grep r-xp</span><br><span class="line">00400000-00481000 r-xp 00000000 fd:00 102732081                          /root/study/main</span><br></pre></td></tr></table></figure><br>通过/proc/{pid}/maps查看程序代码段的虚拟内存起始地址为0x400000,这里需要减去相应的偏移量0x480220 - 0x400000 = 0x80220，得到add方法地址，接下来将地址通过debugfs写入uprobe<br>​</p><p>我们如何写入uprobe调式信息呢，uprobe的事件格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">p[:[GRP/]EVENT] PATH:OFFSET [FETCHARGS] : Set a uprobe</span><br><span class="line">r[:[GRP/]EVENT] PATH:OFFSET [FETCHARGS] : Set a <span class="built_in">return</span> uprobe (uretprobe)</span><br><span class="line">-:[GRP/]EVENT                           : Clear uprobe or uretprobe event</span><br><span class="line"></span><br><span class="line">GRP           : Group name. If omitted, <span class="string">&quot;uprobes&quot;</span> is the default value.</span><br><span class="line">EVENT         : Event name. If omitted, the event name is generated based</span><br><span class="line">                on PATH+OFFSET.</span><br><span class="line">PATH          : Path to an executable or a library.</span><br><span class="line">OFFSET        : Offset <span class="built_in">where</span> the probe is inserted.</span><br><span class="line"></span><br><span class="line">FETCHARGS     : Arguments. Each probe can have up to 128 args.</span><br><span class="line"> %REG         : Fetch register REG</span><br><span class="line"> @ADDR        : Fetch memory at ADDR (ADDR should be <span class="keyword">in</span> userspace)</span><br><span class="line"> @+OFFSET     : Fetch memory at OFFSET (OFFSET from same file as PATH)</span><br><span class="line"> <span class="variable">$stackN</span>      : Fetch Nth entry of stack (N &gt;= 0)</span><br><span class="line"> <span class="variable">$stack</span>       : Fetch stack address.</span><br><span class="line"> <span class="variable">$retval</span>      : Fetch <span class="built_in">return</span> value.(*)</span><br><span class="line"> +|-offs(FETCHARG) : Fetch memory at FETCHARG +|- offs address.(**)</span><br><span class="line"> NAME=FETCHARG     : Set NAME as the argument name of FETCHARG.</span><br><span class="line"> FETCHARG:TYPE     : Set TYPE as the <span class="built_in">type</span> of FETCHARG. Currently, basic types</span><br><span class="line">                     (u8/u16/u32/u64/s8/s16/s32/s64), <span class="string">&quot;string&quot;</span> and bitfield</span><br><span class="line">                     are supported.</span><br></pre></td></tr></table></figure><br>我们只要将uprobe事件写入/sys/kernel/debug/tracing/uprobe_events文件就可以了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;p:entry_add /root/study/main:0x80220 %ax:u32 %bx:u32&#x27;</span> &gt; /sys/kernel/debug/tracing/uprobe_events</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;r:exit_add /root/study/main:0x80220 %ax:u32&#x27;</span> &gt;&gt; /sys/kernel/debug/tracing/uprobe_events</span><br></pre></td></tr></table></figure><br>这里eax和ebx两个寄存器保存了函数的入参，而函数返回时把返回值保存在了eax寄存器，这个后面我们可以从汇编代码看到。<br>接下来先清理掉之前的事件日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &gt; /sys/kernel/debug/tracing/trace</span><br></pre></td></tr></table></figure><br>打开debug开关：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 1 &gt;  /sys/kernel/debug/tracing/events/uprobes/<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><br>查看事件日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ cat /sys/kernel/debug/tracing/trace    </span><br><span class="line"><span class="comment"># tracer: nop</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#                              _-----=&gt; irqs-off</span></span><br><span class="line"><span class="comment">#                             / _----=&gt; need-resched</span></span><br><span class="line"><span class="comment">#                            | / _---=&gt; hardirq/softirq</span></span><br><span class="line"><span class="comment">#                            || / _--=&gt; preempt-depth</span></span><br><span class="line"><span class="comment">#                            ||| /     delay</span></span><br><span class="line"><span class="comment">#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION</span></span><br><span class="line"><span class="comment">#              | |       |   ||||       |         |</span></span><br><span class="line">            main-25197 [001] d... 853041.215718: entry_add: (0x480220) arg1=81 arg2=87</span><br><span class="line">                  |                                  |           |         |      |</span><br><span class="line">                进程ID                             事件名    函数入口地址  参数a  参数b  </span><br><span class="line">            main-25197 [001] d... 853041.215746: exit_add: (0x4802b6 &lt;- 0x480220)    arg1=168</span><br><span class="line">|                 |                                  |         |           |             |</span><br><span class="line">                进程ID                             事件名    函数入口地址  函数返回地址  函数返回值                                              </span><br><span class="line">            main-25197 [001] d... 853042.216402: entry_add: (0x480220) arg1=47 arg2=59</span><br><span class="line">            main-25197 [001] d... 853042.216415: exit_add: (0x4802b6 &lt;- 0x480220) arg1=106</span><br><span class="line">            main-25197 [000] d... 853043.219246: entry_add: (0x480220) arg1=81 arg2=18</span><br><span class="line">            main-25197 [000] d... 853043.219254: exit_add: (0x4802b6 &lt;- 0x480220) arg1=99</span><br><span class="line">            main-25197 [000] d... 853044.221530: entry_add: (0x480220) arg1=25 arg2=40</span><br><span class="line">            main-25197 [000] d... 853044.221539: exit_add: (0x4802b6 &lt;- 0x480220) arg1=65</span><br><span class="line">            main-25197 [000] d... 853045.221832: entry_add: (0x480220) arg1=56 arg2=0</span><br><span class="line">            main-25197 [000] d... 853045.221842: exit_add: (0x4802b6 &lt;- 0x480220) arg1=56</span><br><span class="line">            main-25197 [000] d... 853050.230817: entry_add: (0x480220) arg1=37 arg2=6</span><br><span class="line">            main-25197 [000] d... 853050.230827: exit_add: (0x4802b6 &lt;- 0x480220) arg1=43</span><br><span class="line">            main-25197 [000] d... 853052.234467: entry_add: (0x480220) arg1=28 arg2=58</span><br><span class="line">            main-25197 [000] d... 853052.234476: exit_add: (0x4802b6 &lt;- 0x480220) arg1=86</span><br><span class="line">            main-25197 [000] d... 853053.234655: entry_add: (0x480220) arg1=47 arg2=47</span><br><span class="line">            main-25197 [000] d... 853053.234664: exit_add: (0x4802b6 &lt;- 0x480220) arg1=94</span><br><span class="line">            main-25197 [000] d... 853054.237878: entry_add: (0x480220) arg1=87 arg2=88</span><br><span class="line">            main-25197 [000] d... 853054.237887: exit_add: (0x4802b6 &lt;- 0x480220) arg1=175</span><br></pre></td></tr></table></figure><br>对比go程序的输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">81 + 87 = 168</span><br><span class="line">47 + 59 = 106</span><br><span class="line">81 + 18 = 99</span><br><span class="line">25 + 40 = 65</span><br><span class="line">56 + 0 = 56</span><br><span class="line">94 + 11 = 105</span><br><span class="line">62 + 89 = 151</span><br><span class="line">28 + 74 = 102</span><br><span class="line">11 + 45 = 56</span><br><span class="line">37 + 6 = 43</span><br><span class="line">95 + 66 = 161</span><br><span class="line">28 + 58 = 86</span><br><span class="line">47 + 47 = 94</span><br><span class="line">87 + 88 = 175</span><br></pre></td></tr></table></figure><br>可以看出来事件日志是能正确抓取每次调用及其参数和返回值的。接下来，我们通过gdb attach到该进程，可以看到main.add的入口处的指令被uprobe改成了int3指令了，这里我们可以注意到函数的入口地址为0x480220,确实和日志里面打印的entry_add: (0x480220)一致：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gdb -p `pgrep main`</span><br><span class="line">(gdb) info line main.add</span><br><span class="line">....</span><br><span class="line">(gdb) disas main.add</span><br><span class="line">...</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main.add:</span><br><span class="line">   0x0000000000480220 &lt;+0&gt;:     int3   </span><br><span class="line">   0x0000000000480221 &lt;+1&gt;:     sub    <span class="variable">$0x10</span>,%esp</span><br><span class="line">   0x0000000000480224 &lt;+4&gt;:     mov    %rbp,0x8(%rsp)</span><br><span class="line">   0x0000000000480229 &lt;+9&gt;:     lea    0x8(%rsp),%rbp</span><br><span class="line">   0x000000000048022e &lt;+14&gt;:    mov    %eax,0x18(%rsp)</span><br><span class="line">   0x0000000000480232 &lt;+18&gt;:    mov    %ebx,0x1c(%rsp)</span><br><span class="line">   0x0000000000480236 &lt;+22&gt;:    movl   <span class="variable">$0x0</span>,0x4(%rsp)</span><br><span class="line">   0x000000000048023e &lt;+30&gt;:    mov    0x18(%rsp),%eax</span><br><span class="line">   0x0000000000480242 &lt;+34&gt;:    add    0x1c(%rsp),%eax</span><br><span class="line">   0x0000000000480246 &lt;+38&gt;:    mov    %eax,0x4(%rsp)</span><br><span class="line">   0x000000000048024a &lt;+42&gt;:    mov    0x8(%rsp),%rbp</span><br><span class="line">   0x000000000048024f &lt;+47&gt;:    add    <span class="variable">$0x10</span>,%rsp</span><br><span class="line">   0x0000000000480253 &lt;+51&gt;:    ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br>但在这里我们确找不到exit_add: (0x4802b6 &lt;- 0x480220) 0x480220这个地址，由于add函数是由main函数调用的，因此我们猜想0x480220这个地址是不是在main函数中，于是我们再查看一下main函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas main.main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main.main:</span><br><span class="line">   .....</span><br><span class="line">   0x000000000048028f &lt;+47&gt;:    call   0x460860 &lt;math/rand.Int31n&gt;</span><br><span class="line">   0x0000000000480294 &lt;+52&gt;:    mov    %eax,0x34(%rsp)</span><br><span class="line">   0x0000000000480298 &lt;+56&gt;:    mov    <span class="variable">$0x64</span>,%eax</span><br><span class="line">   0x000000000048029d &lt;+61&gt;:    nopl   (%rax)</span><br><span class="line">   0x00000000004802a0 &lt;+64&gt;:    call   0x460860 &lt;math/rand.Int31n&gt;</span><br><span class="line">   0x00000000004802a5 &lt;+69&gt;:    mov    %eax,0x30(%rsp)</span><br><span class="line">   0x00000000004802a9 &lt;+73&gt;:    mov    0x34(%rsp),%ecx</span><br><span class="line">   0x00000000004802ad &lt;+77&gt;:    mov    %eax,%ebx</span><br><span class="line">   0x00000000004802af &lt;+79&gt;:    mov    %ecx,%eax</span><br><span class="line">   0x00000000004802b1 &lt;+81&gt;:    call   0x480220 &lt;main.add&gt;</span><br><span class="line">   0x00000000004802b6 &lt;+86&gt;:    mov    %eax,0x2c(%rsp)</span><br><span class="line">   ....</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br>确实我们也可以看到整个add函数调用的全过程，两个随机数被放入eax和ebx两个寄存器，函数返回值被放入栈中0x2c(%rsp)，而该指令正是 0x480220。<br>接下来我们关掉uprobe调试:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 0 &gt;  /sys/kernel/debug/tracing/events/uprobes/<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><br>接着我们再回去看add函数的入口处指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas main.add</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main.add:</span><br><span class="line">   0x0000000000480220 &lt;+0&gt;:     sub    <span class="variable">$0x10</span>,%rsp</span><br><span class="line">   0x0000000000480224 &lt;+4&gt;:     mov    %rbp,0x8(%rsp)</span><br><span class="line">   0x0000000000480229 &lt;+9&gt;:     lea    0x8(%rsp),%rbp</span><br><span class="line">   0x000000000048022e &lt;+14&gt;:    mov    %eax,0x18(%rsp)</span><br><span class="line">   0x0000000000480232 &lt;+18&gt;:    mov    %ebx,0x1c(%rsp)</span><br><span class="line">   0x0000000000480236 &lt;+22&gt;:    movl   <span class="variable">$0x0</span>,0x4(%rsp)</span><br><span class="line">   0x000000000048023e &lt;+30&gt;:    mov    0x18(%rsp),%eax</span><br><span class="line">   0x0000000000480242 &lt;+34&gt;:    add    0x1c(%rsp),%eax</span><br><span class="line">   0x0000000000480246 &lt;+38&gt;:    mov    %eax,0x4(%rsp)</span><br><span class="line">   0x000000000048024a &lt;+42&gt;:    mov    0x8(%rsp),%rbp</span><br><span class="line">   0x000000000048024f &lt;+47&gt;:    add    <span class="variable">$0x10</span>,%rsp</span><br><span class="line">   0x0000000000480253 &lt;+51&gt;:    ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br>此时发现该指令(0x480220)已被恢复成了正常的指令了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先准备以下go程序：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
      <category term="ebpf" scheme="http://yoursite.com/categories/ebpf/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="kprobe" scheme="http://yoursite.com/tags/kprobe/"/>
    
      <category term="ebpf" scheme="http://yoursite.com/tags/ebpf/"/>
    
  </entry>
  
  <entry>
    <title>Go defer opencoded</title>
    <link href="http://yoursite.com/2021/10/29/go%20defer%20opencoded/"/>
    <id>http://yoursite.com/2021/10/29/go defer opencoded/</id>
    <published>2021-10-29T15:56:40.000Z</published>
    <updated>2021-10-29T15:57:07.313Z</updated>
    
    <content type="html"><![CDATA[<p><a name="i3Xs0"></a></p><h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>在Go 1.13的时候，每当遇到defer语句，运行时就会生成一个_defer结构体对象（结构体保存着延迟函数的地址，参数及参数大小等信息），并将其插入 一个 defer链表的头部（该链表位于当前g上），如下图所示：<br /><img src="/image/deferchain.png" alt="image.png"><br />_defer结构体的完整定义：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A _defer holds an entry on the list of deferred calls.</span></span><br><span class="line"><span class="comment">// If you add a field here, add code to clear it in freedefer and deferProcStack</span></span><br><span class="line"><span class="comment">// This struct must match the code in cmd/compile/internal/reflectdata/reflect.go:deferstruct</span></span><br><span class="line"><span class="comment">// and cmd/compile/internal/gc/ssa.go:(*state).call.</span></span><br><span class="line"><span class="comment">// Some defers will be allocated on the stack and some on the heap.</span></span><br><span class="line"><span class="comment">// All defers are logically part of the stack, so write barriers to</span></span><br><span class="line"><span class="comment">// initialize them are not required. All defers must be manually scanned,</span></span><br><span class="line"><span class="comment">// and for heap defers, marked.</span></span><br><span class="line"><span class="keyword">type</span> _defer <span class="keyword">struct</span> &#123;</span><br><span class="line">siz     <span class="keyword">int32</span> <span class="comment">// includes both arguments and results</span></span><br><span class="line">started <span class="keyword">bool</span></span><br><span class="line">heap    <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// openDefer indicates that this _defer is for a frame with open-coded</span></span><br><span class="line"><span class="comment">// defers. We have only one defer record for the entire frame (which may</span></span><br><span class="line"><span class="comment">// currently have 0, 1, or more defers active).</span></span><br><span class="line">openDefer <span class="keyword">bool</span></span><br><span class="line">sp        <span class="keyword">uintptr</span>  <span class="comment">// sp at time of defer</span></span><br><span class="line">pc        <span class="keyword">uintptr</span>  <span class="comment">// pc at time of defer</span></span><br><span class="line">fn        *funcval <span class="comment">// can be nil for open-coded defers</span></span><br><span class="line">_panic    *_panic  <span class="comment">// panic that is running defer</span></span><br><span class="line">link      *_defer</span><br><span class="line"></span><br><span class="line"><span class="comment">// If openDefer is true, the fields below record values about the stack</span></span><br><span class="line"><span class="comment">// frame and associated function that has the open-coded defer(s). sp</span></span><br><span class="line"><span class="comment">// above will be the sp for the frame, and pc will be address of the</span></span><br><span class="line"><span class="comment">// deferreturn call in the function.</span></span><br><span class="line">fd   unsafe.Pointer <span class="comment">// funcdata for the function associated with the frame</span></span><br><span class="line">varp <span class="keyword">uintptr</span>        <span class="comment">// value of varp for the stack frame</span></span><br><span class="line"><span class="comment">// framepc is the current pc associated with the stack frame. Together,</span></span><br><span class="line"><span class="comment">// with sp above (which is the sp associated with the stack frame),</span></span><br><span class="line"><span class="comment">// framepc/sp can be used as pc/sp pair to continue a stack trace via</span></span><br><span class="line"><span class="comment">// gentraceback().</span></span><br><span class="line">framepc <span class="keyword">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在函数return处，编译器会插入 runtime.deferreturn函数，该函数会从链表头处开始依次执行defer结构体所关联的延迟函数（由于是从头部开始执行，最后的defer语句会最先执行）。由于通过结构体还原运行延迟函数的上下文信息，需要运行时在初期准备一系列延迟函数所需要的上下文环境（参数，调用栈等），因此性能会有一定的损耗（大约35ns，Go 1.12 的50ns，因为1.13将_defer结构体优化到了栈上保存），而如果将这些延迟调用函数在编译时内联展开的话，则只需要大约6ns的时间。因此，Go为了让defer特性不成为性能诟病，在Go 1.14进行了opencoded的优化。<br />​<br /><br><a name="A1Cgm"></a></p><h1 id="opencoded优化方案"><a href="#opencoded优化方案" class="headerlink" title="opencoded优化方案"></a>opencoded优化方案</h1><p>根据 <a href="https://github.com/golang/proposal/blob/master/design/34481-opencoded-defers.md">defer 开放代码优化提案</a> 这描述的，我们这里主要看下编译器是如何优化defer性能的。</p><ul><li>如果一个defer语句处于循环中的话，则无法进行优化。</li><li>如果defer语句处于条件判断中（如果在编译阶段能计算出条件值的话，则if语句会被直接优化掉）的话，则需要一个defer bit来对其进行标识</li></ul><p><br />条件标志位的逻辑如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> f1(a)</span><br><span class="line"><span class="keyword">if</span> cond &#123;</span><br><span class="line"> <span class="keyword">defer</span> f2(b)</span><br><span class="line">&#125;</span><br><span class="line">body...</span><br><span class="line">==========================================================================================================</span><br><span class="line">deferBits |= <span class="number">1</span>&lt;&lt;<span class="number">0</span></span><br><span class="line">tmpF1 = f1</span><br><span class="line">tmpA = a</span><br><span class="line"><span class="keyword">if</span> cond &#123;</span><br><span class="line"> deferBits |= <span class="number">1</span>&lt;&lt;<span class="number">1</span></span><br><span class="line"> tmpF2 = f2</span><br><span class="line"> tmpB = b</span><br><span class="line">&#125;</span><br><span class="line">body...</span><br><span class="line">exit:</span><br><span class="line"><span class="keyword">if</span> deferBits &amp; <span class="number">1</span>&lt;&lt;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line"> deferBits &amp;^= <span class="number">1</span>&lt;&lt;<span class="number">1</span></span><br><span class="line"> tmpF2(tmpB)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> deferBits &amp; <span class="number">1</span>&lt;&lt;<span class="number">0</span> != <span class="number">0</span> &#123;</span><br><span class="line"> deferBits &amp;^= <span class="number">1</span>&lt;&lt;<span class="number">0</span></span><br><span class="line"> tmpF1(tmpA)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>简单解释一下，就是在执行defer语句的时候，会将对应的标志位置1，并保存函数指针及其参数。当函数退出前，则会以倒序的方式检测标志位，如果标志为1，则表示需要执行相应的延迟函数，但在执行前，先把对应的标志位归0，然后再调用。<br />​<br /><br><a name="B5igp"></a></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="number">500</span> &gt; rand.Int()&#123;</span><br><span class="line">        <span class="keyword">defer</span> named()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="number">600</span> &gt; rand.Int()&#123;</span><br><span class="line">        <span class="keyword">defer</span> named()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="number">700</span> &gt; rand.Int()&#123;</span><br><span class="line">        <span class="keyword">defer</span> named()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">named</span><span class="params">()</span><span class="params">(result <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">  result = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备实验代码，将三个延迟函数放入三个条件语句中。<br />首先看一下不优化是什么情况<br />go buld -gcflags=”-N -l” main.go，-N表示禁止优化 -l表示禁止内联，然后通过gdb查看汇编代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function main.main:</span><br><span class="line">   0x00000000004633e0 &lt;+0&gt;:     lea    -0x88(%rsp),%r12</span><br><span class="line">   0x00000000004633e8 &lt;+8&gt;:     cmp    0x10(%r14),%r12</span><br><span class="line">   0x00000000004633ec &lt;+12&gt;:    jbe    0x46351f &lt;main.main+319&gt;</span><br><span class="line">   0x00000000004633f2 &lt;+18&gt;:    sub    $0x108,%rsp</span><br><span class="line">   0x00000000004633f9 &lt;+25&gt;:    mov    %rbp,0x100(%rsp)</span><br><span class="line">   0x0000000000463401 &lt;+33&gt;:    lea    0x100(%rsp),%rbp</span><br><span class="line">   0x0000000000463409 &lt;+41&gt;:    call   0x462e60 &lt;math/rand.Int&gt;</span><br><span class="line">   0x000000000046340e &lt;+46&gt;:    mov    %rax,0x8(%rsp)</span><br><span class="line">   0x0000000000463413 &lt;+51&gt;:    cmp    $0x1f4,%rax</span><br><span class="line">   0x0000000000463419 &lt;+57&gt;:    jl     0x46341d &lt;main.main+61&gt;</span><br><span class="line">   0x000000000046341b &lt;+59&gt;:    jmp    0x463463 &lt;main.main+131&gt;</span><br><span class="line">   0x000000000046341d &lt;+61&gt;:    movl   $0x0,0xb0(%rsp)</span><br><span class="line">   0x0000000000463428 &lt;+72&gt;:    lea    0x19c39(%rip),%rcx        # 0x47d068</span><br><span class="line">   0x000000000046342f &lt;+79&gt;:    mov    %rcx,0xc8(%rsp)</span><br><span class="line">   0x0000000000463437 &lt;+87&gt;:    lea    0xb0(%rsp),%rax</span><br><span class="line">   0x000000000046343f &lt;+95&gt;:    nop</span><br><span class="line">   0x0000000000463440 &lt;+96&gt;:    call   0x42b380 &lt;runtime.deferprocStack&gt;</span><br><span class="line">   0x0000000000463445 &lt;+101&gt;:   test   %eax,%eax</span><br><span class="line">   0x0000000000463447 &lt;+103&gt;:   jne    0x46344d &lt;main.main+109&gt;</span><br><span class="line">   0x0000000000463449 &lt;+105&gt;:   jmp    0x46344b &lt;main.main+107&gt;</span><br><span class="line">   0x000000000046344b &lt;+107&gt;:   jmp    0x463465 &lt;main.main+133&gt;</span><br><span class="line">   0x000000000046344d &lt;+109&gt;:   nop</span><br><span class="line">   0x000000000046344e &lt;+110&gt;:   call   0x42bfe0 &lt;runtime.deferreturn&gt;</span><br><span class="line">   0x0000000000463453 &lt;+115&gt;:   mov    0x100(%rsp),%rbp</span><br><span class="line">   0x000000000046345b &lt;+123&gt;:   add    $0x108,%rsp</span><br><span class="line">   0x0000000000463462 &lt;+130&gt;:   ret    </span><br><span class="line">   0x0000000000463463 &lt;+131&gt;:   jmp    0x463465 &lt;main.main+133&gt;</span><br><span class="line">   0x0000000000463465 &lt;+133&gt;:   call   0x462e60 &lt;math/rand.Int&gt;</span><br><span class="line">   0x000000000046346a &lt;+138&gt;:   mov    %rax,0x8(%rsp)</span><br><span class="line">   0x000000000046346f &lt;+143&gt;:   cmp    $0x258,%rax</span><br><span class="line">   0x0000000000463475 &lt;+149&gt;:   jl     0x463479 &lt;main.main+153&gt;</span><br><span class="line">   0x0000000000463477 &lt;+151&gt;:   jmp    0x4634b5 &lt;main.main+213&gt;</span><br><span class="line">   0x0000000000463479 &lt;+153&gt;:   movl   $0x0,0x60(%rsp)</span><br><span class="line">   0x0000000000463481 &lt;+161&gt;:   lea    0x19be8(%rip),%rcx        # 0x47d070</span><br><span class="line">   0x0000000000463488 &lt;+168&gt;:   mov    %rcx,0x78(%rsp)</span><br><span class="line">   0x000000000046348d &lt;+173&gt;:   lea    0x60(%rsp),%rax</span><br><span class="line">   0x0000000000463492 &lt;+178&gt;:   call   0x42b380 &lt;runtime.deferprocStack&gt;</span><br><span class="line">   0x0000000000463497 &lt;+183&gt;:   test   %eax,%eax</span><br><span class="line">   0x0000000000463499 &lt;+185&gt;:   jne    0x46349f &lt;main.main+191&gt;</span><br><span class="line">   0x000000000046349b &lt;+187&gt;:   jmp    0x46349d &lt;main.main+189&gt;</span><br><span class="line">   0x000000000046349d &lt;+189&gt;:   jmp    0x4634b7 &lt;main.main+215&gt;</span><br><span class="line">   0x000000000046349f &lt;+191&gt;:   nop</span><br><span class="line">   0x00000000004634a0 &lt;+192&gt;:   call   0x42bfe0 &lt;runtime.deferreturn&gt;</span><br><span class="line">   0x00000000004634a5 &lt;+197&gt;:   mov    0x100(%rsp),%rbp</span><br><span class="line">   0x00000000004634ad &lt;+205&gt;:   add    $0x108,%rsp</span><br><span class="line">   0x00000000004634b4 &lt;+212&gt;:   ret    </span><br><span class="line">   0x00000000004634b5 &lt;+213&gt;:   jmp    0x4634b7 &lt;main.main+215&gt;</span><br><span class="line">   0x00000000004634b7 &lt;+215&gt;:   call   0x462e60 &lt;math/rand.Int&gt;</span><br><span class="line">   0x00000000004634bc &lt;+220&gt;:   mov    %rax,0x8(%rsp)</span><br><span class="line">   0x00000000004634c1 &lt;+225&gt;:   cmp    $0x2bc,%rax</span><br><span class="line">   0x00000000004634c7 &lt;+231&gt;:   jl     0x4634cb &lt;main.main+235&gt;</span><br><span class="line">   0x00000000004634c9 &lt;+233&gt;:   jmp    0x463507 &lt;main.main+295&gt;</span><br><span class="line">   0x00000000004634cb &lt;+235&gt;:   movl   $0x0,0x10(%rsp)</span><br><span class="line">   0x00000000004634d3 &lt;+243&gt;:   lea    0x19b9e(%rip),%rcx        # 0x47d078</span><br><span class="line">   0x00000000004634da &lt;+250&gt;:   mov    %rcx,0x28(%rsp)</span><br><span class="line">   0x00000000004634df &lt;+255&gt;:   lea    0x10(%rsp),%rax</span><br><span class="line">   0x00000000004634e4 &lt;+260&gt;:   call   0x42b380 &lt;runtime.deferprocStack&gt;</span><br><span class="line">   0x00000000004634e9 &lt;+265&gt;:   test   %eax,%eax</span><br><span class="line">   0x00000000004634eb &lt;+267&gt;:   jne    0x4634f1 &lt;main.main+273&gt;</span><br><span class="line">   0x00000000004634ed &lt;+269&gt;:   jmp    0x4634ef &lt;main.main+271&gt;</span><br><span class="line">   0x00000000004634ef &lt;+271&gt;:   jmp    0x463509 &lt;main.main+297&gt;</span><br><span class="line">   0x00000000004634f1 &lt;+273&gt;:   nop</span><br><span class="line">   0x00000000004634f2 &lt;+274&gt;:   call   0x42bfe0 &lt;runtime.deferreturn&gt;</span><br><span class="line">   0x00000000004634f7 &lt;+279&gt;:   mov    0x100(%rsp),%rbp</span><br><span class="line">   0x00000000004634ff &lt;+287&gt;:   add    $0x108,%rsp</span><br><span class="line">   0x0000000000463506 &lt;+294&gt;:   ret    </span><br><span class="line">   0x0000000000463507 &lt;+295&gt;:   jmp    0x463509 &lt;main.main+297&gt;</span><br><span class="line">   0x0000000000463509 &lt;+297&gt;:   nop</span><br><span class="line">   0x000000000046350a &lt;+298&gt;:   call   0x42bfe0 &lt;runtime.deferreturn&gt;</span><br><span class="line">   0x000000000046350f &lt;+303&gt;:   mov    0x100(%rsp),%rbp</span><br><span class="line">   0x0000000000463517 &lt;+311&gt;:   add    $0x108,%rsp</span><br><span class="line">   0x000000000046351e &lt;+318&gt;:   ret    </span><br><span class="line">   0x000000000046351f &lt;+319&gt;:   nop</span><br><span class="line">   0x0000000000463520 &lt;+320&gt;:   call   0x4554c0 &lt;runtime.morestack_noctxt&gt;</span><br><span class="line">   0x0000000000463525 &lt;+325&gt;:   jmp    0x4633e0 &lt;main.main&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br>这里可以看到 96，178，260处均调用了runtime.deferprocStack,此函数将会构造_defer结构体并加入defer链表。<br />再来看一下优化后的代码是什么情况：go buld main.go，（不加 -gcflags=”-N -l”参数），优化后的汇编代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function main.main:</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 栈检查，不够则跳转至动态扩容处</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463300 &lt;+0&gt;:     cmp    0x10(%r14),%rsp</span><br><span class="line">   0x0000000000463304 &lt;+4&gt;:     jbe    0x46340f &lt;main.main+271&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> main函数栈帧40字节</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046330a &lt;+10&gt;:    sub    $0x30,%rsp                # 栈顶调整</span><br><span class="line">   0x000000000046330e &lt;+14&gt;:    mov    %rbp,0x28(%rsp)           # 保存栈底旧值</span><br><span class="line">   0x0000000000463313 &lt;+19&gt;:    lea    0x28(%rsp),%rbp           # 栈底调整</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463318 &lt;+24&gt;:    movups %xmm15,0x10(%rsp)</span><br><span class="line">   0x000000000046331e &lt;+30&gt;:    movups %xmm15,0x18(%rsp)</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463324 &lt;+36&gt;:    movb   $0x0,0x7(%rsp)            # 0x7（第8个字节）处，置0，该字节为 defer bit</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 第一个<span class="keyword">if</span>， <span class="keyword">if</span> 500 &gt; rand.Int(), 如果随机数大于等于500，则直接跳转至76行</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463329 &lt;+41&gt;:    call   0x462d80 &lt;math/rand.Int&gt;</span><br><span class="line">   0x000000000046332e &lt;+46&gt;:    mov    %rax,0x8(%rsp)</span><br><span class="line">   0x0000000000463333 &lt;+51&gt;:    cmp    $0x1f4,%rax</span><br><span class="line">   0x0000000000463339 &lt;+57&gt;:    jge    0x46334c &lt;main.main+76&gt;</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046333b &lt;+59&gt;:    lea    0x19d16(%rip),%rcx        # 0x47d058</span><br><span class="line">   0x0000000000463342 &lt;+66&gt;:    mov    %rcx,0x20(%rsp)</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 将defer bit 第一位置1</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463347 &lt;+71&gt;:    movb   $0x1,0x7(%rsp)            # 0x7处的值为  00000001</span><br><span class="line">   </span><br><span class="line">   第二个if, if 600 &gt; rand.Int()</span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046334c &lt;+76&gt;:    call   0x462d80 &lt;math/rand.Int&gt;</span><br><span class="line">   0x0000000000463351 &lt;+81&gt;:    mov    0x8(%rsp),%rcx            # 注意0x8留存的是第一个rand的结果（46行）</span><br><span class="line">   0x0000000000463356 &lt;+86&gt;:    cmp    $0x1f4,%rcx               # 这里又进行一次和（500）的比较，是不是还有优化的空间？</span><br><span class="line">   0x000000000046335d &lt;+93&gt;:    setl   %cl                       # 如果rcx小于500，则cl置为1</span><br><span class="line">   0x0000000000463360 &lt;+96&gt;:    cmp    $0x258,%rax               # 第二个rand的值和600比较</span><br><span class="line">   0x0000000000463366 &lt;+102&gt;:   jge    0x46337b &lt;main.main+123&gt;  # 如果大于等于600则直接跳至123行</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463368 &lt;+104&gt;:   lea    0x19cf1(%rip),%rax        # 0x47d060</span><br><span class="line">   0x000000000046336f &lt;+111&gt;:   mov    %rax,0x18(%rsp)</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 将第二个bit位置1</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463374 &lt;+116&gt;:   or     $0x2,%ecx                 # exc = 00000010 | ecx</span><br><span class="line">   0x0000000000463377 &lt;+119&gt;:   mov    %cl,0x7(%rsp)             # 0x7 存储defer bit</span><br><span class="line">   0x000000000046337b &lt;+123&gt;:   mov    %cl,0x6(%rsp)             # 0x6 存储defer bit</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 第三个<span class="keyword">if</span>,  <span class="keyword">if</span> 700 &gt; rand.Int()</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046337f &lt;+127&gt;:   nop</span><br><span class="line">   0x0000000000463380 &lt;+128&gt;:   call   0x462d80 &lt;math/rand.Int&gt;</span><br><span class="line">   0x0000000000463385 &lt;+133&gt;:   cmp    $0x2bc,%rax</span><br><span class="line">   0x000000000046338b &lt;+139&gt;:   jge    0x4633a7 &lt;main.main+167&gt;</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046338d &lt;+141&gt;:   lea    0x19cd4(%rip),%rax        # 0x47d068</span><br><span class="line">   0x0000000000463394 &lt;+148&gt;:   mov    %rax,0x10(%rsp)</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 将第三个bit位置1</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463399 &lt;+153&gt;:   movzbl 0x6(%rsp),%ecx            # 移动8(b)位至32(l)位，高24位用0(z:zero)补齐</span><br><span class="line">   0x000000000046339e &lt;+158&gt;:   or     $0x4,%ecx                 # ecx = 00000100 | ecx</span><br><span class="line">   0x00000000004633a1 &lt;+161&gt;:   mov    %cl,0x7(%rsp)             # 此时 0x7保存着defer bit标识着三个if都进行了处理了</span><br><span class="line">   0x00000000004633a5 &lt;+165&gt;:   jmp    0x4633ac &lt;main.main+172&gt;</span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633a7 &lt;+167&gt;:   movzbl 0x6(%rsp),%ecx            # 移动8(b)位至32(l)位，高24位用0(z:zero)补齐</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 如果第3个bit为0，则跳过dwrap·3的调用</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633ac &lt;+172&gt;:   test   $0x4,%cl                  </span><br><span class="line">   0x00000000004633af &lt;+175&gt;:   je     0x4633ca &lt;main.main+202&gt;  </span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 调用main.main·dwrap·3</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633b1 &lt;+177&gt;:   and    $0xfffffffb,%ecx          # ecx = 1011 &amp; ecx  执行之前先将第3位置0</span><br><span class="line">   0x00000000004633b4 &lt;+180&gt;:   mov    %cl,0x6(%rsp)             # 0x6 保存 defer bit</span><br><span class="line">   0x00000000004633b8 &lt;+184&gt;:   mov    %cl,0x7(%rsp)             # 0x7 保存 defer bit  </span><br><span class="line">   0x00000000004633bc &lt;+188&gt;:   nopl   0x0(%rax)        </span><br><span class="line">   0x00000000004633c0 &lt;+192&gt;:   call   0x463500 &lt;main.main·dwrap·3&gt;</span><br><span class="line">   0x00000000004633c5 &lt;+197&gt;:   movzbl 0x6(%rsp),%ecx</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 如果第2个bit为0，则跳过dwrap·2的调用</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633ca &lt;+202&gt;:   test   $0x2,%cl</span><br><span class="line">   0x00000000004633cd &lt;+205&gt;:   je     0x4633e4 &lt;main.main+228&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 调用main.main·dwrap·2</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633cf &lt;+207&gt;:   and    $0xfffffffd,%ecx          # ecx = 1101 &amp; ecx  执行之前先将第2位置0</span><br><span class="line">   0x00000000004633d2 &lt;+210&gt;:   mov    %cl,0x6(%rsp)             # 0x6 保存 defer bit </span><br><span class="line">   0x00000000004633d6 &lt;+214&gt;:   mov    %cl,0x7(%rsp)             # 0x7 保存 defer bit</span><br><span class="line">   0x00000000004633da &lt;+218&gt;:   call   0x4634a0 &lt;main.main·dwrap·2&gt;</span><br><span class="line">   0x00000000004633df &lt;+223&gt;:   movzbl 0x6(%rsp),%ecx</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 如果第1个bit为0，则跳过dwrap·1的调用</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633e4 &lt;+228&gt;:   test   $0x1,%cl</span><br><span class="line">   0x00000000004633e7 &lt;+231&gt;:   je     0x4633f5 &lt;main.main+245&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 调用main.main·dwrap·1</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633e9 &lt;+233&gt;:   and    $0xfffffffe,%ecx           # ecx = 1110 &amp; ecx  执行之前先将第1位置0</span><br><span class="line">   0x00000000004633ec &lt;+236&gt;:   mov    %cl,0x7(%rsp)              # 0x7 保存 defer bit</span><br><span class="line">   0x00000000004633f0 &lt;+240&gt;:   call   0x463440 &lt;main.main·dwrap·1&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> main函数返回</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633f5 &lt;+245&gt;:   mov    0x28(%rsp),%rbp            # 栈底调整     </span><br><span class="line">   0x00000000004633fa &lt;+250&gt;:   add    $0x30,%rsp                 # 栈顶调整</span><br><span class="line">   0x00000000004633fe &lt;+254&gt;:   ret    </span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x00000000004633ff &lt;+255&gt;:   nop</span><br><span class="line">   0x0000000000463400 &lt;+256&gt;:   call   0x42bf20 &lt;runtime.deferreturn&gt;</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463405 &lt;+261&gt;:   mov    0x28(%rsp),%rbp</span><br><span class="line">   0x000000000046340a &lt;+266&gt;:   add    $0x30,%rsp</span><br><span class="line">   0x000000000046340e &lt;+270&gt;:   ret</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046340f &lt;+271&gt;:   call   0x455400 &lt;runtime.morestack_noctxt&gt;</span><br><span class="line">   0x0000000000463414 &lt;+276&gt;:   jmp    0x463300 &lt;main.main&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br>我们看一下main函数的执行逻辑，从以上代码可以看出，在0x7这个位置的字节上，保存的应该就是我们提到的defer bit标志数据。这里我们并没有看到runtime.deferproc或者是runtime.deferprocStack调用，表明延迟函数确实被编译时展开了。而每个条件判断成立时，则会设置相应的标志位，我们以第二个条件为例：<br />​<br /><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000463360 &lt;+96&gt;:    cmp    $0x258,%rax               # 第二个rand的值和600比较</span><br><span class="line">0x0000000000463366 &lt;+102&gt;:   jge    0x46337b &lt;main.main+123&gt;  # 如果大于等于600则直接跳至123行</span><br></pre></td></tr></table></figure><br>可以看到如果随机数大于等于600时，则会跳过第二个bit的设置：(116行)，则该位的值还是0<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000463374 &lt;+116&gt;:   or     $0x2,%ecx                 # exc = 00000010 | ecx</span><br><span class="line">0x0000000000463377 &lt;+119&gt;:   mov    %cl,0x7(%rsp)             # 0x7 存储defer bit</span><br><span class="line">0x000000000046337b &lt;+123&gt;:   mov    %cl,0x6(%rsp)             # 0x6 存储defer bit</span><br></pre></td></tr></table></figure></p><blockquote><p> 疑问：为啥这里还要有一个0x6来保存一下defer bit？</p></blockquote><p>而接下来，在函数ret前，被插入的代码则是以倒序的方式检测每个标志位 0x4-&gt;0x2-&gt;0x1, 看下0x2标志位是如何检测的：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x00000000004633ca &lt;+202&gt;:   test   $0x2,%cl</span><br><span class="line">0x00000000004633cd &lt;+205&gt;:   je     0x4633e4 &lt;main.main+228&gt;</span><br></pre></td></tr></table></figure><br>此时cl保存着defer bit，test指令将两个操作数执行逻辑与操作，如果cl的第二位为1，则zf寄存器则为0，则je条件不成立，则不会进行跳转，因为接下来的指令正是对第二个延迟函数的调用：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x00000000004633cf &lt;+207&gt;:   and    $0xfffffffd,%ecx          # ecx = 1101 &amp; ecx  执行之前先将第2位置0</span><br><span class="line">0x00000000004633d2 &lt;+210&gt;:   mov    %cl,0x6(%rsp)             # 0x6 保存 defer bit </span><br><span class="line">0x00000000004633d6 &lt;+214&gt;:   mov    %cl,0x7(%rsp)             # 0x7 保存 defer bit</span><br><span class="line">0x00000000004633da &lt;+218&gt;:   call   0x4634a0 &lt;main.main·dwrap·2&gt;</span><br><span class="line">0x00000000004633df &lt;+223&gt;:   movzbl 0x6(%rsp),%ecx</span><br></pre></td></tr></table></figure><br>在真正的调用之前，会先将第二个bit置成0。然后在218处调用main.main·dwrap·2函数，我们再展开该函数：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function main.main·dwrap·2:</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 栈检查，不够则跳转至动态扩容处</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463440 &lt;+0&gt;:     cmp    0x10(%r14),%rsp</span><br><span class="line">   0x0000000000463444 &lt;+4&gt;:     jbe    0x46346e &lt;main.main·dwrap·2+46&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> main.main·dwrap·2 栈帧 0字节</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463446 &lt;+6&gt;:     sub    $0x8,%rsp                   # 调整栈顶</span><br><span class="line">   0x000000000046344a &lt;+10&gt;:    mov    %rbp,(%rsp)                 # 保留栈底旧值 </span><br><span class="line">   0x000000000046344e &lt;+14&gt;:    lea    (%rsp),%rbp                 # 栈底调整  </span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463452 &lt;+18&gt;:    mov    0x20(%r14),%r12</span><br><span class="line">   0x0000000000463456 &lt;+22&gt;:    test   %r12,%r12                         </span><br><span class="line">   0x0000000000463459 &lt;+25&gt;:    jne    0x463475 &lt;main.main·dwrap·2+53&gt;  # r12 &gt; 0</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046345b &lt;+27&gt;:    nopl   0x0(%rax,%rax,1)</span><br><span class="line">   0x0000000000463460 &lt;+32&gt;:    call   0x463420 &lt;main.named&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 回收  main.main·dwrap·2 栈帧</span></span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463465 &lt;+37&gt;:    mov    (%rsp),%rbp</span><br><span class="line">   0x0000000000463469 &lt;+41&gt;:    add    $0x8,%rsp</span><br><span class="line">   0x000000000046346d &lt;+45&gt;:    ret    </span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x000000000046346e &lt;+46&gt;:    call   0x455400 &lt;runtime.morestack_noctxt&gt;</span><br><span class="line">   0x0000000000463473 &lt;+51&gt;:    jmp    0x463440 &lt;main.main·dwrap·2&gt;</span><br><span class="line">   </span><br><span class="line">   ==============================================================================================</span><br><span class="line">   0x0000000000463475 &lt;+53&gt;:    lea    0x10(%rsp),%r13</span><br><span class="line">   0x000000000046347a &lt;+58&gt;:    nopw   0x0(%rax,%rax,1)</span><br><span class="line">   0x0000000000463480 &lt;+64&gt;:    cmp    %r13,(%r12)    </span><br><span class="line">   0x0000000000463484 &lt;+68&gt;:    jne    0x46345b &lt;main.main·dwrap·2+27&gt;</span><br><span class="line">   0x0000000000463486 &lt;+70&gt;:    mov    %rsp,(%r12)</span><br><span class="line">   0x000000000046348a &lt;+74&gt;:    jmp    0x46345b &lt;main.main·dwrap·2+27&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br>可以看到，无论何种情况，都会最终调用真正的main.named这个函数</p><ul><li>25 -&gt; 53 -&gt; 68 -&gt; 27 -&gt; 32(main.named)</li><li>25 -&gt; 53 -&gt; 74 -&gt; 27 -&gt; 32(main.named)</li><li>25 -&gt; 27 -&gt; 32(main.named)</li></ul><p>最后展开main.named，看到确实是 return 1(通过eax寄存器返回)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function main.named:</span><br><span class="line">   0x0000000000463420 &lt;+0&gt;:     mov    $0x1,%eax</span><br><span class="line">   0x0000000000463425 &lt;+5&gt;:     ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><br><a name="PRBgE"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a name="cdYpa"></a></p><h3 id="标志位的变化"><a href="#标志位的变化" class="headerlink" title="标志位的变化"></a>标志位的变化</h3><p>最后我们来看一下defer bit标志位数据变化的情况，我们假设三个if条件全部成立：<br />0000 -&gt; rand.Int() -&gt; 0001 -&gt; rand.Int() -&gt; 0011 -&gt; rand.Int() -&gt; 0111 -&gt; named() -&gt; 0011 -&gt; named() -&gt; 0001 -&gt; named() -&gt; 0000<br><a name="sklpE"></a></p><h3 id="免去defer链表递归调用"><a href="#免去defer链表递归调用" class="headerlink" title="免去defer链表递归调用"></a>免去defer链表递归调用</h3><p>从实验代码可以看出，优化后的代码并没有出现runtime.deferproc或runtime.deferprocStack调用，最后函数返回时，也跳过了runtime.deferreturn的调用，我们知道一旦进入defer链表的递归调用（runtime.jmpdefer 尾递归）后，因为维护延迟函数的上下文环境需要花费非常多的指令，（defer结构体的创建和销毁等操作）这也是早期Go版本的defer特性被人诟病性能低下的重要原因。<br />​</p><p>经过开放代码优化后，我们可以看到这和直接调用函数的性能相差无几（多了标志位的维护），当然这里我们还可以看到deferbit只有一个字节也就是8位，因此我们最多支持8个defer语句，超过8将会回到defer链表模式（循环中的defer无法优化）。<br /><br><br />（实验环境go1.17.2 linux/amd64）<br />                                                                                                                  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;i3Xs0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;在Go 1.13的时候，每当遇到defer语句，运行时就会生成一个_defer结构体
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>被“饿死的”goroutine</title>
    <link href="http://yoursite.com/2019/08/17/talk-about-goroutine/"/>
    <id>http://yoursite.com/2019/08/17/talk-about-goroutine/</id>
    <published>2019-08-17T02:18:44.000Z</published>
    <updated>2019-08-20T05:58:28.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go的诞生"><a href="#Go的诞生" class="headerlink" title="Go的诞生"></a>Go的诞生</h1><blockquote><p>go语言自诞生（2007年设计、2009年发布Go1）以来，凭借其高并发的特性开始逐渐进入大家的视野，接着在云原生领域大行其道，其中最著名的代表作便是大名鼎鼎的<a href="https://github.com/kubernetes/kubernetes">k8s</a>和<a href="https://github.com/moby/moby">docker</a>。伴随着其在开源社区的巨大成功，Go成为了时下编程界最耀眼的明星。当然Go的成功绝非偶然，曾经听过这么一个笑话，Go是在C++的编译过程中诞生的，其意思是吐槽C++繁琐而漫长的编译过程。Overall Simplicity 全面的简单。这是Go自诞生以来一贯秉承的价值观。Go语言价值观形成是与Go的初期设计者不无关系的，可以说Go最初设计者主导了Go语言价值观的形成！这就好比一个企业的最初创始人缔造企业价值观和文化一样</p></blockquote><div align="center"><br><img src="/image/talk-about-goroutine/GPT.png" alt="designer"><br></div><blockquote><p>图中是Go的三位最初设计者，从左到右分别是罗伯特·格瑞史莫、罗伯·派克和肯·汤普逊。Go初期的所有features adoption是需要三巨头达成一致才行。三位设计者有一个共同特征，那就是深受Unix文化熏陶。罗伯特·格瑞史莫参与设计了Java的HotSpot虚拟机和Chrome浏览器的JavaScript V8引擎，罗博·派克在大名鼎鼎的bell lab侵淫多年，参与了Plan9操作系统、C编译器以及多种语言编译器的设计和实现，肯·汤普逊更是图灵奖得主、Unix之父。关于Unix设计哲学阐述最好的一本书莫过于埃瑞克.理曼德(Eric S. Raymond)的《UNIX编程艺术》了，该书中列举了很多unix的哲学条目，比如：简单、模块化、正交、组合、pipe、功能短小且聚焦等。三位设计者将Unix设计哲学应用到了Go语言的设计当中，因此你或多或少都能在Go的设计和应用中找到这些哲学的影子。</p></blockquote><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p>我们都知道计算机CPU的处理速度远高于其它的IO设备（磁盘，网卡等），假设我们一台计算机上面只有一个程序在执行，如果这个程序是计算密集型的程序（假设一个算法要执行一个月后才能得出结果），那么这台计算机没有操作系统也能很好地利用CPU资源，但现实是这种类型的应用很少，大部分的应用只需要少量的计算资源和大量的IO操作，那么这种情况下我们再让计算机只跑一个程序，就会造成计算资源的严重浪费。为了解决这种浪费，人们就引入进程，为了管理进程，人们又设计了操作系统。</p></blockquote><blockquote><p>要认识进程我们要先从大家写的程序开始，我们编写代码，然后进行编译链接打包，成为一个程序，程序是存在计算机的磁盘中的一个文件而已。当程序被执行起来，它就会从磁盘上被加载进内存中，计算机为了运行这段程序，就会在CPU设置各种寄存器的值，申请堆栈等，像这样一个程序运行起来后执行环境的总和，就是一个进程。为了提高CPU的利用率，我们会启动很多的进程，操作系统就是用来管理这些进程的。前面说到很多进程都要等待IO设备，那么这样的进程就会被操作系统挂起，进程从运行状态到被挂起，然后换成另一个进程获得CPU的执行权，这样的一个过程就叫作进程的上下文切换，这里的进程上下文实际上就是指运行进程所需的CPU寄存器状态和内存状态。进行上下文切换本身也是要消耗一定的CPU资源的。</p></blockquote><div align="center"><br><img src="/image/talk-about-goroutine/cpu_time.png" alt="designer"><br></div><h2 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h2><blockquote><p>一般来说，操作系统的内存会被划分为两块：内核空间和用户空间。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响。当进程运行在内核空间时就处于内核态，当进程运行在用户空间时就处于用户态。</p></blockquote><div align="center"><br><img src="/image/talk-about-goroutine/userkernel.png" alt="designer"><br></div><blockquote><p>进程用户态和内核态的切换也是要消耗一定资源的，但相对进程上下文切换来说，这部分资源的消耗要小得多。进程一般通过系统调用，或者中断来进入内核空间。</p></blockquote><h2 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h2><blockquote><p>前面提到为了提高CPU资源的利用率，我们需要进行进程切换。linux是一个基于时间片的分时操作系统，所谓时间片就是操作系统给每个进程分配一定的时间配额，只要进程获得的cpu资源超过了该时间配额的值，该进程就会被换出去，让其它进程有执行的机会，这样做的好处是让系统中的每个进程都有机会执行而不至于被“饿死”。但是本身“判断某个进程时间片是否用完”这个过程也是一段代码，它也是要消耗CPU资源的，换一种说法它也是要被执行起来才能起到调度的作用，而且这个过程还要每隔一段时间就被执行一下，我们将这个过程称作“检查-调度”。一般要实现这个功能有两种做法，一种是主动式的，一种是被动式的。</p></blockquote><h3 id="主动式"><a href="#主动式" class="headerlink" title="主动式"></a>主动式</h3><blockquote><p>主动式就是将你的进程代码和“检查-调度”写到一块去，比如我们可以每运行n个指令后去检查一下时间片，如果还没到时间，我们再运行n个指令，然后再去检查一下。</p></blockquote><h3 id="被动式"><a href="#被动式" class="headerlink" title="被动式"></a>被动式</h3><blockquote><p>被动式的就是我们将“检查-调度”单独放到一个地方，然后通过某种机制通知CPU去运行这部分代码。这种方式也是linux操作系统使用的方式（时钟中断）。时钟中断打断CPU，中断处理程序调用“检查-调度”代码。</p></blockquote><h2 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h2><blockquote><p>了解上面的时间片概念以后，抢占就是当一个进程的时间片还没运行完，这时候有一个更高优先级的进程需要立即被执行，我们强行进行进程切换，使得高优先级的进程得以运行，这个过程就叫作抢占。抢占还分为内核抢占和用户抢占，当进程在内核态被抢占就称为内核抢占。</p></blockquote><h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><blockquote><p>线程的实现模型主要有3种：内核级线程模型、用户级线程模型和混合型线程模型。它们之间最大的区别在于线程与内核调度实体KSE(Kernel Scheduling Entity)之间的对应关系上。所谓的内核调度实体KSE 就是指可以被操作系统内核调度器调度的对象实体，有些地方也称其为内核级线程，是操作系统内核的最小调度单元。在linux中，这样一个KSE就是一个轻量级的进程（通过clone系统调用创建出来的）。</p></blockquote><h2 id="内核级线程模型"><a href="#内核级线程模型" class="headerlink" title="内核级线程模型"></a>内核级线程模型</h2><blockquote><p>用户线程与KSE是1对1关系(1:1)。大部分编程语言的线程库(如linux的pthread，Java的java.lang.Thread，C++11的std::thread等等)都是对操作系统的线程（内核级线程）的一层封装，创建出来的每个线程与一个不同的KSE静态关联，因此其调度完全由OS调度器来做。这种方式实现简单，直接借助OS提供的线程能力，并且不同用户线程之间一般也不会相互影响。但其创建，销毁以及多个线程之间的上下文切换等操作都是直接由OS层面亲自来做，在需要使用大量线程的场景下对OS的性能影响会很大。</p></blockquote><h2 id="用户级线程模型"><a href="#用户级线程模型" class="headerlink" title="用户级线程模型"></a>用户级线程模型</h2><blockquote><p>用户线程与KSE是多对1关系(M:1)，这种线程的创建，销毁以及多个线程之间的协调等操作都是由用户自己实现的线程库来负责，对OS内核透明，一个进程中所有创建的线程都与同一个KSE在运行时动态关联。现在有许多语言实现的 协程 基本上都属于这种方式。这种实现方式相比内核级线程可以做的很轻量级，对系统资源的消耗会小很多，因此可以创建的数量与上下文切换所花费的代价也会小得多。但该模型有个致命的缺点，如果我们在某个用户线程上调用阻塞式系统调用(如用阻塞方式read网络IO)，那么一旦KSE因阻塞被内核调度出CPU的话，剩下的所有对应的用户线程全都会变为阻塞状态（整个进程挂起）。<br>所以这些语言的协程库会把自己一些阻塞的操作重新封装为完全的非阻塞形式，然后在以前要阻塞的点上，主动让出自己，并通过某种方式通知或唤醒其他待执行的用户线程在该KSE上运行，从而避免了内核调度器由于KSE阻塞而做上下文切换，这样整个进程也不会被阻塞了。</p></blockquote><h2 id="混合型线程模型"><a href="#混合型线程模型" class="headerlink" title="混合型线程模型"></a>混合型线程模型</h2><blockquote><p>用户线程与KSE是多对多关系(M:N), 这种实现综合了前两种模型的优点，为一个进程中创建多个KSE，并且线程可以与不同的KSE在运行时进行动态关联，当某个KSE由于其上工作的线程的阻塞操作被内核调度出CPU时，当前与其关联的其余用户线程可以重新与其他KSE建立关联关系。当然这种动态关联机制的实现很复杂，也需要用户自己去实现，这算是它的一个缺点吧。Go语言中的并发就是使用的这种实现方式，Go为了实现该模型自己实现了一个运行时调度器来负责Go中的”线程”与KSE的动态关联。此模型有时也被称为 两级线程模型，即用户调度器实现用户线程到KSE的“调度”，内核调度器实现KSE到CPU上的调度。</p></blockquote><h1 id="GO-Routine模型"><a href="#GO-Routine模型" class="headerlink" title="GO Routine模型"></a>GO Routine模型</h1><div align="center"><br><img src="/image/talk-about-goroutine/go-routine-modle.png" alt="designer"><br></div><blockquote><ul><li>G：Goroutine的简称，上面用go关键字加函数调用的代码就是创建了一个G对象，是对一个要并发执行的任务的封装，也可以称作用户态线程。属于用户级资源，对OS透明，具备轻量级，可以大量创建，上下文切换成本低等特点。</li><li>M：Machine的简称，在linux平台上是用clone系统调用创建的，其与用linux pthread库创建出来的线程本质上是一样的，都是利用系统调用创建出来的OS线程实体。M的作用就是执行G中包装的并发任务。Go运行时系统中的调度器的主要职责就是将G公平合理的安排到多个M上去执行。其属于OS资源，可创建的数量上也受限了OS，通常情况下G的数量都多于活跃的M的。</li><li>P：Processor的简称，逻辑处理器，主要作用是管理G对象（每个P都有一个G队列），并为G在M上的运行提供本地化资源。</li></ul></blockquote><h2 id="用户态调度"><a href="#用户态调度" class="headerlink" title="用户态调度"></a>用户态调度</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">a[i]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码将P设置为1个，然后启动10个goroutine，每个goroutine对数组里相应的索引位置进行递增操作。没写过go的同学一般会认为这段程序运行不会有什么问题，但实际上这段程序的main函数运行到time.Sleep之后，就再也没机会运行了。这也是goroutine在用户态调度所存在的问题：用户态调度器只能“主动式”的运行“检查-调度”代码，这是因为用户态没有类似中断这种可以打断CPU的能力，因而它没办法采用“被动式的”方法。Go运行时，将“检查-调度”代码放在了每次函数调用之前，我们观察这段代码，每个goroutine里面都是一个无限循环的内存操作而已，不存在函数调用，因而，“检查-调度”代码永远都没有机会被执行，所以其它的goroutine都被活活“饿死了”。要解开这个问题，我们需要“主动的”调用“检查-调度”代码，在go里面也就是runtime.Gosched()，在for循环里面加上这行代码就可以解决这个问题。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然goroutine很强大，但凡事都是有利有弊，我们只有深入了解其背后的机理，才能趋利避害，既能充分利用其高效的特性，又能避开其埋下的一些坑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Go的诞生&quot;&gt;&lt;a href=&quot;#Go的诞生&quot; class=&quot;headerlink&quot; title=&quot;Go的诞生&quot;&gt;&lt;/a&gt;Go的诞生&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;go语言自诞生（2007年设计、2009年发布Go1）以来，凭借其高并发的特性开始逐渐进入
      
    
    </summary>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>helm安装</title>
    <link href="http://yoursite.com/2019/02/12/helm-install/"/>
    <id>http://yoursite.com/2019/02/12/helm-install/</id>
    <published>2019-02-12T08:07:10.000Z</published>
    <updated>2019-02-12T11:43:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h2><blockquote><p>Helm的安装分为两部分：客户端（helm）和服务端（Tiller）</p></blockquote><h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><blockquote><ol><li><a href="https://github.com/helm/helm/releases">在此选择你需要的版本进行下载</a></li><li>解压：tar -zxvf  helm-v2.0.0-linux-amd64.tgz</li><li>将二进制文件移至目标路径： mv linux-amd64/helm /usr/local/bin/helm</li></ol></blockquote><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ helm init --upgrade</span><br></pre></td></tr></table></figure><p>由于默认情况下，helm会拉取gcr.io/kubernetes-helm/tiller镜像，并且会以<a href="https://kubernetes-charts.storage.googleapis.com">https://kubernetes-charts.storage.googleapis.com</a> 作为stable的repository，国内无法直接访问，可用阿里云代替<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.10.0 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="给Tiller授权"><a href="#给Tiller授权" class="headerlink" title="给Tiller授权"></a>给Tiller授权</h1><blockquote><p>因为 Helm 的服务端 Tiller 是一个部署在 Kubernetes 中 Kube-System Namespace 下 的 Deployment，它会去连接 Kube-Api 在 Kubernetes 里创建和删除应用。<br>而从 Kubernetes 1.6 版本开始，API Server 启用了 RBAC 授权。目前的 Tiller 部署时默认没有定义授权的 ServiceAccount，这会导致访问 API Server 时被拒绝。所以我们需要明确为 Tiller 部署添加授权。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create serviceaccount --namespace kube-system tiller</span><br><span class="line">$ kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span><br><span class="line">$ kubectl patch deploy --namespace kube-system tiller-deploy -p <span class="string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Helm&quot;&gt;&lt;a href=&quot;#安装Helm&quot; class=&quot;headerlink&quot; title=&quot;安装Helm&quot;&gt;&lt;/a&gt;安装Helm&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Helm的安装分为两部分：客户端（helm）和服务端（Tiller）&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>谁是Docker容器的init(1)进程</title>
    <link href="http://yoursite.com/2019/01/30/docker-init(1)/"/>
    <id>http://yoursite.com/2019/01/30/docker-init(1)/</id>
    <published>2019-01-30T15:06:29.000Z</published>
    <updated>2019-02-12T06:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是PID-1"><a href="#什么是PID-1" class="headerlink" title="什么是PID 1"></a>什么是PID 1</h1><blockquote><p>在Linux操作系统中，当内核初始化完毕之后，会启动一个init进程，这个进程是整个操作系统的第一个用户进程，所以它的进程ID为1，也就是我们常说的PID1进程。在这之后，所有的用户态进程都是该进程的后代进程，由此我们可以看出，整个系统的用户进程，是一棵由init进程作为根的进程树。</p></blockquote><blockquote><p>init进程有一个非常厉害的地方，就是SIGKILL信号对它无效。很显然，如果我们将一棵树的树根砍了，那么这棵树就会分解成很多棵子树，这样的最终结果是导致整个操作系统进程杂乱无章，无法管理。</p></blockquote><blockquote><p>PID 1进程的发展也是一段非常有趣的过程，从最早的sysvinit,到upstart,再到systemd。其中systemd还在linux社区引起了不小的争议，systemd作者Lennart还在 <a href="https://plus.google.com/+LennartPoetteringTheOneAndOnly/posts/J2TZrTvu7vd">Google Plus 上发了贴子</a>，喜欢八卦的同学可以前往一读。</p></blockquote><blockquote><p>那么这个PID 1进程在操作系统的整个生命周期中，到底起了什么重要的作用呢？首先我们先来了解以下几个概念：</p></blockquote><h2 id="进程表项"><a href="#进程表项" class="headerlink" title="进程表项"></a>进程表项</h2><blockquote><p>linux内核程序通过进程表对进程进行管理, 每个进程在进程表中占有一项，称为进程表项，它记录了进程的状态，打开的文件描述符等等一系统信息。当一个进程结束了运行或在半途中终止了运行，那么内核就需要释放该进程所占用的系统资源。这包括进程运行时打开的文件，申请的内存等。但是，这里要注意的是，进程表项并没有随着进程的退出而被清除，它会一直占用内核的内存。为什么会有这么奇怪的行为呢？这是因为在某些程序中，我们必须明确地知道进程的退出状态等信息，而这些信息的获取是由父进程调用wait/waitpid而获取的。设想这样一种场景，如果子进程在退出的时候直接清除文件表项的话，那么父进程就很可能没有地方获取进程的退出状态了，因此操作系统就会将文件表项一直保留至wait/waitpid系统调用结束。</p></blockquote><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><blockquote><p>僵尸进程指的是：进程退出后，到其父进程还未对其调用wait/waitpid之间的这段时间所处的状态。一般来说，这种状态持续的时间很短，所以我们一般很难在系统中捕捉到。但是，一些粗心的程序员可能会忘记调用wait/waitpid，或者由于某种原因未执行该调用等等，那么这个时候就会出现长期驻留的僵尸进程了。如果大量的产生僵尸进程，其进程号就会一直被占用，可能导致系统不能产生新的进程。</p></blockquote><blockquote><p>聪明的读者可能立马会想到一种情况，就是如果父进程先于子进结束，那么是不是就没有人负责这个子进程的资源清理工作了，那我们的系统岂不是到处都是僵尸进程?事实上操作系统设计人员早就想到了这个问题，这也是我们的PID 1进程最重要的职责。</p></blockquote><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><blockquote><p>父进程先于子进程退出，那么子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)接管，并由init进程对它完成状态收集(wait/waitpid)工作。</p></blockquote><blockquote><p>从这里我们可以看出，PID 1负责清理那些被抛弃的进程所留下来的痕迹，有效的回收的系统资源，保证系统长时间稳定的运行，可谓是功不可没。在理解了它的重要性之后，我们今天主要探讨一下在容器中的PID 1是怎么回事。</p></blockquote><h1 id="容器中的孤儿进程"><a href="#容器中的孤儿进程" class="headerlink" title="容器中的孤儿进程"></a>容器中的孤儿进程</h1><h2 id="容器中的PID-1"><a href="#容器中的PID-1" class="headerlink" title="容器中的PID 1"></a>容器中的PID 1</h2><blockquote><p>熟悉Docker同学可能知道，容器并不是一个完整的操作系统，它也没有什么内核初始化过程，更没有像init(1)这样的初始化过程。在容器中被标志为PID 1的进程实际上就是一个普普通通的用户进程，也就是我们制作镜像时在Dockerfile中指定的ENTRYPOINT的那个进程。而这个进程在宿主机上有一个普普通通的进程ID，而在容器中之所以变成PID 1，是因为linux内核提供的<a href="https://lwn.net/Articles/531419/">PID namespaces</a>功能，如果宿主机的所有用户进程构成了一个完整的树型结构，那么PID namespaces实际上就是将这个ENTRYPOINT进程（包括它的后代进程）从这棵大树剪下来，很显然，剪下来的这部分东西本身也是一个树型结构，它完全可以自己长成一棵苍天大树（不断地fork）,当然，子树里面是看不到整棵树的原貌的，但是在子树外面确可以看到完整的子树。<br>比如我们在宿主机查看某个tomcat容器：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker top <span class="number">7</span>bb975e9a7cb</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line"><span class="number">8080</span>                <span class="number">56128</span>               <span class="number">56100</span>               <span class="number">0</span>                   <span class="number">15</span>:<span class="number">52</span>               ?                   <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>            <span class="regexp">/bin/</span>bash <span class="regexp">/home/</span>tomcat/start.sh</span><br><span class="line"><span class="number">8080</span>                <span class="number">56178</span>               <span class="number">56128</span>               <span class="number">2</span>                   <span class="number">15</span>:<span class="number">52</span>               ?                   <span class="number">00</span>:<span class="number">02</span>:<span class="number">26</span>            <span class="regexp">/usr/</span>bin/java ......</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="regexp">/proc/</span><span class="number">56128</span>/status | <span class="keyword">grep</span> NSpid</span><br><span class="line">NSpid:  <span class="number">56128</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="regexp">/proc/</span><span class="number">56178</span>/status | <span class="keyword">grep</span> NSpid</span><br><span class="line">NSpid:  <span class="number">56178</span>   <span class="number">17</span></span><br></pre></td></tr></table></figure><br>可以看到同一个进程在容器内外的进程号是不同的。我们如果在容器外部kiss -9 56128,那整个容器便会处于退出状态。<br>我们现在进入容器：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it 7bb975e9a7cb bash</span><br><span class="line">$  ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">tomcat       <span class="number"> 1 </span>    <span class="number"> 0 </span><span class="number"> 0 </span>15:52 ?        00:00:00 /bin/bash /home/tomcat/start.sh</span><br><span class="line">tomcat      <span class="number"> 17 </span>    <span class="number"> 1 </span><span class="number"> 2 </span>15:52 ?        00:02:30 /usr/bin/java ....</span><br><span class="line">tomcat     <span class="number"> 119 </span>    <span class="number"> 0 </span><span class="number"> 0 </span>17:24 pts/0    00:00:00 bash</span><br><span class="line">tomcat     <span class="number"> 126 </span>  <span class="number"> 119 </span><span class="number"> 0 </span>17:25 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure><br>可以看到bash进程的父进程号是0，和PID 1进程处于同一层级上。接下来我们打算在容器当中造个孤儿进程出来。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#parent.sh</span></span><br><span class="line">bash <span class="string">./child.sh</span></span><br></pre></td></tr></table></figure><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#child.sh</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">sleep</span> <span class="number">10</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash <span class="string">./parent.sh</span></span><br></pre></td></tr></table></figure><br>在另一个终端中运行<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ddocker exec -it 7bb975e9a7cb ps xf -o pid,ppid,stat,args</span><br><span class="line">PID   PPID STAT COMMAND</span><br><span class="line">201     <span class="number"> 0 </span>Rs+  ps xf -o pid,ppid,stat,args</span><br><span class="line">119     <span class="number"> 0 </span>Ss   bash</span><br><span class="line">198   <span class="number"> 119 </span>S+    \_ bash ./parent.sh</span><br><span class="line">199   <span class="number"> 198 </span>S+        \_ bash ./child.sh</span><br><span class="line">200   <span class="number"> 199 </span>S+            \_ sleep 10</span><br><span class="line"> <span class="number"> 1 </span>    <span class="number"> 0 </span>Ss   /bin/bash /home/tomcat/start.sh</span><br><span class="line">17     <span class="number"> 1 </span>Sl   /usr/bin/java ......</span><br></pre></td></tr></table></figure><br>接下来用kill -9杀死parent进程<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 7bb975e9a7cb <span class="built_in">kill</span> -9 198</span></span><br></pre></td></tr></table></figure><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it 7bb975e9a7cb ps xf -o pid,ppid,stat,args</span><br><span class="line">PID   PPID STAT COMMAND</span><br><span class="line">222     <span class="number"> 0 </span>Rs+  ps xf -o pid,ppid,stat,args</span><br><span class="line">199     <span class="number"> 0 </span>S    bash ./child.sh</span><br><span class="line">214   <span class="number"> 199 </span>S     \_ sleep 10</span><br><span class="line">119     <span class="number"> 0 </span>Ss+  bash</span><br><span class="line"><span class="number"> 1 </span>    <span class="number"> 0 </span>Ss   /bin/bash /home/tomcat/start.sh</span><br><span class="line">17     <span class="number"> 1 </span>Sl   /usr/bin/java ......</span><br></pre></td></tr></table></figure><br>可以看到，child进程的父进程变成了PID 0，那么这个PID 0又是何方神圣，为什么它可以接管孤儿进程，又为何ENTRYPOINT进程的父进程也是它。</p></blockquote><h2 id="容器中的PID-0"><a href="#容器中的PID-0" class="headerlink" title="容器中的PID 0"></a>容器中的PID 0</h2><blockquote><p>我们在前面提到过，容器中的进程树实际上是宿主机进程树的一棵子树，那么我们在宿主机上是否就可以找到这棵子树的父进程呢？我们在宿主机上执行以下命令<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ps -axf | <span class="keyword">grep</span> -C <span class="number">5</span> <span class="number">56128</span></span><br><span class="line">......</span><br><span class="line"><span class="number">56100</span> ?        Sl     <span class="number">0</span>:<span class="number">00</span>      \_ docker-containerd-shim -namespace moby -workdir <span class="regexp">/data/</span>var<span class="regexp">/lib/</span>docker<span class="regexp">/containerd/</span>daemon<span class="regexp">/io.containerd.runtime.v1.linux/m</span>oby<span class="regexp">/7bb975e9a7cbf84a17b584c0594c854283e47116cb4fd7eaecec8e4c706e363f -address /</span>var<span class="regexp">/run/</span>docker<span class="regexp">/containerd/</span>docker-containerd.sock -containerd-binary <span class="regexp">/usr/</span>bin<span class="regexp">/docker-containerd -runtime-root /</span>var<span class="regexp">/run/</span>docker/<span class="keyword">runtime</span>-runc -systemd-cgroup</span><br><span class="line"><span class="number">56128</span> ?        Ss     <span class="number">0</span>:<span class="number">00</span>          \_ <span class="regexp">/bin/</span>bash <span class="regexp">/home/</span>tomcat/start.sh</span><br><span class="line"><span class="number">56178</span> ?        Sl     <span class="number">2</span>:<span class="number">47</span>          |   \_ <span class="regexp">/usr/</span>bin/java ......</span><br></pre></td></tr></table></figure><br>至此，我们可以大胆的猜想，这个PID 0应该就是这个docker-containerd-shim</p></blockquote><h2 id="Docker-1-11版本后的架构"><a href="#Docker-1-11版本后的架构" class="headerlink" title="Docker 1.11版本后的架构"></a>Docker 1.11版本后的架构</h2><blockquote><p><img src="/image/docker-arch.jpg" alt="Docker"><br>从架构图中我们可以看到shim进程下还有一个runC进程，但我们在进程树中并没有发现runC这个进程。</p></blockquote><h2 id="runC"><a href="#runC" class="headerlink" title="runC"></a>runC</h2><blockquote><p>runC是OCI标准的一个参考实现，而OCI Open Container Initiative，是由多家公司共同成立的项目，并由linux基金会进行管理，致力于container runtime的标准的制定和runc的开发等工作。runc，是对于OCI标准的一个参考实现，是一个可以用于创建和运行容器的CLI(command-line interface)工具。runc直接与容器所依赖的cgroup/linux kernel等进行交互，负责为容器配置cgroup/namespace等启动容器所需的环境，创建启动容器的相关进程。</p></blockquote><blockquote><p>事实上，Docker容器的创建过程是这样子的 docker-containerd-shim –&gt; runC –&gt; entrypoint，而我们看到的最终状态是 docker-containerd-shim –&gt; entrypoint，聪明的你可能已经猜到，runc进程创建完容器之后，自己就先退出去了。但是这里面其实暗藏了一个问题，按照前面提到的孤儿进程理论，entrypint进程应该由操作系统的PID 1进程接管，但为什么会被shim接管呢？</p></blockquote><h2 id="PR-SET-CHILD-SUBREAPER"><a href="#PR-SET-CHILD-SUBREAPER" class="headerlink" title="PR_SET_CHILD_SUBREAPER"></a><a href="http://man7.org/linux/man-pages/man2/prctl.2.html?spm=a2c4e.11153940.blogcont61894.11.14a950abm8s9Ha">PR_SET_CHILD_SUBREAPER</a></h2><blockquote><p>linux在内核3.14以后版本支持该系统调用，它可以将调用进程标记“child subreaper”属性，而拥有该属性的进程则可以充当init(1)进程的功能，收养其后代进程中所产生的孤儿进程。我们可以从shim的源码中找到答案<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(log *os.File)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">     <span class="comment">// start handling signals as soon as possible so that things are properly reaped</span></span><br><span class="line">     <span class="comment">// or if runtime exits before we hit the handler</span></span><br><span class="line">     signals := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">2048</span>)</span><br><span class="line">     signal.Notify(signals)</span><br><span class="line">     <span class="comment">// set the shim as the subreaper for all orphaned processes created by the container</span></span><br><span class="line">     <span class="keyword">if</span> err := osutils.SetSubreaper(<span class="number">1</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> err</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>既然充当了reaper的角色，那么就应该尽到回收资源的责任：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">func <span class="title">start</span><span class="params">(log *os.<span class="built_in">File</span>)</span> error </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span> s &#123;</span><br><span class="line">        <span class="keyword">case</span> syscall.SIGCHLD:</span><br><span class="line">            exits, _ := osutils.<span class="built_in">Reap</span>(<span class="literal">false</span>)</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reap</span><span class="params">(wait <span class="keyword">bool</span>)</span> <span class="params">(exits []Exit, err error)</span></span> &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">       pid, err := syscall.Wait4(<span class="number">-1</span>, &amp;ws, flag, &amp;rus)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> err == syscall.ECHILD &#123;</span><br><span class="line">               <span class="keyword">return</span> exits, <span class="literal">nil</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> exits, err</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从这里我们可以看到shim的wait/waitpid系统调用。</p></blockquote><h2 id="1-11以前的Docker"><a href="#1-11以前的Docker" class="headerlink" title="1.11以前的Docker"></a>1.11以前的Docker</h2><blockquote><p>实际上在早期的Docker中，并没有reaper的设置，那么内核此时会如何处理孤儿进程呢？<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When we die, we re-parent all our children, and try to:</span></span><br><span class="line"><span class="comment"> * 1. give them to another thread in our thread group, if such a member exists</span></span><br><span class="line"><span class="comment"> * 2. give it to the first ancestor process which prctl&#x27;d itself as a</span></span><br><span class="line"><span class="comment"> *    child_subreaper for its children (like a service manager)</span></span><br><span class="line"><span class="comment"> * 3. give it to the init process (PID 1) in our pid namespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> struct task_struct *<span class="title">find_new_reaper</span><span class="params">(struct task_struct *father,</span></span></span><br><span class="line"><span class="params"><span class="function">                       struct task_struct *child_reaper)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">thread</span>, *<span class="title">reaper</span>;</span></span><br><span class="line"></span><br><span class="line">    thread = find_alive_thread(father);</span><br><span class="line">    <span class="keyword">if</span> (thread)</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (father-&gt;signal-&gt;has_child_subreaper) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Find the first -&gt;is_child_subreaper ancestor in our pid_ns.</span></span><br><span class="line"><span class="comment">         * We start from father to ensure we can not look into another</span></span><br><span class="line"><span class="comment">         * namespace, this is safe because all its threads are dead.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (reaper = father;</span><br><span class="line">             !same_thread_group(reaper, child_reaper);</span><br><span class="line">             reaper = reaper-&gt;real_parent) &#123;</span><br><span class="line">            <span class="comment">/* call_usermodehelper() descendants need this check */</span></span><br><span class="line">            <span class="keyword">if</span> (reaper == &amp;init_task)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (!reaper-&gt;signal-&gt;is_child_subreaper)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            thread = find_alive_thread(reaper);</span><br><span class="line">            <span class="keyword">if</span> (thread)</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child_reaper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>找到相同线程组里其它可用线程</li><li>沿着它的进程树向祖先进程找一个最近的child_subreaper并且运行着的进程</li><li>该namespace下进程号为1的进程</li></ol></blockquote><blockquote><p>很显然，旧版本的Docker在容器内所产生的孤儿进程，会被进程号为1（也就是entrypoint进程）所接管，而我们知道，该进程一般是一个普通的应用程序，一般不会特意去实现对孤儿进程的处理，所以，在使用早期版本的Docker时，我们会发现操作系统会经常出现僵尸进程。所以，为了你的系统稳定，早点升级你的内核和Docker的版本吧。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是PID-1&quot;&gt;&lt;a href=&quot;#什么是PID-1&quot; class=&quot;headerlink&quot; title=&quot;什么是PID 1&quot;&gt;&lt;/a&gt;什么是PID 1&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在Linux操作系统中，当内核初始化完毕之后，会启动一个init进
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>centos7上安装docker环境</title>
    <link href="http://yoursite.com/2018/09/17/centos7-docker-install/"/>
    <id>http://yoursite.com/2018/09/17/centos7-docker-install/</id>
    <published>2018-09-17T09:53:13.000Z</published>
    <updated>2019-02-03T09:20:18.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备-删除旧版本"><a href="#准备-删除旧版本" class="headerlink" title="准备:删除旧版本"></a>准备:删除旧版本</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h2 id="1-安装仓库"><a href="#1-安装仓库" class="headerlink" title="1. 安装仓库"></a>1. 安装仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="2-安装指定版本的Docker-CE"><a href="#2-安装指定版本的Docker-CE" class="headerlink" title="2. 安装指定版本的Docker CE"></a>2. 安装指定版本的Docker CE</h2><h3 id="1-列出版本"><a href="#1-列出版本" class="headerlink" title="1. 列出版本"></a>1. 列出版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><h3 id="2-安装指定版本"><a href="#2-安装指定版本" class="headerlink" title="2.安装指定版本"></a>2.安装指定版本</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">install</span> docker-ce-&lt;VERSION <span class="keyword">STRING</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-启动docker"><a href="#3-启动docker" class="headerlink" title="3. 启动docker"></a>3. 启动docker</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo systemctl <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure><h2 id="续："><a href="#续：" class="headerlink" title="续："></a>续：</h2><p>###（1）修改cgroup driver:<br>在 /usr/lib/systemd/system/docker.service 中添加以下启动项<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/dockerd \</span><br><span class="line">          --exec-opt native.<span class="attribute">cgroupdriver</span>=systemd</span><br></pre></td></tr></table></figure></p><p>###（2）修改storage-driver:<br>在/etc/docker/daemon.json 添加以下配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;storage-opts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启docker<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>systemctl daemon-reload</span><br><span class="line"><span class="variable">$ </span>systemctl restart docker</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备-删除旧版本&quot;&gt;&lt;a href=&quot;#准备-删除旧版本&quot; class=&quot;headerlink&quot; title=&quot;准备:删除旧版本&quot;&gt;&lt;/a&gt;准备:删除旧版本&lt;/h2&gt;&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos7内核升级</title>
    <link href="http://yoursite.com/2018/09/17/centos7-kernel-update/"/>
    <id>http://yoursite.com/2018/09/17/centos7-kernel-update/</id>
    <published>2018-09-17T09:27:31.000Z</published>
    <updated>2019-02-03T09:20:18.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-查看当前内核版本"><a href="#1-查看当前内核版本" class="headerlink" title="1. 查看当前内核版本"></a>1. 查看当前内核版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">3.10.0-229.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="2-导入public-key"><a href="#2-导入public-key" class="headerlink" title="2. 导入public key"></a>2. 导入public key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import http://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><h2 id="3-安装ELRepo到CentOS-6-5中"><a href="#3-安装ELRepo到CentOS-6-5中" class="headerlink" title="3. 安装ELRepo到CentOS-6.5中"></a>3. 安装ELRepo到CentOS-6.5中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="4-安装kernel-lt（lt-long-term）"><a href="#4-安装kernel-lt（lt-long-term）" class="headerlink" title="4. 安装kernel-lt（lt=long-term）"></a>4. 安装<strong>kernel-lt（lt=long-term）</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum --enablerepo=elrepo-kernel install kernel-lt -y</span><br></pre></td></tr></table></figure><h2 id="5-修改Grub引导顺序"><a href="#5-修改Grub引导顺序" class="headerlink" title="5. 修改Grub引导顺序"></a>5. 修改Grub引导顺序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grub2-set-default 0</span><br></pre></td></tr></table></figure><h2 id="6-重启，查看内核版本号"><a href="#6-重启，查看内核版本号" class="headerlink" title="6. 重启，查看内核版本号"></a>6. 重启，查看内核版本号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">4.4.156-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-查看当前内核版本&quot;&gt;&lt;a href=&quot;#1-查看当前内核版本&quot; class=&quot;headerlink&quot; title=&quot;1. 查看当前内核版本&quot;&gt;&lt;/a&gt;1. 查看当前内核版本&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="kernel" scheme="http://yoursite.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>JVM-In-Docker:暴涨的内存</title>
    <link href="http://yoursite.com/2018/04/12/JVMInDockerOOM/"/>
    <id>http://yoursite.com/2018/04/12/JVMInDockerOOM/</id>
    <published>2018-04-12T07:26:46.000Z</published>
    <updated>2019-02-03T09:20:19.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>最近将java应用迁移至docker容器时，发现了一个有趣的现象：在容器内运行一段时间以后，总是被内核OOM Killed.顾名思义，这是java进程内存使用超过了一定的限制。<br>我们在启动容器的时候，限制其可用物理内存为1G，通过以下命令可查看内存限制</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">inspect</span> --<span class="keyword">format</span>=&#x27;&#123;&#123;.HostConfig.<span class="keyword">Memory</span>&#125;&#125;&#x27; <span class="variable">$&#123;ContainerId&#125;</span></span><br></pre></td></tr></table></figure><p>容器启动之后，我们能过grafana观察其内存变量，其内存使用在一小时之内就涨到了1G，再经过差不多一小时，容器就被OOM Killed了。<br>有趣的是，我们将该程序放到一以1G内存的虚拟机上去执行，其内存使用量一直保存在300M左右，自然也不会触发OOM Killed。<br>同样是1G内存的限制，为什么在容器内就挂了而在物理机或虚拟机上就正常了呢？看来这值得我们深挖一下。</p><h1 id="CGroup"><a href="#CGroup" class="headerlink" title="CGroup"></a>CGroup</h1><p>首先，可以确定的是，容器之所以被杀死，是因为其内存超过了限制，那么这个限制，就是由Linux内核提供的CGroup来行限制的。<br>CGroup全名Control Group,其作用就是限制某一个或一组进程对系统资源的使用，在这里我们不对CGroup进行深入的探讨，有兴趣的同学可以<a href="https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt">点击这里</a>进行深入学习。<br>在这里要提到的是，为什么上述容器在内存满了之后还要再过1小时才被Kill？这是因为我们的系统开启了交换内存的功能，而如果我们不对容器进行交换内存进行限制而只是限制物理内存，那么交换内存将会被设置为物理内存的2倍。（注意，这里交换内存包含了物理内存的容量）<br>所以当物理内存满了以后，容器还能继续跑是因为其还在涨的内存被交换出去了，还没到达交换内存的限制而已。</p><h1 id="JVM-–Xmx"><a href="#JVM-–Xmx" class="headerlink" title="JVM –Xmx"></a>JVM –Xmx</h1><p>除非我们显示的设置JVM的最大堆大小，否则，JVM将会根据宿主机的RAM来推断这个值 – 默认情况下，这个值会被设置成宿主机内存的1/4。<br>我们可以能过<a href="http://matthewkwilliams.com/index.php/2015/10/02/looking-inside-a-jvm-xxprintflagsfinal/">-XX:+PrintFlagsFinal</a>来查看这个值的大小</p><p>笔者在一台64G内存的物理器上执行得到如下结果：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">java </span>-XX:+PrintFlagsFinal -version<span class="title">|grep -i heapsize|</span>egrep <span class="string">&#x27;Initial|Max&#x27;</span></span><br><span class="line"><span class="keyword">java </span>version <span class="string">&quot;1.7.0_67&quot;</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">1057991744</span>      &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">16928210944</span>     &#123;product&#125;</span><br></pre></td></tr></table></figure><br>可以看到 MaxHeapSize为 ~16G<br>我们在容器中执行看一下结果：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm <span class="keyword">java </span><span class="keyword">java </span> -XX:+PrintFlagsFinal -version <span class="title">|grep -i heapsize |</span> egrep <span class="string">&#x27;Initial|Max&#x27;</span></span><br><span class="line"><span class="keyword">java </span>version <span class="string">&quot;1.7.0_67&quot;</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">1057991744</span>      &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">16928210944</span>     &#123;product&#125;</span><br></pre></td></tr></table></figure><br>一样的结果。现在我们限制一下容器的内存为 1G(-m 1024m)<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -m <span class="number">1024</span>m --rm <span class="keyword">java </span><span class="keyword">java </span> -XX:+PrintFlagsFinal -version <span class="title">|grep -i heapsize |</span> egrep <span class="string">&#x27;Initial|Max&#x27;</span></span><br><span class="line"><span class="keyword">java </span>version <span class="string">&quot;1.7.0_67&quot;</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">1057991744</span>      &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">16928210944</span>     &#123;product&#125;</span><br></pre></td></tr></table></figure><br>结果还是一样。</p><h1 id="Memory-Inside-Linux-Containers"><a href="#Memory-Inside-Linux-Containers" class="headerlink" title="Memory Inside Linux Containers"></a>Memory Inside Linux Containers</h1><p>我们用free来看一下内存的情况<br>在宿主机上:<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:        <span class="number"> 64574 </span>    <span class="number"> 62979 </span>     <span class="number"> 1594 </span>        <span class="number"> 0 </span>      <span class="number"> 864 </span>     49236</span><br><span class="line">-/+ buffers/cache:     <span class="number"> 12878 </span>     51695</span><br><span class="line">Swap:        <span class="number"> 4095 </span>      <span class="number"> 448 </span>      3647</span><br></pre></td></tr></table></figure><br>在容器内:<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -1024 --rm busybox free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:        <span class="number"> 64574 </span>    <span class="number"> 62979 </span>     <span class="number"> 1594 </span>        <span class="number"> 0 </span>      <span class="number"> 864 </span>     49236</span><br><span class="line">-/+ buffers/cache:     <span class="number"> 12878 </span>     51695</span><br><span class="line">Swap:        <span class="number"> 4095 </span>      <span class="number"> 448 </span>      3647</span><br></pre></td></tr></table></figure><br>还是一模一样，为什么会出现这样的情况？这就等于我们在容器内无法读到容器的限制内存？<br>关于这个问题，这里有一篇文章（<a href="https://fabiokung.com/2014/03/13/memory-inside-linux-containers/">Memory inside Linux containers</a>）解释得很详细,这里我们作一个简单的总结：<br>意思是我们并不是没办法读取容器内存的，而是读的地方不对。早期的统计工具，例如top,free（包括jvm）等都是从/proc目录下读取系统信息的，而在容器内，容器的内存限制并不是在/proc下面，而要从cgroup读取（docker内的cgroup目录在/sys/fs/cgroup),<br>而/proc目录，到目前为止，docker官方并没有对其进行容器化处理，所以从这里读取的信息都还是宿主机的信息，这也就很好解释我们上面看到的实验结果。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>一些人认为可以提供一个用户态的库供大家调用，这种方案只适合新的程序，那些旧的程序如top,free甚至jvm都无法使用这个方案了</li><li>另一种方案是在用户态重写/proc/meminfo，例如<a href="https://github.com/libfuse/libfuse">FUSE</a>就可以实现这种功能。但这种方案的问题是要在宿主机上运行这个用户态的服务，如果这个服务挂了该如何处理？总之，这种方案可以解决问题，但并不是十分完美</li><li>直接内核支持，但是这种又会影响到那些没有容器化的系统，所以除非你自定义内核，否则不可能被合并到主流内核版本中。</li></ol><h2 id="JVM的解决"><a href="#JVM的解决" class="headerlink" title="JVM的解决"></a>JVM的解决</h2><p>知道了问题产生的原因，那么我们解决JVM在容器中的问题其实就很简单了：<br>我们结合容器的限制内存，给JVM设置一下最大堆参数就可以了<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -m <span class="number">1024</span>m --rm <span class="keyword">java </span><span class="keyword">java </span>-Xmx256m -Xms16m  -XX:+PrintFlagsFinal -version<span class="title">|grep -i heapsize|</span>egrep <span class="string">&#x27;Initial|Max&#x27;</span>     </span><br><span class="line"><span class="keyword">java </span>version <span class="string">&quot;1.7.0_67&quot;</span></span><br><span class="line"><span class="keyword">Java(TM) </span>SE Runtime Environment (<span class="keyword">build </span><span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_67-<span class="keyword">b01)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Java </span>HotSpot(TM) <span class="number">64</span>-<span class="keyword">Bit </span>Server VM (<span class="keyword">build </span><span class="number">24</span>.<span class="number">65</span>-<span class="keyword">b04, </span>mixed mode)</span><br><span class="line">    uintx InitialHeapSize                          := <span class="number">16777216</span>        &#123;product&#125;           </span><br><span class="line">    uintx MaxHeapSize                              := <span class="number">268435456</span>       &#123;product&#125;</span><br></pre></td></tr></table></figure><br>可以看到MaxHeapSize=256m,InitialHeapSize=16m</p><p>笔者最后给最开始被OOM Killed的Java程序加上最大堆限制之后，就再也没有出现被Kill的情况，附上内存图：<br><img src="/image/JVMInDocker.jpg" alt=""></p><p>（全文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;最近将java应用迁移至docker容器时，发现了一个有趣的现象：在容器内运行一段时间以后，总是被内核OOM Killed.顾名思义，这是j
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>多线程一定比单线程快吗</title>
    <link href="http://yoursite.com/2017/08/10/multiple-threads/"/>
    <id>http://yoursite.com/2017/08/10/multiple-threads/</id>
    <published>2017-08-10T07:27:07.000Z</published>
    <updated>2019-02-03T09:20:19.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先我们来看一下需求：</p><blockquote><p>有四个整型数（初始化为0）存在我们计算机的内存之中，现在要求对每个数分别进行++操作，重复这个动作1000000000次。</p></blockquote><p>这很显然是一个计算密集型的过程，其间并不会涉及任何的io操作，因此，我们可以考虑用四个线程来同时对这四个数进行操作（用四个线程是因为笔者的电脑CPU物理核数为4）,这样可以最大程度地利用我们的cpu资源。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>接下来，我们用程序来实现这个需求，笔者用的语言是C#，这个实验和使用的语言关系不是很大，各个语言之间的差异很小。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> m_numOfProcessor = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> m_step = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="built_in">int</span>[] m_array = <span class="keyword">new</span> <span class="built_in">int</span>[m_numOfProcessor * m_step];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> m_ticks = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> events = InitEvents(m_numOfProcessor);</span><br><span class="line">        Stopwatch watch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        watch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_numOfProcessor; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart((o) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                UpdateCounter(Convert.ToInt32(o) * m_step);</span><br><span class="line">                events[Convert.ToInt32(o)].Set();</span><br><span class="line">            &#125;)).Start(i);</span><br><span class="line">        &#125;</span><br><span class="line">        WaitHandle.WaitAll(events);</span><br><span class="line">        watch.Stop();</span><br><span class="line">        Console.WriteLine(String.Format(<span class="string">&quot;step &#123;0&#125; elapsed:&quot;</span> + watch.ElapsedMilliseconds, m_step));</span><br><span class="line">        Print(m_array, m_step);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">int</span>[] array,<span class="built_in">int</span> step</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; array.Length; i = i + step)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ManualResetEvent[] <span class="title">InitEvents</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ManualResetEvent[] events = <span class="keyword">new</span> ManualResetEvent[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            events[i] = <span class="keyword">new</span> ManualResetEvent(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateCounter</span>(<span class="params"><span class="built_in">int</span> position</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_ticks; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_array[position] = m_array[position] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在这个示例中，我们将这四个整数放在一个数组中，当m_step为1时，这四个数在内存中是连续的。这里我们开启了四个线程同时行进计算，得到的结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step 1 elapsed:15495</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure></p><p>我们一开始的想法是通过多线程来充分利用CPU的计算资源，那么，我们现在来验证多线程是否确实比单线程速度快：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_numOfProcessor; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//new Thread(new ParameterizedThreadStart((o) =&gt;</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    UpdateCounter(Convert.ToInt32(o) * m_step);</span></span><br><span class="line">    <span class="comment">//    events[Convert.ToInt32(o)].Set();</span></span><br><span class="line">    <span class="comment">//&#125;)).Start(i);</span></span><br><span class="line">    UpdateCounter(i * m_step);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WaitHandle.WaitAll(events);</span></span><br></pre></td></tr></table></figure><br>调整程序为单线程执行，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">step 1 elapsed:7741</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure></p><p>结果竟然是单线程比多线程的速度快！</p><p>接下来，我们调整一下m_step的值分别为2、4、8、16，来看一下不同的步长在多线程和单线程模式下的各自的性能表现：</p><table><thead><tr><th>m_step</th><th>多线程</th><th>单线程</th></tr></thead><tbody><tr><td>1</td><td>15495</td><td>7741</td></tr><tr><td>2</td><td>15768</td><td>7760</td></tr><tr><td>4</td><td>15485</td><td>7667</td></tr><tr><td>8</td><td><strong>11433</strong></td><td>7752</td></tr><tr><td>16</td><td><strong>5797</strong></td><td>7784</td></tr></tbody></table><p>这里，我们发现当步长为8和16的时候，多线程性能突然提升，并且在16的时候超过了单线程的性能，而这一切又是为什么呢？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>要解释这个结果，我们要先理解CPU的工作原理。<br>1) cpu从来都不直接访问主存, 都是通过cpu cache间接访问主存。<br>2) 每次需要访问主存时, 遍历一遍全部cache line, 查找主存的地址是否在某个cache line中。<br>3) 如果cache中没有找到, 则分配一个新的cache entry, 把主存的内存copy到cache line中, 再从cache line中读取。</p><p>那什么又是cache line呢？<br>现代的cpu从主存读取数据并不是一个字节一个字节读取，而是一整块一整块地读取，那么究竟一次会读取多少数据呢，这就取决于CPU的cache line的大小。CPU将它的cache划分成一块一块的，一块这样的存储区域就是一个cache line。<br>在现代计算机CPU的cache line大小一般为32Byte或64Byte，我们要如何查看cache line的大小呢？可以使用 <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/coreinfo">CoreInfo</a>工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Logical Processor to Cache Map:</span><br><span class="line">**------  Data Cache          0, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">**------  Instruction Cache   0, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">**------  Unified Cache       0, Level 2,  256 KB, Assoc   8, LineSize  64</span><br><span class="line">********  Unified Cache       1, Level 3,    8 MB, Assoc  16, LineSize  64</span><br><span class="line">--**----  Data Cache          1, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">--**----  Instruction Cache   1, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">--**----  Unified Cache       2, Level 2,  256 KB, Assoc   8, LineSize  64</span><br><span class="line">----**--  Data Cache          2, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">----**--  Instruction Cache   2, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">----**--  Unified Cache       3, Level 2,  256 KB, Assoc   8, LineSize  64</span><br><span class="line">------**  Data Cache          3, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">------**  Instruction Cache   3, Level 1,   32 KB, Assoc   8, LineSize  64</span><br><span class="line">------**  Unified Cache       4, Level 2,  256 KB, Assoc   8, LineSize  64</span><br></pre></td></tr></table></figure><br>在笔者的计算机上看到的L1的cache line大小为64。这里显示我的L1的数据缓存为32KB，指令缓存为32KB。这里要注意的是，L1 cache是处理器独享，L2 cache是成对处理器共享的。<br>也就是说，笔者的四个线程，每个线程可以享用32KB的一级缓存。在上面的实验中，正是因为独享的一级缓存导致的程序性能低下。<br>在这里，我们可以联想一下我们宏观架构中的分布式缓存系统，如果我们将同一份数据存到多个地方的时候，那么数据一致性的维护将是一个非常头痛的问题。当有一份数据发生了变化，我们就必须通过某种手段来保证其它地方的数据也被更新。为了数据的一致性，势必会让我们损失很多性能。<br>我们回到上面的实验：，<br>一个32位整型数的大小为4Byte，而一个cache line长度为64Byte，因此，在一个cache line中，可以存放 64 / 4 = 16 个 32位整型数。</p><ul><li>当步长为1时，四个数全部在同一个cache line中</li><li>当步长为2时，四个数全部在同一个cache line中</li><li>当步长为4时，四个数全部在同一个cache line中</li><li>当步长为8时，每两个处于不同的cache line中</li><li>当步长为16时，每个数都处于不同的cache line中</li></ul><p>到这里我们就很好解释上述实验所显示的结果，正是因为多个CPU处理器同时操作了同一个cache line，一旦某一个处理器更新了cache line的数据，会导致其它处理器同一个cache line的数据失效，那么其它处理器就必须从主存再次读取，这正是导致其性能低下的原因。<br>（全文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;首先我们来看一下需求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有四个整型数（初始化为0）存在我们计算机的内存之中，现在要求对每个数分别进行
      
    
    </summary>
    
      <category term="performance" scheme="http://yoursite.com/categories/performance/"/>
    
    
      <category term="performance" scheme="http://yoursite.com/tags/performance/"/>
    
      <category term="cpu" scheme="http://yoursite.com/tags/cpu/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>为Docker分配独立IP</title>
    <link href="http://yoursite.com/2017/07/10/docker-ip/"/>
    <id>http://yoursite.com/2017/07/10/docker-ip/</id>
    <published>2017-07-10T09:31:36.000Z</published>
    <updated>2019-02-03T09:20:19.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker的网络模型"><a href="#Docker的网络模型" class="headerlink" title="Docker的网络模型"></a>Docker的网络模型</h1><p>  熟悉docker的人都知道，它有以下四种网络模式</p><ol><li>host</li><li>container</li><li>none</li><li>bridge</li></ol><blockquote><p>要理解Docker的网络，首先要发解的是Linux下面的network namespace。Linux Namespace是Linux提供的一种内核级别环境隔离的方法。其中network namepspace是六种隔离中的一种。<br>简单来说，如果将某一个进程的network namespace为设置为ns1，那么它将无法看到宿主机上（默认的名称空间下）的任何网络设备，路由规则，iptables,甚至是整个tcp/ip协议栈。在ns1下面创建的网络设备等等，在宿主机（默认的名称空间下）也同样看不到这些新创建的设备。这样，让用户感觉像是让我们的进程跑在了另外一个操作系统上面，仿佛我们新创建了一个操作系统环境。</p></blockquote><p>了解了network namespace，我在再来了解docker的网络模式</p><ol><li>host:<br>当使用host模式启动容器时，这个容器将不会创建自己的network namespace，而是和宿主机共用同一个。那么这样也就很好理解了，我们的进程创建的任何网络设备，监听的任何端口，宿主机都可以感知得到，也就是说，容器可以使用宿主机的ip和端口资源。</li><li>none:<br>使用none模式，Docker容器拥有自己的network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。该模式和host模式的一个重要的区别就是，none模式有自己的network namespace，而host模式没有。</li><li>container:<br>这个模式指定新创建的容器和已经存在的一个容器共享一个network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</li><li>bridge:<br>bridge模式是docker的默认网络模式。当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。</li></ol><h1 id="bridge网络模式"><a href="#bridge网络模式" class="headerlink" title="bridge网络模式"></a>bridge网络模式</h1><p>作为docker默认的网络模式，是最复杂也是运用最广的模式。我们先来看一下，在这种模式下，它的网格拓扑结构。<br><img src="/image/docker-bridge.png" alt="docker-bridge"><br>这里首先要讲解一下linux下虚拟网桥的概念：</p><ul><li><p>虚拟网桥：<br>首先，它的主体部分是一个二层交换机，但是奇怪的是，我们在宿主机上查看linux网络设备docker0的时候，它会有一个ip地址（作者主机上的docker0）<br><img src="/image/docker0.png" alt="docker0"><br>稍微有点网络常识的人会知道，交换机是二层设备，是没有ip地址的。那么这个ip地址又是怎么来的呢。<br>我们可以思考一下，假设你买了一个物理交换机回来以后，我们的主机要如何使用这个交换机？答案很简单，用一根网线将主机上的某一块网卡接到交换机的一个端口上面！是的，那么docker0设备上的ip实际上就是主机上连接交换机网卡的ip。<br>所以，linux的虚拟网桥实际上包括三部分：</p><ul><li>一个L2的交换机</li><li>一个主机的网卡</li><li>一根连接以上两部分的网线</li></ul></li><li><p>veth pair<br>了解了虚拟网桥，我们再来看一下另一个linux的虚拟网络设备： veth-pair<br>它实际上是一对虚拟网卡,从一张veth网卡发出的数据包可以直接到达它的peer veth,两者之间存在着虚拟链路。也就是说，这种虚拟设备包括以下三部分：</p><ul><li>一个安装在主机上的网卡</li><li>另一个安装在主机上的网卡</li><li>一根连接这两个网卡的网线<br>大家可能会觉得奇怪，这样的网络设备有什么用，数据从一个网卡出去，再从另外一块网卡进来？其实，这种网络设备有一个特点，就是两块网卡可以分别处于不同的network namespace。<br><img src="/image/veth-pair.png" alt="veth-pair"><br>docker正是利用了这种特性，将其中的一块网卡添加到容器内部，另外一块留在宿主机上面，大家通过ifconfig命令在宿主机可以看到vethxxx这样的网络设备，但是这样的网络设备它是没有ip地址的。<br><img src="/image/vethxxx.png" alt="vethxxx"><br>这又是为什么呢？这要回到上面提到的虚拟网桥。实际上这块网卡被添加到了docker0的交换机设备上，变成了该交换机上的一个端口，交换机的端口没有ip也就很正常了。<br>我们可以通过brctl命令，将一个物理设备添加到一个虚拟网桥上面：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brctl addif docker0 vethae36b9b</span></span><br></pre></td></tr></table></figure>这个命令的意思是将vethae36b9b这个网络设备添加到docker0这个网桥上面。<br>还可以查看已添加到网桥上面的设备<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brctl show docker0</span></span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">docker0         8000.0242f2558144       no              vethae36b9b</span><br></pre></td></tr></table></figure>到此，我们来理解bridge网络模式的拓扑结构就很简单了，这是不是非常像我们家庭网络的结构：一个个容器代表了家里的一台台计算机，而宿主机这时候变成了连接外网的路由器了。在这个子网内部的各个容器之间是可以互相访问的，容器可以访问外部网络，而外部网络要访问内部容器，就必须通过nat端口映射才行。</li></ul></li></ul><h1 id="给docker容器分配一个和宿主机处于同一网段的ip"><a href="#给docker容器分配一个和宿主机处于同一网段的ip" class="headerlink" title="给docker容器分配一个和宿主机处于同一网段的ip"></a>给docker容器分配一个和宿主机处于同一网段的ip</h1><p>bridge网络有一个问题，就是多个容器要同时对外暴露服务时，会竞争宿主机上面的端口，导致端口资紧张的情况发生。那么我们能不能给docker分配一个和宿主机处于同一个网段的ip，这样，外部网络就可以直接访问该容器了呢?答案当然是可以，我们现在就利用上面的知识，来更改一下docker的网络拓扑结构。<br><img src="/image/docker-bridge2.png" alt="docker-bridge2"><br>这里我们为了避免连接不上宿主机，另外创建一个虚拟网桥br0<br>em1是宿主机上的网卡，它的ip为172.24.133.39/24。我们的做法很简单，将em1添加到docker0网桥上，然后将ip（172.24.133.39）设置给br0设备。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brctl addbr br0</span></span><br><span class="line"><span class="comment"># brctl stp br0 off</span></span><br><span class="line"><span class="comment"># ifconfig br0 172.24.133.39/24 up</span></span><br><span class="line"><span class="comment"># brctl addif br0 em1</span></span><br><span class="line"><span class="comment"># ifconfig em1 0.0.0.0</span></span><br><span class="line"><span class="comment"># route add default gw 172.24.133.254 dev br0</span></span><br></pre></td></tr></table></figure><br>创建一对veth pair,并将其中一个添加到br0中,另一个设置给容器（docker的network namespace的名称就是容器id)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip link add peerA type veth peer name peerB </span></span><br><span class="line"><span class="comment"># brctl addif br0 peerA</span></span><br><span class="line"><span class="comment"># ip link set peerA up</span></span><br><span class="line"><span class="comment"># ip link set peerB netns $&#123;container-pid&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，进入到容器中，将eth1的ip设置为172.24.133.253<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip link set dev peerB name eth1 </span></span><br><span class="line"><span class="comment"># ip link set eth1 up</span></span><br><span class="line"><span class="comment"># ip addr add 172.24.133.253/24 dev eth1</span></span><br><span class="line"><span class="comment"># route add default gw 172.24.133.254 dev eth1</span></span><br></pre></td></tr></table></figure><br>此时，我们就可以通过172.24.133.253这个ip直接访问容器了<br>（全文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker的网络模型&quot;&gt;&lt;a href=&quot;#Docker的网络模型&quot; class=&quot;headerlink&quot; title=&quot;Docker的网络模型&quot;&gt;&lt;/a&gt;Docker的网络模型&lt;/h1&gt;&lt;p&gt;  熟悉docker的人都知道，它有以下四种网络模式&lt;/p&gt;
&lt;ol
      
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Ingress的BlueGreenDeployment</title>
    <link href="http://yoursite.com/2017/04/24/blue-green-deploy/"/>
    <id>http://yoursite.com/2017/04/24/blue-green-deploy/</id>
    <published>2017-04-24T10:12:40.000Z</published>
    <updated>2019-02-03T09:20:18.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Blue-Green-Deployment"><a href="#Blue-Green-Deployment" class="headerlink" title="Blue-Green Deployment"></a>Blue-Green Deployment</h2><p><a href="https://martinfowler.com/bliki/BlueGreenDeployment.html">Blue-Green</a>是一种无宕机的升级技术，和滚动升级不同，蓝绿部署是启动一个运行着新版应用的副本的集群，旧版的应用依旧提供服务，直到新的应用真正启动并配置好负载均衡器。这种方式的一个好处是任何时候都只有一个版本的应用在运行，减少了处理多个并发版本带来的复杂性。当副本个数很少时，蓝绿部署也能很好地工作。</p><p>在传统的发布中，新版本的服务只有上线以后（此时新版本的软件已经暴露给了用户）测试人员才能够进行线上测试，实际上这个时候的测试的意义并不是太大，因为如果存在bug的话，那么这个bug已经暴露给了最终用户，要解决bug要么继续发布更新的版本，要么进行线上回滚，这对于用户来说是一种非常不友好的体验，对于开发和测试人员也产生了一定的压力。</p><p>蓝绿发布将新版本的服务发布到一个新的生产环境中，该环境和旧版本的环境完全一致，唯一的区别是最终用户是访问不到新版本的服务，这时候只有测试人员可以访问。这样，就有办法保证测试人员有足够的时间进行系统测试。<br><img src="/image/canary-release-1.png" alt=""><br>当测试人员完成测试后，再将流量切换至新版本服务。<br><img src="/image/canary-release-3.png" alt=""><br>切换成功以后，再将旧版本的环境进行删除。</p><h2 id="在kubernetes中实现蓝绿发布"><a href="#在kubernetes中实现蓝绿发布" class="headerlink" title="在kubernetes中实现蓝绿发布"></a>在kubernetes中实现蓝绿发布</h2><p>kubernetes本身并不提供蓝绿发布的功能，包括在deployment中，它的发布策略只包含滚动发布（rolling update）和重建发布(recreate)。要实现蓝绿发布，我们必须将其业务提取到自己的管理层来。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>一个kubernetes集群环境</li><li>至少有一个Ingress Controller。（我们将使用Ingress来进行host和service的绑定）</li></ol><h3 id="blue-deployment"><a href="#blue-deployment" class="headerlink" title="blue-deployment"></a>blue-deployment</h3><p>第一步，我们创建一个verion 为 1 的deployment。</p><p>deployment-blue.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-deployment-blue</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">        <span class="attr">track:</span> <span class="string">blue</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello this is version 1 &gt; /pod-data/index.html &amp;&amp; sleep 1000000000&quot;</span>]</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">kubectl create -f deployment-blue.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pod -l app=demo --show-labels</span><br><span class="line"></span><br><span class="line">demo-deployment-blue-2523566789-641sj    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-h88ch    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-kqsdg    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br></pre></td></tr></table></figure></p><h3 id="blue-service"><a href="#blue-service" class="headerlink" title="blue-service"></a>blue-service</h3><p>创建blue-service</p><p>service-blue.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-service-blue</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo-service-blue</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">track:</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f service-blue.yaml</span><br><span class="line"></span><br><span class="line">kubectl describe svc demo-service-blue</span><br><span class="line"></span><br><span class="line">Name:                   demo-service-blue</span><br><span class="line">Namespace:              default</span><br><span class="line">Labels:                 app=demo-service-blue</span><br><span class="line">Selector:               app=demo,track=blue</span><br><span class="line">Type:                   ClusterIP</span><br><span class="line">IP:                     10.254.1.251</span><br><span class="line">Port:                   &lt;<span class="built_in">unset</span>&gt; 80/TCP</span><br><span class="line">Endpoints:              172.30.40.26:80,172.30.40.28:80,172.30.56.18:80</span><br><span class="line">Session Affinity:       None</span><br><span class="line">No events.</span><br></pre></td></tr></table></figure><br>该Service通过app=demo,track=blue的标签找到了三个终节点(我们在deployment中指定了复本数为3)</p><h3 id="stable-ingress"><a href="#stable-ingress" class="headerlink" title="stable-ingress"></a>stable-ingress</h3><p>最后我们通过stable-ingress将该服务暴露给最终用户。</p><p>ingress-stable.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-ingress-stable</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    <span class="attr">ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">demo-stable</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">demo-service-blue</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><br>验证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ingress-stable.yaml</span><br><span class="line"></span><br><span class="line">kubectl get ing demo-ingress-stable</span><br><span class="line"></span><br><span class="line">NAME                  HOSTS         ADDRESS         PORTS     AGE</span><br><span class="line">demo-ingress-stable   demo-stable   172.24.133.92   80        1h</span><br></pre></td></tr></table></figure></p><p>最后我们访问一下该host<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 172.24.133.92 -H <span class="string">&quot;HOST:demo-stable&quot;</span></span><br><span class="line">hello this is version 1</span><br></pre></td></tr></table></figure></p><h3 id="green-deployment"><a href="#green-deployment" class="headerlink" title="green-deployment"></a>green-deployment</h3><p>接下来，我们打算发布一个新的服务版本（version 2）。我们先不删除旧版本的服务。而是直接发布一个新的deployment,我们称它为deployment-green:</p><p>deployment-green.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-deployment-green</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">        <span class="attr">track:</span> <span class="string">green</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">172.24</span><span class="number">.133</span><span class="number">.2</span><span class="string">:5000/nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">172.24</span><span class="number">.133</span><span class="number">.2</span><span class="string">:5000/debian</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello this is version 2 &gt; /pod-data/index.html &amp;&amp; sleep 1000000000&quot;</span>]</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deployment-green.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pod -l app=demo --show-labels</span><br><span class="line"></span><br><span class="line">NAME                                     READY     STATUS    RESTARTS   AGE       LABELS</span><br><span class="line">demo-deployment-blue-2523566789-641sj    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-h88ch    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-blue-2523566789-kqsdg    2/2       Running   0          1h        app=demo,pod-template-hash=2523566789,track=blue</span><br><span class="line">demo-deployment-green-3779826479-7nfx3   2/2       Running   0          1h        app=demo,pod-template-hash=3779826479,track=green</span><br><span class="line">demo-deployment-green-3779826479-ck8v0   2/2       Running   0          1h        app=demo,pod-template-hash=3779826479,track=green</span><br><span class="line">demo-deployment-green-3779826479-n40kj   2/2       Running   0          1h        app=demo,pod-template-hash=3779826479,track=green</span><br></pre></td></tr></table></figure><br>这里可以看到新旧版本一共六个pod，我们能过标签track将它们区分开来。</p><h3 id="green-service"><a href="#green-service" class="headerlink" title="green-service"></a>green-service</h3><p>接下来创建新版本的service</p><p>service-green.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-service-green</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo-service-green</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">track:</span> <span class="string">green</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f service-green.yaml</span><br><span class="line"></span><br><span class="line">kubectl describe svc demo-service-green</span><br><span class="line"></span><br><span class="line">Name:                   demo-service-green</span><br><span class="line">Namespace:              default</span><br><span class="line">Labels:                 app=demo-service-green</span><br><span class="line">Selector:               app=demo,track=green</span><br><span class="line">Type:                   ClusterIP</span><br><span class="line">IP:                     10.254.125.14</span><br><span class="line">Port:                   &lt;<span class="built_in">unset</span>&gt; 80/TCP</span><br><span class="line">Endpoints:              172.30.40.29:80,172.30.56.20:80,172.30.56.21:80</span><br><span class="line">Session Affinity:       None</span><br><span class="line">No events.</span><br></pre></td></tr></table></figure><h3 id="canary-ingress"><a href="#canary-ingress" class="headerlink" title="canary-ingress"></a>canary-ingress</h3><p>接下来创建一个专门针对测试人员的ingress。它的host为demo-canary。</p><p>ingress-canary.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-ingress-canary</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    <span class="attr">ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">demo-canary</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">demo-service-green</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ingress-canary.yaml</span><br><span class="line"></span><br><span class="line">kubectl get ing demo-ingress-canary</span><br><span class="line"></span><br><span class="line">NAME                  HOSTS         ADDRESS         PORTS     AGE</span><br><span class="line">demo-ingress-canary   demo-canary   172.24.133.92   80        2h</span><br></pre></td></tr></table></figure><p>这时候，分别能过两个不同的host进行访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl 172.24.133.92 -H <span class="string">&quot;HOST:demo-stable&quot;</span></span><br><span class="line">hello this is version 1</span><br><span class="line"></span><br><span class="line">curl 172.24.133.92 -H <span class="string">&quot;HOST:demo-canary&quot;</span>                         </span><br><span class="line">hello this is version 2</span><br></pre></td></tr></table></figure><br>这个时候，最终用户还是能过host:demo-stable来进行访问，它所访问到的服务版本为1，而测试人员可以通过host:demo-canary访问版本2。</p><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>当测试人员完成测试，这个时候就可以将流量引到版本2<br>修改 ingress-stable.yaml:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-ingress-stable</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    <span class="attr">ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">demo-stable</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">demo-service-green</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ingress-stable.yaml</span><br><span class="line"></span><br><span class="line">curl 172.24.133.92 -H <span class="string">&quot;HOST:demo-stable&quot;</span></span><br><span class="line">hello this is version 2</span><br></pre></td></tr></table></figure><p>这时候，用户流量被引到版本2，发布成功。</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ing demo-canary</span><br><span class="line">kubectl delete svc demo-service-blue</span><br><span class="line">kubectl delete deployment demo-deployment-blue</span><br></pre></td></tr></table></figure><p>按顺序清理以上资源。</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>关于蓝绿发布的缺陷，目前主要有两点：</p><ol><li>在发布期间要比原来多占用一倍的服务器资源。</li><li>需要维护一份当前用户流量所至的环境的数据（例如current:blue）。</li></ol><p>但相比旧的发布流程，蓝绿发布所带来的系统可用性的提升和用户体验的提升是非常巨大的。<br>（全文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Blue-Green-Deployment&quot;&gt;&lt;a href=&quot;#Blue-Green-Deployment&quot; class=&quot;headerlink&quot; title=&quot;Blue-Green Deployment&quot;&gt;&lt;/a&gt;Blue-Green Deployment&lt;/
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Ingress（1）简介</title>
    <link href="http://yoursite.com/2017/04/13/KubernetesIngress(1)/"/>
    <id>http://yoursite.com/2017/04/13/KubernetesIngress(1)/</id>
    <published>2017-04-13T12:48:38.000Z</published>
    <updated>2019-02-03T09:20:19.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么选择Ingress"><a href="#为什么选择Ingress" class="headerlink" title="为什么选择Ingress"></a>为什么选择Ingress</h2><p>kubernets的service和pod在集群内部有着集群网络统一管理和分配的ip地址，但是这些ip地址只有在集群内部可见，任何集群外部的节点都无法直接访问内部节点。显然，我们必须通过其它的渠道来访问。</p><p>目前，kubernetes提供了三种访问的方式：</p><ul><li>NodePort</li><li>LoadBalance</li><li>Ingress</li></ul><p>其中，NodePort对于主机端口资原的要求非常高，无法应用于大规模的企业私有云，而LoadBalance方式只有在像GCE、Asure等等这些云服务提供商上面才能使用。因此，对于私有云可以采用的最佳入口方式非Ingress莫属。</p><h2 id="什么是Ingress"><a href="#什么是Ingress" class="headerlink" title="什么是Ingress"></a>什么是Ingress</h2><p>Ingress是一系列允许入站链接到达集群内部服务的规则的集合。<br>未使用Ingress，外部网络无法到达内部服务<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  internet</span><br><span class="line">      |</span><br><span class="line">------------</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><br>Ingress的加入则使外部网络有了访问内部服务的途径<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure></p><p>Ingress可以为服务配置一系列的访问域名，负载均衡策略，SSL等等。</p><h2 id="Ingress-Resource"><a href="#Ingress-Resource" class="headerlink" title="Ingress Resource"></a>Ingress Resource</h2><p>Ingress和Pod、Servce等等类似，被定义为kubernetes的一种资源<br>它的一个简单的示例如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: test-ingress</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: foo.bar.com</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /testpath</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: test</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure><br>这段Ingress的描述的意思是：将host为foo.bar.com且路径为/testpath的访问引导到test:80这个服务上面。</p><h2 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h2><p>本质上说Ingress只是存储在etcd上面一些数据，我们可以能过kubernetes的apiserver添加删除和修改ingress资源。那么真正让整个Ingress运转起来的一个重要组件是Ingress Controller。<br>然而，这个Controller并不像其它Controller一样作为kubernetes的核心组件在master启动的时候一起启动起来，它实际上是kubernetes的一个扩展，我们必须选择一个适合自己的Ingress Controller，或者自己去实现一个。</p><p>对于Ingress Controller官方的定义是这样子的：</p><blockquote><p>An Ingress Controller is a daemon, deployed as a Kubernetes Pod, that watches the apiserver’s /ingresses endpoint for updates to the Ingress resource. Its job is to satisfy requests for ingress.</p></blockquote><p>Ingress Controller作为一个守户进程，通过监听apiserver的ingresses资源变化，并且根据其指定的规则建立起外部网络访问内部服务的通道。对于官方描述的 deployed as a Kubernetes Pod，实际上是没办法运用到生产环境当中去的，这个我们在后面会提到这个问题，并且会有相应的解决方案。</p><h2 id="Ingress-Controller的架构"><a href="#Ingress-Controller的架构" class="headerlink" title="Ingress Controller的架构"></a>Ingress Controller的架构</h2><p><img src="/image/ingress-controller.png" alt="ingress-controller"></p><p>上图展示了一个nginx ingress controller的部署架构图，ingress controller通过轮询监听apiserver的方式来获取ingress资源的变化，将ingress资源存储到本地缓存，并通知nginx进行相应的配置修改的加载。<br>ingress controller监控了ingress、service、endpoint、secret、node、configmap一系列资源，一旦资源发生了变化（包括增加、删除和修改），会立即通知backend，例如nginx等。<br>为了减少对apiserver的请求次数，nginx controllder会将每次请求在本地进行缓存，该缓存import了kubernetes提供的包”k8s.io/kubernetes/pkg/client/cache”。</p><h2 id="Ingress-Controller的漂移问题"><a href="#Ingress-Controller的漂移问题" class="headerlink" title="Ingress Controller的漂移问题"></a>Ingress Controller的漂移问题</h2><p>在官方定义的ingress controller，将它部署在kubernetes内部，以pod的方式存在kubernetes集群内部。既然是pod，那么就会存在漂移的问题，而作为外部网络的访问入口，我们是不允许这样的情况发生的。其中一种解决方案是通过VIP和服务发现来解决，但这无疑增加了整个系统的复杂度。<br>其实要解决漂移的问题很简单，我们只要将其部署在kubernetes集群外部，那么它就不受kubernetes的控制，自然而然就不会漂移了。<br>细心的读者可能会发现部署在外部的话，那么集群内外的网络通讯又会成为一个问题。笔者的集群环境的网络覆盖方案选择的是flannel，在每一个node上面初始化kubernetes环境的时候，都会一并装上flannel。<br>关于flannel的原理，这里有一篇文章分析得很详细<a href="http://dockone.io/article/618">DockOne技术分享（十八）：一篇文章带你了解Flannel</a></p><p>这是flannel的原理图：<br><img src="/image/flannel.png" alt="flannel"></p><p>通过该图我们可以看到通过docker0和flannel0这两块网卡打通了宿主机和集群内部的一个网络通道。</p><p>笔记在自己的节点上进行了验证<br><img src="/image/flannel-if.png" alt="flannel-if"></p><p>也就是说只要部署在该宿主机上的程序，都可以访问该节点上的任何docker容器，至于其它节点的docker容器，通过flanneld到节点的物理网卡，在flanned的时候数据包会被另外一种协议包装（如UDP、VxLAN、AWS VPC和GCE路由）成packet，该包到了另外一个节点的物理网卡再交由flanned进行解包，之后再通过虚拟的flannel和docker两块网卡路由到容器内部。</p><p>因此，我们可以以docker容器和方式或者直接以宿主机进程的方式部署我们的ingress controller。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此我们简单的介绍了kubernetes ingress 的整体结构的设计，还有ingress controller的实现机制以及部署问题等，在下一篇文章中我们会通过ingress controller的源码分析，详细讲解它的实现原理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么选择Ingress&quot;&gt;&lt;a href=&quot;#为什么选择Ingress&quot; class=&quot;headerlink&quot; title=&quot;为什么选择Ingress&quot;&gt;&lt;/a&gt;为什么选择Ingress&lt;/h2&gt;&lt;p&gt;kubernets的service和pod在集群内部有着集群
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Ingress（2）Controller源码分析</title>
    <link href="http://yoursite.com/2017/04/13/KubernetesIngress(2)/"/>
    <id>http://yoursite.com/2017/04/13/KubernetesIngress(2)/</id>
    <published>2017-04-13T12:48:38.000Z</published>
    <updated>2019-02-03T09:20:19.114Z</updated>
    
    <content type="html"><![CDATA[<p>经过上一篇文章的介绍，我们简单了解了整个Ingress的运行机制，这里我们将通过Ingress Controller的源码来更深入分析其运行过程。<br>要了解本文的内容我们要先了解一个概念，就是kuberentes的events</p><h1 id="events"><a href="#events" class="headerlink" title="events"></a>events</h1><p>关于events的概念，kubernetes中文社区有一个系列文章剖析得很清析</p><ul><li><a href="https://www.kubernetes.org.cn/1031.html">Kubernetes Events介绍（上）</a></li><li><a href="https://www.kubernetes.org.cn/1090.html">Kubernetes Events介绍（中）</a></li><li><a href="https://www.kubernetes.org.cn/1195.html">Kubernetes Events介绍（下）</a></li></ul><p>文章详细介绍了Events的概念，从哪里产生以及去向哪里等，以及更复杂的Events聚合操作。事实上，kubernetes正是通过Events让Ingress Controller知道资源的变化情况。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>从官方提供的一个Ingress Controller简单实现的示例中，我们可以找到整个框架代码的入口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dc := newDummyController()</span><br><span class="line">ic := controller.NewIngressController(dc)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Shutting down ingress controller...&quot;</span>)</span><br><span class="line">ic.Stop()</span><br><span class="line">&#125;()</span><br><span class="line">ic.Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>main函数的工作内容十分简单，就是实例化一个IngressContrller并将其Start起来。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;k8s.io/ingress/core/pkg/ingress/controller&quot;</span></span><br></pre></td></tr></table></figure><br>这是controller框架核心所在的包<br>我们看一下NewIngressController的定义<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewIngressController</span><span class="params">(backend ingress.Controller)</span> *<span class="title">GenericController</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>该方法接收一个ingress.Controller接口，并返回一个GenericController结构体的指针<br>再来看一下ingress.Controller接口的定义<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Controller <span class="keyword">interface</span> &#123;</span><br><span class="line">healthz.HealthzChecker</span><br><span class="line">Reload(data []<span class="keyword">byte</span>) ([]<span class="keyword">byte</span>, <span class="keyword">bool</span>, error)</span><br><span class="line">OnUpdate(Configuration) ([]<span class="keyword">byte</span>, error)</span><br><span class="line">SetConfig(*api.ConfigMap)</span><br><span class="line">SetListers(StoreLister)</span><br><span class="line">BackendDefaults() defaults.Backend</span><br><span class="line">Info() *BackendInfo</span><br><span class="line">OverrideFlags(*pflag.FlagSet)</span><br><span class="line">DefaultIngressClass() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个接口就是ingress controller留给用户自已实现代码的地方，只要实现了这个接口，那么你自定义的ingress controller也就完成了。这里先点一下最重要的两个方法 OnUpdate和Reload<br>当资源发生变化时，框架会调用OnUpdate方法，并将资源配置信息传入，用户根据这些配置信息生成配置（以[]byte返回），然后框架再调用Reload方法，用户在这个方法中可以重新加载配置(例如 nginx -r reload) 嘿嘿是不是一个很典型的模板方法！！</p><p>NewIngressController的主要工作是初始化命令行参数，接着在方法最后调用包内私有函数newIngressController</p><h2 id="newIngressController"><a href="#newIngressController" class="headerlink" title="newIngressController"></a>newIngressController</h2><p>这个包内方法是整个框架核心所在，它真正的初始化了IngressController<br>来看函数定义：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newIngressController</span><span class="params">(config *Configuration)</span> *<span class="title">GenericController</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的Configuration包含了从命令行传进来的参数配置，以及用户实现的一个Controller接口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Configuration <span class="keyword">struct</span> &#123;</span><br><span class="line">Client clientset.Interface</span><br><span class="line">ResyncPeriod   time.Duration</span><br><span class="line">DefaultService <span class="keyword">string</span></span><br><span class="line">IngressClass   <span class="keyword">string</span></span><br><span class="line">Namespace      <span class="keyword">string</span></span><br><span class="line">ConfigMapName  <span class="keyword">string</span></span><br><span class="line">TCPConfigMapName <span class="keyword">string</span></span><br><span class="line">UDPConfigMapName      <span class="keyword">string</span></span><br><span class="line">DefaultSSLCertificate <span class="keyword">string</span></span><br><span class="line">DefaultHealthzURL     <span class="keyword">string</span></span><br><span class="line">DefaultIngressClass   <span class="keyword">string</span></span><br><span class="line">PublishService <span class="keyword">string</span></span><br><span class="line">    <span class="comment">//用户实现的接口</span></span><br><span class="line">Backend ingress.Controller</span><br><span class="line">UpdateStatus <span class="keyword">bool</span></span><br><span class="line">ElectionID   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的Backed就是上文提到的Controller接口，接下来看一下该方法做了哪些事情<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">eventBroadcaster := record.NewBroadcaster()</span><br><span class="line">eventBroadcaster.StartLogging(glog.Infof)</span><br><span class="line">eventBroadcaster.StartRecordingToSink(&amp;unversionedcore.EventSinkImpl&#123;</span><br><span class="line">    Interface: config.Client.Core().Events(config.Namespace),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ic := GenericController&#123;</span><br><span class="line">    cfg:             config,</span><br><span class="line">    stopLock:        &amp;sync.Mutex&#123;&#125;,</span><br><span class="line">    stopCh:          <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    syncRateLimiter: flowcontrol.NewTokenBucketRateLimiter(<span class="number">0.1</span>, <span class="number">1</span>),</span><br><span class="line">    recorder: eventBroadcaster.NewRecorder(api.EventSource&#123;</span><br><span class="line">        Component: <span class="string">&quot;ingress-controller&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    sslCertTracker: newSSLCertTracker(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ic.syncQueue = task.NewTaskQueue(ic.sync)</span><br><span class="line">ic.secretQueue = task.NewTaskQueue(ic.syncSecret)</span><br></pre></td></tr></table></figure></p><p>这段代码做了三件事情：<br>1.初始化了一个事件广播器<br>2.初始化了GenericController，将前面的配置传过去，并且new了一个事件的recorder，这个recorder用来在后面产生事件。<br>3.初始化了syncQueue和secretQueue</p><p>这两个Queue有什么作用呢?来看一下它的定义和注释:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewTaskQueue creates a new task queue with the given sync function.</span></span><br><span class="line"><span class="comment">// The sync function is called for every element inserted into the queue.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTaskQueue</span><span class="params">(syncFn <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span>) *<span class="title">Queue</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewCustomTaskQueue(syncFn, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注释已经解释得很清楚了，这个方法所创建的queue，每接收一个元素就会调用一个syncFn，并将该元素作为该方法的参数传进去。可以看到ic.syncQueue和ic.secretQueue对应的处理方法为ic.sync和ic.syncSecret，这两个方法到底做了些什么事情，我们后面再分析。<br>这里还有一个问题就是为什么不直接调用syncFn而要通过队列呢，很显然这里队列的作用就是将并行的事情串行化掉而已。</p><h2 id="kubernetes客户端的资源监听机制"><a href="#kubernetes客户端的资源监听机制" class="headerlink" title="kubernetes客户端的资源监听机制"></a>kubernetes客户端的资源监听机制</h2><p>kubernetes的资源监听机制是一个相对比较复杂的过程，首先来看一下这段定义<br>在 “k8s.io/kubernetes/pkg/client/cache” 包下面存在着<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResourceEventHandlerFuncs <span class="keyword">struct</span> &#123;</span><br><span class="line">AddFunc    <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line">UpdateFunc <span class="function"><span class="keyword">func</span><span class="params">(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line">DeleteFunc <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样一样结构体，该结构体实现了以下接口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ResourceEventHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">OnAdd(obj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">OnUpdate(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">OnDelete(obj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResourceEventHandlerFuncs)</span> <span class="title">OnAdd</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.AddFunc != <span class="literal">nil</span> &#123;</span><br><span class="line">r.AddFunc(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResourceEventHandlerFuncs)</span> <span class="title">OnUpdate</span><span class="params">(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.UpdateFunc != <span class="literal">nil</span> &#123;</span><br><span class="line">r.UpdateFunc(oldObj, newObj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResourceEventHandlerFuncs)</span> <span class="title">OnDelete</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.DeleteFunc != <span class="literal">nil</span> &#123;</span><br><span class="line">r.DeleteFunc(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接着再来看一下NewInformer函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInformer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">lw ListerWatcher,</span></span></span><br><span class="line"><span class="params"><span class="function">objType runtime.Object,</span></span></span><br><span class="line"><span class="params"><span class="function">resyncPeriod time.Duration,</span></span></span><br><span class="line"><span class="params"><span class="function">h ResourceEventHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> <span class="params">(Store, *Controller)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个函数初始化一个消息通知器，ListerWatcher指定了监听资源的方法，一旦资源发生了变化（增、删、改），就会触发ResourceEventHandler相应的函数。这里是一个观察者模式的简化版，将多播委托简化成单播委托，并且将多个事件聚合在了一起。好了，这里要说一下整个controller最重要的list和watch模型。</p><h2 id="List和Watch"><a href="#List和Watch" class="headerlink" title="List和Watch"></a>List和Watch</h2><p>我们先来看一下这段代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ic.ingLister.Store, ic.ingController = cache.NewInformer(</span><br><span class="line">cache.NewListWatchFromClient(ic.cfg.Client.Extensions().RESTClient(), <span class="string">&quot;ingresses&quot;</span>, ic.cfg.Namespace, fields.Everything()),</span><br><span class="line">&amp;extensions.Ingress&#123;&#125;, ic.cfg.ResyncPeriod, ingEventHandler)</span><br></pre></td></tr></table></figure></p><p>顺藤摸瓜：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewListWatchFromClient</span><span class="params">(c Getter, resource <span class="keyword">string</span>, namespace <span class="keyword">string</span>, fieldSelector fields.Selector)</span> *<span class="title">ListWatch</span></span> &#123;</span><br><span class="line">listFunc := <span class="function"><span class="keyword">func</span><span class="params">(options api.ListOptions)</span> <span class="params">(runtime.Object, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fieldSelector).</span><br><span class="line">Do().</span><br><span class="line">Get()</span><br><span class="line">&#125;</span><br><span class="line">watchFunc := <span class="function"><span class="keyword">func</span><span class="params">(options api.ListOptions)</span> <span class="params">(watch.Interface, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Get().</span><br><span class="line">Prefix(<span class="string">&quot;watch&quot;</span>).</span><br><span class="line">Namespace(namespace).</span><br><span class="line">Resource(resource).</span><br><span class="line">VersionedParams(&amp;options, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fieldSelector).</span><br><span class="line">Watch()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;ListWatch&#123;ListFunc: listFunc, WatchFunc: watchFunc&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>到这里我们找到了controller如何和apiserver交互的代码，既然找到了，那我们就动起手来，看看它具体干了一些什么事睛。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createApiserverClient</span><span class="params">(apiserverHost <span class="keyword">string</span>, kubeConfig <span class="keyword">string</span>)</span> <span class="params">(*client.Clientset, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">clientConfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(</span><br><span class="line">&amp;clientcmd.ClientConfigLoadingRules&#123;ExplicitPath: kubeConfig&#125;,</span><br><span class="line">&amp;clientcmd.ConfigOverrides&#123;ClusterInfo: clientcmdapi.Cluster&#123;Server: apiserverHost&#125;&#125;)</span><br><span class="line"></span><br><span class="line">cfg, err := clientConfig.ClientConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg.QPS = defaultQPS</span><br><span class="line">cfg.Burst = defaultBurst</span><br><span class="line">cfg.ContentType = <span class="string">&quot;application/vnd.kubernetes.protobuf&quot;</span></span><br><span class="line">proxy := <span class="function"><span class="keyword">func</span><span class="params">(_ *http.Request)</span> <span class="params">(*url.URL, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> url.Parse(<span class="string">&quot;http://127.0.0.1:8888&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">cfg.Transport = &amp;http.Transport&#123;Proxy: proxy&#125;</span><br><span class="line"></span><br><span class="line">glog.Infof(<span class="string">&quot;Creating API server client for %s&quot;</span>, cfg.Host)</span><br><span class="line"></span><br><span class="line">client, err := client.NewForConfig(cfg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> client, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kubeClient, err := createApiserverClient(*apiserverHost, *kubeConfigFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list, err := kubeClient.Extensions().RESTClient().</span><br><span class="line">Get().</span><br><span class="line">Namespace(<span class="string">&quot;default&quot;</span>).</span><br><span class="line">Resource(<span class="string">&quot;ingresses&quot;</span>).</span><br><span class="line">VersionedParams(&amp;api.ListOptions&#123;ResourceVersion: <span class="string">&quot;0&quot;</span>&#125;, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fields.Everything()).</span><br><span class="line">Do().</span><br><span class="line">Get()</span><br></pre></td></tr></table></figure><p>在创建client的时候我们设置了http代理，这里我用了fiddler工具用于抓取http的请求内容。接着我们请求了default名称空间下的ingresses资源列表，设置了resourceVersion为0<br>在fiddler中我们发现其请求了/apis/extensions/v1beta1/namespaces/default/ingresses?resourceVersion=0这个api<br>并且返回了一下的内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;IngressList&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;apiVersion&quot;</span>: <span class="string">&quot;extensions/v1beta1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;selfLink&quot;</span>: <span class="string">&quot;/apis/extensions/v1beta1/namespaces/default/ingresses&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resourceVersion&quot;</span>: <span class="string">&quot;2264497&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;nginx-test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;selfLink&quot;</span>: <span class="string">&quot;/apis/extensions/v1beta1/namespaces/default/ingresses/nginx-test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uid&quot;</span>: <span class="string">&quot;fa01f640-231f-11e7-b7f6-ecf4bbc532cc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;resourceVersion&quot;</span>: <span class="string">&quot;2264486&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;generation&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2017-04-17T03:43:10Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;ingress.kubernetes.io/force-ssl-redirect&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;kubernetes.io/ingress.class&quot;</span>: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;spec&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;stickyingress.example.com&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;paths&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;backend&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;serviceName&quot;</span>: <span class="string">&quot;echoheaders-x&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;servicePort&quot;</span>: <span class="number">80</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;loadBalancer&quot;</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;yangz-lb-test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;selfLink&quot;</span>: <span class="string">&quot;/apis/extensions/v1beta1/namespaces/default/ingresses/yangz-lb-test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uid&quot;</span>: <span class="string">&quot;fef1d670-231f-11e7-b7f6-ecf4bbc532cc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;resourceVersion&quot;</span>: <span class="string">&quot;2264497&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;generation&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2017-04-17T03:43:18Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;ingress.kubernetes.io/force-ssl-redirect&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;kubernetes.io/ingress.class&quot;</span>: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;spec&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;www.yangz.com&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;paths&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;backend&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;serviceName&quot;</span>: <span class="string">&quot;yangz-lb-test&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;servicePort&quot;</span>: <span class="number">80</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;loadBalancer&quot;</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段json列出了当前default名称空间下的所有ingress资源的情况。有了这些列表数据（可以使用同样的方法列出service,node,secret等其它资源），对于我们生成backend的配置（如nginx的配置）就已经足够了，我们可以通过不停的轮询这个接口，一旦发现数据发生了变化，我们就重新生成配置并加载它。一切工作到这里似乎就可以结束了，但是细心的读者可能会发生我们还有一watch接口。这里要记住list接口返回的resourceVersion:2264497</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch, err := kubeClient.Extensions().RESTClient().</span><br><span class="line">Get().</span><br><span class="line">Prefix(<span class="string">&quot;watch&quot;</span>).</span><br><span class="line">Namespace(<span class="string">&quot;default&quot;</span>).</span><br><span class="line">Resource(<span class="string">&quot;ingresses&quot;</span>).</span><br><span class="line">VersionedParams(&amp;api.ListOptions&#123;ResourceVersion: <span class="string">&quot;2264497&quot;</span>&#125;, api.ParameterCodec).</span><br><span class="line">FieldsSelectorParam(fields.Everything()).</span><br><span class="line">Watch()</span><br></pre></td></tr></table></figure><p>通过fiddler可以看到请求了/apis/extensions/v1beta1/watch/namespaces/default/ingresses?resourceVersion=2264497这个接口，值得注意的是在返回的http头是这样子的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/vnd.kubernetes.protobuf;stream=watch</span><br><span class="line">Date: Mon, 17 Apr 2017 03:54:47 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><br>这个时候这个http请求是没有Content-Lenth头，而且服务端一直hold住这个请求，注意Transfer-Encoding: chunked。对于http服务端主动通知客户端的，除了轮询外，还有使用这种方式的，这也是大多数web聊天工具使用的方式。<br>这时候我们发现通过resourceVersion=2264497请求不到任何的东西，这是因为对于2264497这个版本号来说，当前ingress资源并没有发生任何变化<br>我们再做以下实验:在master机上运行kubectl delete -n default ing –all<br>这个命令删除default名称空间下面的所有ingress资源，这时候可以发下刚才hold住的http请求立即返回了一些信息：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;DELETED&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;object&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;Ingress&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;apiVersion&quot;</span>: <span class="string">&quot;extensions/v1beta1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;nginx-test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selfLink&quot;</span>: <span class="string">&quot;/apis/extensions/v1beta1/namespaces/default/ingresses/nginx-test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>: <span class="string">&quot;fa01f640-231f-11e7-b7f6-ecf4bbc532cc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;resourceVersion&quot;</span>: <span class="string">&quot;2273842&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;generation&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2017-04-17T03:43:10Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;ingress.kubernetes.io/force-ssl-redirect&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;kubernetes.io/ingress.class&quot;</span>: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;spec&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;stickyingress.example.com&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;paths&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;backend&quot;</span>: &#123;</span><br><span class="line">                                    <span class="attr">&quot;serviceName&quot;</span>: <span class="string">&quot;echoheaders-x&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;servicePort&quot;</span>: <span class="number">80</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;loadBalancer&quot;</span>: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;DELETED&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;object&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;Ingress&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;apiVersion&quot;</span>: <span class="string">&quot;extensions/v1beta1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;yangz-lb-test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selfLink&quot;</span>: <span class="string">&quot;/apis/extensions/v1beta1/namespaces/default/ingresses/yangz-lb-test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>: <span class="string">&quot;fef1d670-231f-11e7-b7f6-ecf4bbc532cc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;resourceVersion&quot;</span>: <span class="string">&quot;2273843&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;generation&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2017-04-17T03:43:18Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;ingress.kubernetes.io/force-ssl-redirect&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;kubernetes.io/ingress.class&quot;</span>: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;spec&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;www.yangz.com&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;paths&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;backend&quot;</span>: &#123;</span><br><span class="line">                                    <span class="attr">&quot;serviceName&quot;</span>: <span class="string">&quot;yangz-lb-test&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;servicePort&quot;</span>: <span class="number">80</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;loadBalancer&quot;</span>: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>json显示了我们所删掉的ingress资源信息，注意其中的resourceVersion，这个时候我们修改watch接口中的resourceVersion为2273842的话，那么其返回内容会变成<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;DELETED&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;object&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;Ingress&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;apiVersion&quot;</span>: <span class="string">&quot;extensions/v1beta1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;yangz-lb-test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;selfLink&quot;</span>: <span class="string">&quot;/apis/extensions/v1beta1/namespaces/default/ingresses/yangz-lb-test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>: <span class="string">&quot;fef1d670-231f-11e7-b7f6-ecf4bbc532cc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;resourceVersion&quot;</span>: <span class="string">&quot;2273843&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;generation&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2017-04-17T03:43:18Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;ingress.kubernetes.io/force-ssl-redirect&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;kubernetes.io/ingress.class&quot;</span>: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;spec&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;www.yangz.com&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;paths&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;backend&quot;</span>: &#123;</span><br><span class="line">                                    <span class="attr">&quot;serviceName&quot;</span>: <span class="string">&quot;yangz-lb-test&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;servicePort&quot;</span>: <span class="number">80</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;loadBalancer&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>也就是说，watch接口根据请求的版本号返回当前服务器的状态与给定版本之间的差异。例如在版本2264497和2273843之间，有两个ingress被删除，而2273842和2273843这两个版本之间只有一个ingress被删除。</p><p>小结：listwatch在初始化的时候先通过list接口获取当前资源的列表以及resourceVersion，接着再通过watch接口监听资源的变化。</p><h2 id="事件的传递"><a href="#事件的传递" class="headerlink" title="事件的传递"></a>事件的传递</h2><p>了解了资源的监听机制，那么程序是在什么时候开始监听的，并且发生变化后事件是如何传递的呢？<br>在上文件的NewInformer函数返回了两个值:cache.Store和cache.Controller，其中Controller在GenericController的Start方法中被用到<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ic GenericController)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">glog.Infof(<span class="string">&quot;starting Ingress controller&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> ic.ingController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.endpController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.svcController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.nodeController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.secrController.Run(ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.mapController.Run(ic.stopCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> ic.secretQueue.Run(<span class="number">5</span>*time.Second, ic.stopCh)</span><br><span class="line"><span class="keyword">go</span> ic.syncQueue.Run(<span class="number">5</span>*time.Second, ic.stopCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ic.syncStatus != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">go</span> ic.syncStatus.Run(ic.stopCh)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;-ic.stopCh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个方法就是在文章开头的main函数中被调用到的ic.Start方法,这里可以看到有6个controller，分别对应了6种资源:ingresses,endpoints,services,nodes,secrets,configmaps。在调用cache.Controller的Run方法时，每个Controller都会开始ListWatch流程，对相应的资源进行监听。</p><p>看一下Run方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span> <span class="title">Run</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> utilruntime.HandleCrash()</span><br><span class="line">r := NewReflector(</span><br><span class="line">c.config.ListerWatcher,</span><br><span class="line">c.config.ObjectType,</span><br><span class="line">c.config.Queue,</span><br><span class="line">c.config.FullResyncPeriod,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">c.reflectorMutex.Lock()</span><br><span class="line">c.reflector = r</span><br><span class="line">c.reflectorMutex.Unlock()</span><br><span class="line"></span><br><span class="line">r.RunUntil(stopCh)</span><br><span class="line"></span><br><span class="line">wait.Until(c.processLoop, time.Second, stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实际运行是通过Reflector的RunUntil<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">RunUntil</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">glog.V(<span class="number">3</span>).Infof(<span class="string">&quot;Starting reflector %v (%s) from %s&quot;</span>, r.expectedType, r.resyncPeriod, r.name)</span><br><span class="line"><span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.ListAndWatch(stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line">utilruntime.HandleError(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, r.period, stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Until loops until stop channel is closed, running f every period.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Until is syntactic sugar on top of JitterUntil with zero jitter factor and</span></span><br><span class="line"><span class="comment">// with sliding = true (which means the timer for period starts after the f</span></span><br><span class="line"><span class="comment">// completes).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Until</span><span class="params">(f <span class="keyword">func</span>()</span>, <span class="title">period</span> <span class="title">time</span>.<span class="title">Duration</span>, <span class="title">stopCh</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125;) &#123;</span><br><span class="line">JitterUntil(f, period, <span class="number">0.0</span>, <span class="literal">true</span>, stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注释里面说到，Until循环调用f函数，每隔period时长调用一次，直到stop channel被关闭。可以看到这个period参数是在应用程序启动的时候通过命令行参数指定的，如果不指定，则默认值为60s<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resyncPeriod = flags.Duration(<span class="string">&quot;sync-period&quot;</span>, <span class="number">60</span>*time.Second,</span><br><span class="line"><span class="string">`Relist and confirm cloud resources this often.`</span>)</span><br></pre></td></tr></table></figure><br>笔者猜测，这么做的目的应该是防止watch的时候http连接异常断开之后导致后续的监听失效，毕竟http无法保证连接的稳定性。</p><p>那么真正干活的地方应该就是Reflactor的ListAndWatch方法了<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListAndWatch first lists all items and get the resource version at the moment of call,</span></span><br><span class="line"><span class="comment">// and then use the resource version to watch.</span></span><br><span class="line"><span class="comment">// It returns error if ListAndWatch didn&#x27;t even try to initialize watch.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">ListAndWatch</span><span class="params">(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">glog.V(<span class="number">3</span>).Infof(<span class="string">&quot;Listing and watching %v from %s&quot;</span>, r.expectedType, r.name)</span><br><span class="line"><span class="keyword">var</span> resourceVersion <span class="keyword">string</span></span><br><span class="line">resyncCh, cleanup := r.resyncChan()</span><br><span class="line"><span class="keyword">defer</span> cleanup()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Explicitly set &quot;0&quot; as resource version - it&#x27;s fine for the List()</span></span><br><span class="line"><span class="comment">// to be served from cache and potentially be delayed relative to</span></span><br><span class="line"><span class="comment">// etcd contents. Reflector framework will catch up via Watch() eventually.</span></span><br><span class="line">options := api.ListOptions&#123;ResourceVersion: <span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line">list, err := r.listerWatcher.List(options)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s: Failed to list %v: %v&quot;</span>, r.name, r.expectedType, err)</span><br><span class="line">&#125;</span><br><span class="line">listMetaInterface, err := meta.ListAccessor(list)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s: Unable to understand list result %#v: %v&quot;</span>, r.name, list, err)</span><br><span class="line">&#125;</span><br><span class="line">resourceVersion = listMetaInterface.GetResourceVersion()</span><br><span class="line">items, err := meta.ExtractList(list)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s: Unable to understand list result %#v (%v)&quot;</span>, r.name, list, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := r.syncWith(items, resourceVersion); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s: Unable to sync list result: %v&quot;</span>, r.name, err)</span><br><span class="line">&#125;</span><br><span class="line">r.setLastSyncResourceVersion(resourceVersion)</span><br><span class="line"></span><br><span class="line">resyncerrc := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">1</span>)</span><br><span class="line">cancelCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(cancelCh)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-resyncCh:</span><br><span class="line"><span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-cancelCh:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">glog.V(<span class="number">4</span>).Infof(<span class="string">&quot;%s: forcing resync&quot;</span>, r.name)</span><br><span class="line"><span class="keyword">if</span> err := r.store.Resync(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">resyncerrc &lt;- err</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cleanup()</span><br><span class="line">resyncCh, cleanup = r.resyncChan()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">timemoutseconds := <span class="keyword">int64</span>(minWatchTimeout.Seconds() * (rand.Float64() + <span class="number">1.0</span>))</span><br><span class="line">options = api.ListOptions&#123;</span><br><span class="line">ResourceVersion: resourceVersion,</span><br><span class="line"><span class="comment">// We want to avoid situations of hanging watchers. Stop any wachers that do not</span></span><br><span class="line"><span class="comment">// receive any events within the timeout window.</span></span><br><span class="line">TimeoutSeconds: &amp;timemoutseconds,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w, err := r.listerWatcher.Watch(options)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">case</span> io.EOF:</span><br><span class="line"><span class="comment">// watch closed normally</span></span><br><span class="line"><span class="keyword">case</span> io.ErrUnexpectedEOF:</span><br><span class="line">glog.V(<span class="number">1</span>).Infof(<span class="string">&quot;%s: Watch for %v closed with unexpected EOF: %v&quot;</span>, r.name, r.expectedType, err)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">&quot;%s: Failed to watch %v: %v&quot;</span>, r.name, r.expectedType, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If this is &quot;connection refused&quot; error, it means that most likely apiserver is not responsive.</span></span><br><span class="line"><span class="comment">// It doesn&#x27;t make sense to re-list all objects because most likely we will be able to restart</span></span><br><span class="line"><span class="comment">// watch where we ended.</span></span><br><span class="line"><span class="comment">// If that&#x27;s the case wait and resend watch request.</span></span><br><span class="line"><span class="keyword">if</span> urlError, ok := err.(*url.Error); ok &#123;</span><br><span class="line"><span class="keyword">if</span> opError, ok := urlError.Err.(*net.OpError); ok &#123;</span><br><span class="line"><span class="keyword">if</span> errno, ok := opError.Err.(syscall.Errno); ok &amp;&amp; errno == syscall.ECONNREFUSED &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := r.watchHandler(w, &amp;resourceVersion, resyncerrc, stopCh); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != errorStopRequested &#123;</span><br><span class="line">glog.Warningf(<span class="string">&quot;%s: watch of %v ended with: %v&quot;</span>, r.name, r.expectedType, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于watch资源的处理方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchHandler watches w and keeps *resourceVersion up to date.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">watchHandler</span><span class="params">(w watch.Interface, resourceVersion *<span class="keyword">string</span>, errc <span class="keyword">chan</span> error, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">eventCount := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stopping the watcher should be idempotent and if we return from this function there&#x27;s no way</span></span><br><span class="line"><span class="comment">// we&#x27;re coming back in with the same watch interface.</span></span><br><span class="line"><span class="keyword">defer</span> w.Stop()</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line"><span class="keyword">return</span> errorStopRequested</span><br><span class="line"><span class="keyword">case</span> err := &lt;-errc:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> event, ok := &lt;-w.ResultChan():</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> loop</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> event.Type == watch.Error &#123;</span><br><span class="line"><span class="keyword">return</span> apierrs.FromObject(event.Object)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> e, a := r.expectedType, reflect.TypeOf(event.Object); e != <span class="literal">nil</span> &amp;&amp; e != a &#123;</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">&quot;%s: expected type %v, but watch event object had type %v&quot;</span>, r.name, e, a))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">meta, err := meta.Accessor(event.Object)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">&quot;%s: unable to understand watch event %#v&quot;</span>, r.name, event))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">newResourceVersion := meta.GetResourceVersion()</span><br><span class="line"><span class="keyword">switch</span> event.Type &#123;</span><br><span class="line"><span class="keyword">case</span> watch.Added:</span><br><span class="line">r.store.Add(event.Object)</span><br><span class="line"><span class="keyword">case</span> watch.Modified:</span><br><span class="line">r.store.Update(event.Object)</span><br><span class="line"><span class="keyword">case</span> watch.Deleted:</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Will any consumers need access to the &quot;last known</span></span><br><span class="line"><span class="comment">// state&quot;, which is passed in event.Object? If so, may need</span></span><br><span class="line"><span class="comment">// to change this.</span></span><br><span class="line">r.store.Delete(event.Object)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">utilruntime.HandleError(fmt.Errorf(<span class="string">&quot;%s: unable to understand watch event %#v&quot;</span>, r.name, event))</span><br><span class="line">&#125;</span><br><span class="line">*resourceVersion = newResourceVersion</span><br><span class="line">r.setLastSyncResourceVersion(newResourceVersion)</span><br><span class="line">eventCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watchDuration := time.Now().Sub(start)</span><br><span class="line"><span class="keyword">if</span> watchDuration &lt; <span class="number">1</span>*time.Second &amp;&amp; eventCount == <span class="number">0</span> &#123;</span><br><span class="line">glog.V(<span class="number">4</span>).Infof(<span class="string">&quot;%s: Unexpected watch close - watch lasted less than a second and no items received&quot;</span>, r.name)</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;very short watch&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">glog.V(<span class="number">4</span>).Infof(<span class="string">&quot;%s: Watch close - %v total %v items received&quot;</span>, r.name, r.expectedType, eventCount)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里发现资源变化的时候，是通过cache.Store这样一个接口来存储变化的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Store <span class="keyword">interface</span> &#123;</span><br><span class="line">Add(obj <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">Update(obj <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">Delete(obj <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">List() []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">ListKeys() []<span class="keyword">string</span></span><br><span class="line">Get(obj <span class="keyword">interface</span>&#123;&#125;) (item <span class="keyword">interface</span>&#123;&#125;, exists <span class="keyword">bool</span>, err error)</span><br><span class="line">GetByKey(key <span class="keyword">string</span>) (item <span class="keyword">interface</span>&#123;&#125;, exists <span class="keyword">bool</span>, err error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace will delete the contents of the store, using instead the</span></span><br><span class="line"><span class="comment">// given list. Store takes ownership of the list, you should not reference</span></span><br><span class="line"><span class="comment">// it after calling this function.</span></span><br><span class="line">Replace([]<span class="keyword">interface</span>&#123;&#125;, <span class="keyword">string</span>) error</span><br><span class="line">Resync() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个Store是在NewInformer的时候初始化的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fifo := NewDeltaFIFO(MetaNamespaceKeyFunc, <span class="literal">nil</span>, clientState)</span><br></pre></td></tr></table></figure></p><p>并且在cache.Controller调用Run的时候，开始对该队列进行监听<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wait.Until(c.processLoop, time.Second, stopCh)</span><br></pre></td></tr></table></figure><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span> <span class="title">processLoop</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">obj, err := c.config.Queue.Pop(PopProcessFunc(c.config.Process))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.config.RetryOnError &#123;</span><br><span class="line"><span class="comment">// This is the safe way to re-enqueue.</span></span><br><span class="line">c.config.Queue.AddIfNotPresent(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>同样c.config.Process也是在NewInformer的时候定义的：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Process: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// from oldest to newest</span></span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> obj.(Deltas) &#123;</span><br><span class="line"><span class="keyword">switch</span> d.Type &#123;</span><br><span class="line"><span class="keyword">case</span> Sync, Added, Updated:</span><br><span class="line"><span class="keyword">if</span> old, exists, err := clientState.Get(d.Object); err == <span class="literal">nil</span> &amp;&amp; exists &#123;</span><br><span class="line"><span class="keyword">if</span> err := clientState.Update(d.Object); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">h.OnUpdate(old, d.Object)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := clientState.Add(d.Object); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">h.OnAdd(d.Object)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> Deleted:</span><br><span class="line"><span class="keyword">if</span> err := clientState.Delete(d.Object); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">h.OnDelete(d.Object)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的h就是上文提到的ResourceEventHandler接口。当资源发化变化时，会先将资源保存到本地缓存中，再触发对应的事件，这里将资源缓存起来，以便后续的程序可以直接取，不用再次请求服务端。</p><p>这里简单看一下对于ingress资源发生变动时相应的处理逻辑:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">ingEventHandler := cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">AddFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">addIng := obj.(*extensions.Ingress)</span><br><span class="line"><span class="keyword">if</span> !class.IsValid(addIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &#123;</span><br><span class="line">glog.Infof(<span class="string">&quot;ignoring add for ingress %v based on annotation %v&quot;</span>, addIng.Name, class.IngressKey)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ic.recorder.Eventf(addIng, api.EventTypeNormal, <span class="string">&quot;CREATE&quot;</span>, fmt.Sprintf(<span class="string">&quot;Ingress %s/%s&quot;</span>, addIng.Namespace, addIng.Name))</span><br><span class="line">ic.syncQueue.Enqueue(obj)</span><br><span class="line"><span class="keyword">if</span> ic.annotations.ContainsCertificateAuth(addIng) &#123;</span><br><span class="line">s, err := ic.annotations.CertificateAuthSecret(addIng)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">ic.secretQueue.Enqueue(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">DeleteFunc: <span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">delIng := obj.(*extensions.Ingress)</span><br><span class="line"><span class="keyword">if</span> !class.IsValid(delIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &#123;</span><br><span class="line">glog.Infof(<span class="string">&quot;ignoring delete for ingress %v based on annotation %v&quot;</span>, delIng.Name, class.IngressKey)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ic.recorder.Eventf(delIng, api.EventTypeNormal, <span class="string">&quot;DELETE&quot;</span>, fmt.Sprintf(<span class="string">&quot;Ingress %s/%s&quot;</span>, delIng.Namespace, delIng.Name))</span><br><span class="line">ic.syncQueue.Enqueue(obj)</span><br><span class="line">&#125;,</span><br><span class="line">UpdateFunc: <span class="function"><span class="keyword">func</span><span class="params">(old, cur <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">oldIng := old.(*extensions.Ingress)</span><br><span class="line">curIng := cur.(*extensions.Ingress)</span><br><span class="line"><span class="keyword">if</span> !class.IsValid(curIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &amp;&amp;</span><br><span class="line">!class.IsValid(oldIng, ic.cfg.IngressClass, ic.cfg.DefaultIngressClass) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !reflect.DeepEqual(old, cur) &#123;</span><br><span class="line">upIng := cur.(*extensions.Ingress)</span><br><span class="line">ic.recorder.Eventf(upIng, api.EventTypeNormal, <span class="string">&quot;UPDATE&quot;</span>, fmt.Sprintf(<span class="string">&quot;Ingress %s/%s&quot;</span>, upIng.Namespace, upIng.Name))</span><br><span class="line"><span class="comment">// the referenced secret is different?</span></span><br><span class="line"><span class="keyword">if</span> diff := pretty.Compare(curIng.Spec.TLS, oldIng.Spec.TLS); diff != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, secretName := <span class="keyword">range</span> curIng.Spec.TLS &#123;</span><br><span class="line">secKey := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> secretName.SecretName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">secKey = fmt.Sprintf(<span class="string">&quot;%v/%v&quot;</span>, curIng.Namespace, secretName.SecretName)</span><br><span class="line">&#125;</span><br><span class="line">glog.Infof(<span class="string">&quot;TLS section in ingress %v/%v changed (secret is now \&quot;%v\&quot;)&quot;</span>, upIng.Namespace, upIng.Name, secKey)</span><br><span class="line"><span class="comment">// default cert is already queued</span></span><br><span class="line"><span class="keyword">if</span> secKey != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// we need to wait until the ingress store is updated</span></span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">key, err := ic.GetSecret(secKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Errorf(<span class="string">&quot;unexpected error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> key != <span class="literal">nil</span> &#123;</span><br><span class="line">ic.secretQueue.Enqueue(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ic.annotations.ContainsCertificateAuth(upIng) &#123;</span><br><span class="line">s, err := ic.annotations.CertificateAuthSecret(upIng)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">ic.secretQueue.Enqueue(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ic.syncQueue.Enqueue(cur)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里主要处理的就是对ingress资源的tsl节点，如果发现了对应的tsl资源，则会对secretQueue进行Enqueue操作。</p><p>到这里，整个框架的来龙去脉就基本上理清楚了，现在回到这两个队列上面:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic.syncQueue = task.NewTaskQueue(ic.sync)</span><br><span class="line">ic.secretQueue = task.NewTaskQueue(ic.syncSecret)</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ic *GenericController)</span> <span class="title">sync</span><span class="params">(e <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">ic.syncRateLimiter.Accept()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ic.syncQueue.IsShuttingDown() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !ic.controllersInSync() &#123;</span><br><span class="line">time.Sleep(podStoreSyncedPollPeriod)</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;deferring sync till endpoints controller has synced&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstreams, servers := ic.getBackendServers()</span><br><span class="line"><span class="keyword">var</span> passUpstreams []*ingress.SSLPassthroughBackend</span><br><span class="line"><span class="keyword">for</span> _, server := <span class="keyword">range</span> servers &#123;</span><br><span class="line"><span class="keyword">if</span> !server.SSLPassthrough &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, loc := <span class="keyword">range</span> server.Locations &#123;</span><br><span class="line"><span class="keyword">if</span> loc.Path != rootLocation &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">passUpstreams = <span class="built_in">append</span>(passUpstreams, &amp;ingress.SSLPassthroughBackend&#123;</span><br><span class="line">Backend:  loc.Backend,</span><br><span class="line">Hostname: server.Hostname,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := ic.cfg.Backend.OnUpdate(ingress.Configuration&#123;</span><br><span class="line">Backends:            upstreams,</span><br><span class="line">Servers:             servers,</span><br><span class="line">TCPEndpoints:        ic.getStreamServices(ic.cfg.TCPConfigMapName, api.ProtocolTCP),</span><br><span class="line">UDPEndpoints:        ic.getStreamServices(ic.cfg.UDPConfigMapName, api.ProtocolUDP),</span><br><span class="line">PassthroughBackends: passUpstreams,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out, reloaded, err := ic.cfg.Backend.Reload(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">incReloadErrorCount()</span><br><span class="line">glog.Errorf(<span class="string">&quot;unexpected failure restarting the backend: \n%v&quot;</span>, <span class="keyword">string</span>(out))</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> reloaded &#123;</span><br><span class="line">glog.Infof(<span class="string">&quot;ingress backend successfully reloaded...&quot;</span>)</span><br><span class="line">incReloadCount()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将一切资源组织成ingress.Configuration结构传给OnUpdate方法，OnUpdate由各个Ingress Controller实现方实现，生成对应的配置数据（例如nginx的config）以byte切片返回，然后再将这些配置数据传给Reload方法，这个方法同样由第三方实现。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文通过分析源码的方式理清了整个Ingress Controller框架的来龙去脉，在下一篇文章中，通过对Nginx Ingress Controller源码分析，来看一下如何实现一个Ingress Controller。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过上一篇文章的介绍，我们简单了解了整个Ingress的运行机制，这里我们将通过Ingress Controller的源码来更深入分析其运行过程。&lt;br&gt;要了解本文的内容我们要先了解一个概念，就是kuberentes的events&lt;/p&gt;
&lt;h1 id=&quot;events&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>centos7-kubernetes-deploy</title>
    <link href="http://yoursite.com/2017/03/20/centos7-kubernetes-deploy/"/>
    <id>http://yoursite.com/2017/03/20/centos7-kubernetes-deploy/</id>
    <published>2017-03-20T07:58:17.000Z</published>
    <updated>2019-02-03T09:20:18.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="master"><a href="#master" class="headerlink" title="master"></a>master</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">kube_master=<span class="string">&quot;--master=http:\/\/127\.0\.0\.1:8080&quot;</span></span><br><span class="line"></span><br><span class="line">etcd_listen_client_urls=<span class="string">&quot;http:\/\/localhost:2379&quot;</span></span><br><span class="line"></span><br><span class="line">etcd_advertise_client_urls=<span class="string">&quot;http:\/\/localhost:2379&quot;</span></span><br><span class="line"></span><br><span class="line">kube_api_address=<span class="string">&quot;--insecure-bind-address=127\.0\.0\.1&quot;</span></span><br><span class="line"></span><br><span class="line">kube_api_port=<span class="string">&quot;--port=8080&quot;</span></span><br><span class="line"></span><br><span class="line">kubelet_port=<span class="string">&quot;--kubelet-port=10250&quot;</span></span><br><span class="line"></span><br><span class="line">kube_etcd_servers=<span class="string">&quot;--etcd-servers=http:\/\/127.0.0.1:2379&quot;</span></span><br><span class="line"></span><br><span class="line">kube_service_addresses=<span class="string">&quot;--service-cluster-ip-range=10\.254\.0\.0\/16&quot;</span></span><br><span class="line"></span><br><span class="line">kube_api_args=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">etcd_config=<span class="string">&quot;&#123; \&quot;Network\&quot;: \&quot;172.30.0.0/16\&quot;, \&quot;SubnetLen\&quot;: 24, \&quot;Backend\&quot;: &#123; \&quot;Type\&quot;: \&quot;vxlan\&quot; &#125; &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">flannel_etcd_endpoints=<span class="string">&quot;http:\/\/127\.0\.0\.1:2379&quot;</span></span><br><span class="line"></span><br><span class="line">flannel_etcd_prefix=<span class="string">&quot;\/atomic\.io\/network&quot;</span></span><br><span class="line"></span><br><span class="line">TEMP=`getopt -o ab:c:: --long kube-master:,kube-master-port:,etcd-listen-client-urls:,etcd-advertise-client-urls:,kube-api-address:,kube-etcd-servers:,kube-service-addresses:,flannel-etcd-endpoints:,flannel-etcd-prefix: -- <span class="string">&quot;<span class="variable">$@</span>&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">&quot;<span class="variable">$TEMP</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">                --kube-master ) kube_master=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --kube-master-port ) kube_master_port=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --etcd-listen-client-urls ) etcd_listen_client_urls=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --etcd-advertise-client-urls ) etcd_advertise_client_urls=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --kube-api-address ) kube_api_address=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --kube-etcd-servers ) kube_etcd_servers=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --kube-service-addresses ) kube_service_addresses=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --flannel-etcd-endpoints ) flannel_etcd_endpoints=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --flannel-etcd-prefix ) flannel_etcd_prefix=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --)<span class="built_in">shift</span>;<span class="built_in">break</span>;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[virt7-docker-common-release]</span></span><br><span class="line"><span class="string">name=virt7-docker-common-release</span></span><br><span class="line"><span class="string">baseurl=http://cbs.centos.org/repos/virt7-docker-common-release/x86_64/os/</span></span><br><span class="line"><span class="string">gpgcheck=0&quot;</span> &gt; /etc/yum.repos.d/virt7-docker-common-release.repo</span><br><span class="line"></span><br><span class="line">yum -y install --enablerepo=virt7-docker-common-release kubernetes etcd flannel</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBE_MASTER=\&quot;.*\&quot;/KUBE_MASTER=\&quot;<span class="variable">$kube_master</span>\&quot;/g&quot;</span> /etc/kubernetes/config</span><br><span class="line"></span><br><span class="line">setenforce=0</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">disable</span> iptables-services firewalld || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">systemctl stop iptables-services firewalld || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/ETCD_LISTEN_CLIENT_URLS=\&quot;.*\&quot;/ETCD_LISTEN_CLIENT_URLS=\&quot;<span class="variable">$etcd_listen_client_urls</span>\&quot;/g&quot;</span> /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/ETCD_ADVERTISE_CLIENT_URLS=\&quot;.*\&quot;/ETCD_ADVERTISE_CLIENT_URLS=\&quot;<span class="variable">$etcd_advertise_client_urls</span>\&quot;/g&quot;</span> /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBE_API_ADDRESS=\&quot;.*\&quot;/KUBE_API_ADDRESS=\&quot;<span class="variable">$kube_api_address</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBE_ETCD_SERVERS=\&quot;.*\&quot;/KUBE_ETCD_SERVERS=\&quot;<span class="variable">$kube_etcd_servers</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBE_SERVICE_ADDRESSES=\&quot;.*\&quot;/KUBE_SERVICE_ADDRESSES=\&quot;<span class="variable">$kube_service_addresses</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/#\sKUBE_API_PORT=\&quot;.*\&quot;/KUBE_API_PORT=\&quot;<span class="variable">$kube_api_port</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/#\sKUBELET_PORT=\&quot;.*\&quot;/KUBELET_PORT=\&quot;<span class="variable">$kubelet_port</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBE_API_ARGS=\&quot;.*\&quot;/KUBE_API_ARGS=\&quot;<span class="variable">$kube_api_args</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/^KUBE_ADMISSION_CONTROL/# KUBE_ADMISSION_CONTROL/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/FLANNEL_ETCD_ENDPOINTS=\&quot;.*\&quot;/FLANNEL_ETCD_ENDPOINTS=\&quot;<span class="variable">$flannel_etcd_endpoints</span>\&quot;/g&quot;</span> /etc/sysconfig/flanneld</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/FLANNEL_ETCD_PREFIX=\&quot;.*\&quot;/FLANNEL_ETCD_PREFIX=\&quot;<span class="variable">$flannel_etcd_prefix</span>\&quot;/g&quot;</span> /etc/sysconfig/flanneld</span><br><span class="line"></span><br><span class="line">flannel_etcd_prefix_unescape=$(<span class="built_in">echo</span> <span class="variable">$flannel_etcd_prefix</span> | sed <span class="string">&#x27;s/\\//g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">systemctl start etcd</span><br><span class="line"></span><br><span class="line">etcdctl rm -r <span class="variable">$flannel_etcd_prefix_unescape</span>/config||<span class="literal">true</span></span><br><span class="line">etcdctl rm -r <span class="variable">$flannel_etcd_prefix_unescape</span>||<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">etcdctl mkdir <span class="variable">$flannel_etcd_prefix_unescape</span></span><br><span class="line">etcdctl mk <span class="variable">$flannel_etcd_prefix_unescape</span>/config <span class="string">&quot;<span class="variable">$etcd_config</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> etcd kube-apiserver kube-controller-manager kube-scheduler flanneld; <span class="keyword">do</span></span><br><span class="line">systemctl restart <span class="variable">$SERVICES</span></span><br><span class="line">systemctl <span class="built_in">enable</span> <span class="variable">$SERVICES</span></span><br><span class="line">systemctl status <span class="variable">$SERVICES</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>部署命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubernetes-deploy-master --etcd-listen-client-urls <span class="string">&quot;http:\/\/0.0.0.0:2379&quot;</span> --etcd-advertise-client-urls <span class="string">&quot;http:\/\/0.0.0.0:2379&quot;</span> --kube-api-address <span class="string">&quot;--address=0.0.0.0&quot;</span> --flannel-etcd-prefix <span class="string">&quot;\/kube-centos\/network&quot;</span> --kube-etcd-servers <span class="string">&quot;--etcd-servers=http:\/\/&lt;master-host&gt;:2379&quot;</span> --flannel-etcd-endpoints <span class="string">&quot;http:\/\/&lt;master-host&gt;:2379&quot;</span> --kube-master <span class="string">&quot;--master=http:\/\/&lt;master-host&gt;:8080&quot;</span> --kube-etcd-servers <span class="string">&quot;--etcd-servers=http:\/\/&lt;master-host&gt;:2379&quot;</span></span><br></pre></td></tr></table></figure><h1 id="minion"><a href="#minion" class="headerlink" title="minion"></a>minion</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">kube_master=<span class="string">&quot;--master=http:\/\/127\.0\.0\.1:8080&quot;</span></span><br><span class="line"></span><br><span class="line">flannel_etcd_endpoints=<span class="string">&quot;http:\/\/127\.0\.0\.1:2379&quot;</span></span><br><span class="line"></span><br><span class="line">flannel_etcd_prefix=<span class="string">&quot;\/atomic\.io\/network&quot;</span></span><br><span class="line"></span><br><span class="line">kubelet_address=<span class="string">&quot;--address=127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">kubelet_port=<span class="string">&quot;--port=10250&quot;</span></span><br><span class="line"></span><br><span class="line">kubelet_hostname=<span class="string">&quot;--hostname-override=127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">kubelet_api_server=<span class="string">&quot;--api-servers=http:\/\/127.0.0.1:8080&quot;</span></span><br><span class="line"></span><br><span class="line">kubelet_args=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">cluster_server=<span class="string">&quot;http:\/\/127.0.0.1:8080&quot;</span></span><br><span class="line"></span><br><span class="line">cluster=<span class="string">&quot;default-culster&quot;</span></span><br><span class="line"></span><br><span class="line">context=<span class="string">&quot;default-context&quot;</span></span><br><span class="line"></span><br><span class="line">context_user=<span class="string">&quot;default-admin&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TEMP=`getopt -o a: --long kube-master:,flannel-etcd-endpoints:,flannel-etcd-prefix:,kubelet-address:,kubelet-port:,kubelet-hostname:,kubelet-api-server:,kubelet-args:,cluster-server:,cluster:,context:,context-user: -- <span class="string">&quot;<span class="variable">$@</span>&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">&quot;<span class="variable">$TEMP</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">                --kube-master ) kube_master=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --flannel-etcd-endpoints ) flannel_etcd_endpoints=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">                --flannel-etcd-prefix ) flannel_etcd_prefix=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--kubelet-address ) kubelet_address=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--kubelet-port ) kubelet_port=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--kubelet-hostname) kubelet_hostname=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--kubelet-api-server ) kubelet_api_server=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--kubelet-args ) kubelet_args=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--cluster ) cluster=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--cluster-server ) cluster_server=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--context ) context=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line">--context-user ) context_user=<span class="variable">$2</span>;<span class="built_in">shift</span> 2;;</span><br><span class="line"></span><br><span class="line">                --)<span class="built_in">shift</span>;<span class="built_in">break</span>;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[virt7-docker-common-release]</span></span><br><span class="line"><span class="string">name=virt7-docker-common-release</span></span><br><span class="line"><span class="string">baseurl=http://cbs.centos.org/repos/virt7-docker-common-release/x86_64/os/</span></span><br><span class="line"><span class="string">gpgcheck=0&quot;</span> &gt; /etc/yum.repos.d/virt7-docker-common-release.repo</span><br><span class="line"></span><br><span class="line">yum -y install --enablerepo=virt7-docker-common-release kubernetes etcd flannel</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBE_MASTER=\&quot;.*\&quot;/KUBE_MASTER=\&quot;<span class="variable">$kube_master</span>\&quot;/g&quot;</span> /etc/kubernetes/config</span><br><span class="line"></span><br><span class="line">setenforce=0</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">disable</span> iptables-services firewalld || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">systemctl stop iptables-services firewalld || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBELET_ADDRESS=\&quot;.*\&quot;/KUBELET_ADDRESS=\&quot;<span class="variable">$kubelet_address</span>\&quot;/g&quot;</span> /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/#\sKUBELET_PORT=\&quot;.*\&quot;/KUBELET_PORT=\&quot;<span class="variable">$kubelet_port</span>\&quot;/g&quot;</span> /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBELET_HOSTNAME=\&quot;.*\&quot;/KUBELET_HOSTNAME=\&quot;<span class="variable">$kubelet_hostname</span>\&quot;/g&quot;</span> /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBELET_API_SERVER=\&quot;.*\&quot;/KUBELET_API_SERVER=\&quot;<span class="variable">$kubelet_api_server</span>\&quot;/g&quot;</span> /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/#\sKUBE_API_PORT=\&quot;.*\&quot;/KUBE_API_PORT=\&quot;<span class="variable">$kube_api_port</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/#\sKUBELET_PORT=\&quot;.*\&quot;/KUBELET_PORT=\&quot;<span class="variable">$kubelet_port</span>\&quot;/g&quot;</span> /etc/kubernetes/apiserver</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KUBELET_ARGS=\&quot;.*\&quot;/KUBELET_ARGS=\&quot;<span class="variable">$kubelet_args</span>\&quot;/g&quot;</span> /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/^KUBELET_POD_INFRA_CONTAINER/# KUBELET_POD_INFRA_CONTAINER/g&quot;</span> /etc/kubernetes/kubelet</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/FLANNEL_ETCD_ENDPOINTS=\&quot;.*\&quot;/FLANNEL_ETCD_ENDPOINTS=\&quot;<span class="variable">$flannel_etcd_endpoints</span>\&quot;/g&quot;</span> /etc/sysconfig/flanneld</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/FLANNEL_ETCD_PREFIX=\&quot;.*\&quot;/FLANNEL_ETCD_PREFIX=\&quot;<span class="variable">$flannel_etcd_prefix</span>\&quot;/g&quot;</span> /etc/sysconfig/flanneld</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> kube-proxy kubelet flanneld docker; <span class="keyword">do</span></span><br><span class="line">    systemctl restart <span class="variable">$SERVICES</span></span><br><span class="line">    systemctl <span class="built_in">enable</span> <span class="variable">$SERVICES</span></span><br><span class="line">    systemctl status <span class="variable">$SERVICES</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">kubectl config set-cluster <span class="variable">$cluster</span> --server=<span class="variable">$cluster_server</span></span><br><span class="line">kubectl config set-context <span class="variable">$context</span> --cluster=<span class="variable">$cluster</span> --user=<span class="variable">$context_user</span></span><br><span class="line">kubectl config use-context <span class="variable">$context</span></span><br></pre></td></tr></table></figure><p>部署命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubernetes-deploy-minion --kubelet-address <span class="string">&quot;--address=0.0.0.0&quot;</span> --kubelet-hostname <span class="string">&quot;--hostname-override=centos-minion-1&quot;</span> --kubelet-api-server <span class="string">&quot;--api-servers=http:\/\/&lt;master-host&gt;:8080&quot;</span> --flannel-etcd-endpoints <span class="string">&quot;http:\/\/&lt;master-host&gt;:2379&quot;</span> --flannel-etcd-prefix <span class="string">&quot;\/kube-centos\/network&quot;</span> --cluster-server <span class="string">&quot;http:\/\/&lt;master-host&gt;:8080&quot;</span> --kube-master <span class="string">&quot;--master=http:\/\/&lt;master-host&gt;:8080&quot;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;master&quot;&gt;&lt;a href=&quot;#master&quot; class=&quot;headerlink&quot; title=&quot;master&quot;&gt;&lt;/a&gt;master&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="docker kubernetes" scheme="http://yoursite.com/categories/docker-kubernetes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>java中的随机数</title>
    <link href="http://yoursite.com/2017/02/20/java-random/"/>
    <id>http://yoursite.com/2017/02/20/java-random/</id>
    <published>2017-02-20T05:56:46.000Z</published>
    <updated>2019-02-03T09:20:19.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>首先来看下面一段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">100</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; ticks = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> result = random.nextInt(limit);</span><br><span class="line">            <span class="keyword">if</span> (!ticks.containsKey(result)) &#123;</span><br><span class="line">                ticks.put(result, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ticks.put(result, ticks.get(result) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;:&quot;</span> + ticks.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段代码的运行结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">0:1048</span><br><span class="line">1:988</span><br><span class="line">2:1015</span><br><span class="line">3:955</span><br><span class="line">4:1017</span><br><span class="line">5:1018</span><br><span class="line">6:990</span><br><span class="line">7:1052</span><br><span class="line">8:993</span><br><span class="line">9:1012</span><br><span class="line">10:1027</span><br><span class="line">11:1008</span><br><span class="line">12:976</span><br><span class="line">13:994</span><br><span class="line">14:990</span><br><span class="line">15:994</span><br><span class="line">16:1019</span><br><span class="line">17:1072</span><br><span class="line">18:1043</span><br><span class="line">19:1015</span><br><span class="line">20:1011</span><br><span class="line">21:977</span><br><span class="line">22:998</span><br><span class="line">23:1000</span><br><span class="line">24:1031</span><br><span class="line">25:995</span><br><span class="line">26:1008</span><br><span class="line">27:1007</span><br><span class="line">28:1001</span><br><span class="line">29:998</span><br><span class="line">30:1101</span><br><span class="line">31:970</span><br><span class="line">32:1008</span><br><span class="line">33:969</span><br><span class="line">34:931</span><br><span class="line">35:1030</span><br><span class="line">36:1023</span><br><span class="line">37:994</span><br><span class="line">38:1019</span><br><span class="line">39:972</span><br><span class="line">40:999</span><br><span class="line">41:1002</span><br><span class="line">42:929</span><br><span class="line">43:948</span><br><span class="line">44:1002</span><br><span class="line">45:985</span><br><span class="line">46:970</span><br><span class="line">47:971</span><br><span class="line">48:960</span><br><span class="line">49:1019</span><br><span class="line">50:1003</span><br><span class="line">51:1027</span><br><span class="line">52:1011</span><br><span class="line">53:930</span><br><span class="line">54:1004</span><br><span class="line">55:1002</span><br><span class="line">56:985</span><br><span class="line">57:987</span><br><span class="line">58:976</span><br><span class="line">59:1037</span><br><span class="line">60:969</span><br><span class="line">61:1006</span><br><span class="line">62:965</span><br><span class="line">63:967</span><br><span class="line">64:1047</span><br><span class="line">65:1019</span><br><span class="line">66:1009</span><br><span class="line">67:973</span><br><span class="line">68:998</span><br><span class="line">69:959</span><br><span class="line">70:999</span><br><span class="line">71:984</span><br><span class="line">72:964</span><br><span class="line">73:1015</span><br><span class="line">74:979</span><br><span class="line">75:989</span><br><span class="line">76:973</span><br><span class="line">77:997</span><br><span class="line">78:962</span><br><span class="line">79:1043</span><br><span class="line">80:1001</span><br><span class="line">81:1010</span><br><span class="line">82:1029</span><br><span class="line">83:992</span><br><span class="line">84:1049</span><br><span class="line">85:994</span><br><span class="line">86:975</span><br><span class="line">87:1076</span><br><span class="line">88:992</span><br><span class="line">89:1009</span><br><span class="line">90:977</span><br><span class="line">91:1020</span><br><span class="line">92:994</span><br><span class="line">93:976</span><br><span class="line">94:983</span><br><span class="line">95:1028</span><br><span class="line">96:1019</span><br><span class="line">97:1062</span><br><span class="line">98:936</span><br><span class="line">99:1045</span><br></pre></td></tr></table></figure><br>可以看到实际的结果在1000左右摆动。也就是说这样的代码产生的结果均匀分布。（笔者对上述代码进行了多次测试，结果都和这个是差不多的）均匀分布对于一个抽奖系统来说是非常重要的。例如，你花五块钱买一张彩票，我也花五块钱买一张彩票，大家抽中五万块钱的概率都是万分之一，<br>那么这个抽奖系统对于大家来说就是公平的。虽然这一段代码看起来是一段公平的代码，但事实上真的是这样子的吗？要理解其中的缘由，我们需要补充一些基础知识。</p><h1 id="“真”随机数"><a href="#“真”随机数" class="headerlink" title="“真”随机数"></a>“真”随机数</h1><p>要生成一个“真”随机数，电脑会检测电脑外部发生的某种物理现象。比如说，电脑可以测量某个原子的放射性衰变。根据量子理论，原子衰变是随机而不可测的，所以这就是宇宙中的“纯粹”随机性。攻击者永远无法预测原子衰变的发生时间，也就不可能猜出随机值。<br>举个更实际的例子，电脑会根据环境中的噪音或者采取你敲击键盘的精确时间作为随机数据或熵的生成依据。举个例子，你的电脑监测到你某天下午2点以后敲击键盘的精确时间是0.23423523秒，有足够的这些特定长数字你就能得到一个熵源，也就可以生成“真”随机数。由于人不是机器，所以攻击者无法掌握你的敲击时间。<br>Linux中的/dev/random随机设备生成随机数，“阻拦”访问直到熵积累量足够才返回一个真随机数。（熵，热力学中表征物质状态的参量之一，用符号S表示，其物理意义是体系混乱程度的度量。）（注：/dev/random产生随机数的效率十分低下，很难运用到生产环境中）</p><h1 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h1><p>伪随机数这个概念是相对于“真”随机数而言。电脑通过发送种子数值，运用算法产生某个看起来像随机数的数字，但是实际上这个数字是可以预测的。因为电脑没有从环境中收集到任何随机信息。</p><h1 id="如何判断一个随机数发生器的优劣"><a href="#如何判断一个随机数发生器的优劣" class="headerlink" title="如何判断一个随机数发生器的优劣"></a>如何判断一个随机数发生器的优劣</h1><p>德国联邦信息安全办公室给出了随机数发生器质量评判的四个标准</p><ul><li>K1——相同序列的概率非常低</li><li>K2——符合统计学的平均性，比如所有数字出现概率应该相同，卡方检验应该能通过，超长游程长度概略应该非常小，自相关应该只有一个尖峰，任何长度的同一数字之后别的数字出现概率应该仍然是相等的等等</li><li>K3——不应该能够从一段序列猜测出随机数发生器的工作状态或者下一个随机数</li><li>K4——不应该从随机数发生器的状态能猜测出随机数发生器以前的工作状态</li></ul><p>文章开头那段代码，只满足了K2这个要求。其实K1，K3,和k4一个都不符合。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>笔者好奇的是，这段代码在C#中是不可能均匀分布的。因为在C#中new Random()是以1970年1月1日到当前时间的毫秒数作为线性同余算法的种子的。而在现代计算机中1毫秒内可以运行几十万次的while循环，因此你会发现获得的随机数大都相同。<br>来看下面的实验<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bmp = new Bitmap(300, 300);</span><br><span class="line">Graphics g = Graphics.FromImage(bmp);</span><br><span class="line">SolidBrush b = new SolidBrush(Color.Black);</span><br><span class="line"></span><br><span class="line">Random random = new Random();</span><br><span class="line">int count = 100000;</span><br><span class="line">while (count-- &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    int x = random.Next(300);</span><br><span class="line">    int y = random.Next(300);</span><br><span class="line">    g.FillRectangle(b, x, y, 1, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段程序生成的图片如下<br><img src="/image/hello.png" alt=""></p><p>将Random放入While循环中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bmp = new Bitmap(300, 300);</span><br><span class="line">Graphics g = Graphics.FromImage(bmp);</span><br><span class="line">SolidBrush b = new SolidBrush(Color.Black);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int count = 100000;</span><br><span class="line">while (count-- &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    Random random = new Random();   </span><br><span class="line">    int x = random.Next(300);</span><br><span class="line">    int y = random.Next(300);</span><br><span class="line">    g.FillRectangle(b, x, y, 1, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/image/Csharp2.png" alt=""></p><p>这里只能看到零星的几个黑点，可以看到两者的差异非常大。但是在Java中这两种写法产生的结果是一致的。（实际上在早期的JDK版本也是和C#同样的结果）</p><p>那么这到底是怎么回事呢？</p><p>我们来看一下Java中Random类的构建函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(seedUniquifier() ^ System.nanoTime());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>再来看一下seedUniquifier()这个函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong seedUniquifier</span><br><span class="line">        = <span class="keyword">new</span> AtomicLong(<span class="number">8682522807148012L</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">seedUniquifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// L&#x27;Ecuyer, &quot;Tables of Linear Congruential Generators of</span></span><br><span class="line">        <span class="comment">// Different Sizes and Good Lattice Structure&quot;, 1999</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">long</span> current = seedUniquifier.get();</span><br><span class="line">            <span class="keyword">long</span> next = current * <span class="number">181783497276652981L</span>;</span><br><span class="line">            <span class="keyword">if</span> (seedUniquifier.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这就是一个线性同余的算法，其中的种子是一个64位整型：8682522807148012L</p><p>我们截取这一段代码运行一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (i-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(seedUniquifier());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8006678197202707420</span><br><span class="line">-3282039941672302964</span><br><span class="line">3620162808252824828</span><br><span class="line">199880078823418412</span><br><span class="line">-358888042979226340</span><br><span class="line">-3027244073376649012</span><br><span class="line">2753936029964524604</span><br><span class="line">-9114341766410567060</span><br><span class="line">-4556895898465471908</span><br><span class="line">7145509263664170764</span><br></pre></td></tr></table></figure><br>也就是说无论你运行多少次都是这个结果。那么再来看一下System.nanoTime()这个函数</p><p>在代码的注释中可以找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Returns the current value of the running Java Virtual Machine<span class="string">&#x27;s</span></span><br><span class="line"><span class="string">     * high-resolution time source, in nanoseconds.</span></span><br></pre></td></tr></table></figure><br>这句话的意思是返回当前java虚拟机的当前时间，是一个高精度的时间源，单位为纳秒。</p><h1 id="抽奖程序"><a href="#抽奖程序" class="headerlink" title="抽奖程序"></a>抽奖程序</h1><p>那么这时候我们来分析一下在java中每次都new一个 Random实例时，如何破解这样一个抽奖程序。</p><ul><li><p>首先我们要知道我们抽奖的序号，也就是在那么多抽奖先后顺序，通过这个我们可以得出线性同余的随机数，因此，我们将抽奖序号设为N</p></li><li><p>抽奖的时间点，也就是System.nanoTime(),我们设为T</p></li><li><p>奖池</p></li></ul><p>其中，如果作为一名抽奖程序的开发人员要知道第一个和第三个条件其实很简单。至于System.nanoTime()要获取可以说是难于登天。所以，这段程序从表面上看似乎并没有什么漏洞。</p><p>如果我们将时间放慢一亿倍（你能接近光速么？），我们就能精确的控制在哪一秒点下去就能中五万元了不是么？不过要接近光速似乎是不可能的事情。</p><p>不过，我们换一种方式来分析问题。虽然纳秒太细我们无法精确的控制，但是我们可以计算出在哪一秒内出现中五万元的纳秒数最多，于是我们可以选择在那一秒去点击抽奖按钮。这样我们中五万元的概率是不是就比别人高了许多？</p><p>（全文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;首先来看下面一段代码&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>maven和docker调试java应用程序</title>
    <link href="http://yoursite.com/2016/12/31/maven+docker-debug-java/"/>
    <id>http://yoursite.com/2016/12/31/maven+docker-debug-java/</id>
    <published>2016-12-31T06:29:13.000Z</published>
    <updated>2019-02-03T09:20:19.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>&#160; &#160; &#160; &#160;平常开发java应用程序，我们经常会遇到这样的一种场景：开发机使用的是Windows操作系统，但往往程序是跑在Linux操作系统上面的，甚至会调用一些Linux上的程序或者是系统api等，这种情况下我们的程序调试就会变得非常的麻烦。以往解决这种问题的方式一般是在Windows装一个Linux虚拟机，然后将程序部署到虚拟机上进行调试。这种方式虽然可以解决问题，但是总感觉效率太低：一来是虚拟机消耗太多的系统资源，二来编译和部署过程相当的繁琐（虽然你可以自己编写自动化脚本，但总归难以通用化）。</p><h1 id="Docker的出现"><a href="#Docker的出现" class="headerlink" title="Docker的出现"></a>Docker的出现</h1><p>&#160; &#160; &#160; &#160;Docker相比虚拟机来说，拥有更小的系统资源占用，更快的部署速度等优势，而且现在Windows上也能完美的运行Docker服务了。前提条件是要升级到Win10操作系统。至于Windows上Docker的安装非常的简单，Docker官方提供了傻瓜安装包，我们只要一键到底就行了。<br><a href="https://docs.docker.com/docker-for-windows/">安装点我</a></p><h1 id="与maven配合使用"><a href="#与maven配合使用" class="headerlink" title="与maven配合使用"></a>与maven配合使用</h1><p>&#160; &#160; &#160; &#160;Docker自身提供了丰富RestApi供大家调用，其本身的DockerCli也是通过这些api与其Daemon进程进行交互的，因此我们可以通过编程的方式来使用Docker。我们可以利用maven的插件来完成我们程序的快速部署工作。现下farbric8就已提供了一款功能丰富的maven插件，接下来我们就来看一下如何使用它：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ROOT<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;mainclass&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.fabric8<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>$&#123;dockerHost&#125;<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">useColor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useColor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">images</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;image.name&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">from</span>&gt;</span>$&#123;image.from&#125;<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>5005<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mode</span>&gt;</span>dir<span class="tag">&lt;/<span class="name">mode</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetDir</span>&gt;</span>$&#123;container.targetDir&#125;<span class="tag">&lt;/<span class="name">targetDir</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inline</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">inline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>$&#123;container.port&#125;:5005<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cmd</span>&gt;</span>$&#123;container.cmd&#125;<span class="tag">&lt;/<span class="name">cmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">images</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><br>我们使用了两个插件，第一个插件将程序和其所有的依赖打进jar包，并指定mainclass,第二个插件就是docker插件了。我们将一些配置提取到property当中，使得这些配置具体一定的通用性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://localhost:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mainclass</span>&gt;</span>nd.com.sdp.Program<span class="tag">&lt;/<span class="name">mainclass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image.from</span>&gt;</span>openjdk:7-jre<span class="tag">&lt;/<span class="name">image.from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image.name</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">image.name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">container.targetDir</span>&gt;</span>/maven<span class="tag">&lt;/<span class="name">container.targetDir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">container.port</span>&gt;</span>5005<span class="tag">&lt;/<span class="name">container.port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">container.cmd</span>&gt;</span>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -jar /maven/ROOT.jar<span class="tag">&lt;/<span class="name">container.cmd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>dockerHost代表DockerDaemon进程所在的主机和其所监听的端口，你如果拥有一台装有Docker的远端机器，这里只要修改主机名和端口号就可以了。</li><li>mainClass指定程序main函数所在的类</li><li>image.from指定要使用的原始镜像，我们使用官方openjdk:7-jre(这里可以修改成任何你喜欢的镜像，Docker灵活性的体现)</li><li>image.name指定我们构建出来的镜像名称，我们简单的使用项目名称代替</li><li>container.targetDir指定了我们编译后的jar包要放到镜像中的什么位置</li><li>container.port指定了容器运行之后要暴露的调试端口，我们的ide就是通过此端口与其进行通信的</li><li>container.cmd容器启动时所运行的命令，这里指定程序以调试的方式启动</li></ul><p>我们甚至可以将这些配置作为pom项目install到机器上让其它项目继承，如果你有一台nexus服务器，还可以将其deploy到上面去让团队其它成员使用^_^。<br><a href="https://dmp.fabric8.io/#introduction">附上fabric-maven-docker-plugin操作手册</a></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>&#160; &#160; &#160; &#160;配置好pom文件，下面编写一段代码来试一下Linux调试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        Process process = runtime.exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls -l /&quot;</span>&#125;);</span><br><span class="line">        process.waitFor();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>笔者使用的是Intellij Idea，Eclipse的使用大同小异。首先要点击右上角的Edit Configurations：<br><img src="/image/docker-debug.png" alt="Edit Configurations"><br>在弹出界面的左上角点击+号，选择Remote：<br><img src="/image/docker-debug2.png" alt="Remote"><br>在配置界面中确保Host和Port和我们刚才在Docker插件中配置的值一致：<br><img src="/image/docker-debug3.png" alt="configuration"><br>最关键的一步是添加maven goal,点击+号，在弹出框中输入clean package docker:build docker:start<br><img src="/image/docker-debug4.png" alt="maven goal"><br>这一步的意思是编译打包，然后build Docker镜像，最后创建并运行容器，这么多步骤在一个maven命中完成，虽然java那么烂，但好歹有个maven看得过去^_^。<br>最后使用Shift+F9调试运行程序，可以看到断点命中，整个过程和本地调试体验一样:<br><img src="/image/docker-debug5.png" alt="break point"></p><p>(全文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;平常开发java应用程序，我们经常会遇到这样的一种场景：开发机使用的是Windows操
      
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
      <category term="效率" scheme="http://yoursite.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>浅谈java中List接口</title>
    <link href="http://yoursite.com/2016/12/15/java-List-interface/"/>
    <id>http://yoursite.com/2016/12/15/java-List-interface/</id>
    <published>2016-12-15T06:18:11.000Z</published>
    <updated>2019-02-03T09:20:19.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List接口的定义"><a href="#List接口的定义" class="headerlink" title="List接口的定义"></a>List接口的定义</h1><p>List接口在java中算是使用频率相当高的一个接口，我们先来看一下它的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里只列出一些比较重要的方法，相比其它语言里面的类似的接口，可以说是大同小异，它的设计并没有什么问题。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在jdk中，关于这个接口有三个实现，分别是ArrayList,LinkedList和Vector,我们分别来看一下它们的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>既然实现了List接口，那我们便可以用List指针来接收这三个类的实例。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List list = <span class="keyword">new</span> Vector();</span><br></pre></td></tr></table></figure></p><h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>在平常使用List接口的过程中，我们经常需要遍历List里面的元素。<br>于是我们可以这样写代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Interator inter = list.Interator();iter.hasNext();)&#123;</span><br><span class="line">     Object obj = inter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们甚至还可以这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>为什么可以这样？这是因为AbstractList实现了Iterable接口，而这里仅仅只是一种语法糖而已，实际代码编译后还是会被转成第一种写法。<br>（大家可以想想这里为什么要有一个Iterable接口，而不直接实现Iterator接口）</p><p>文章写到这里似乎并没有什么价值，但是我们发现在List接口中存在：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br></pre></td></tr></table></figure><br>这样一个方法，我们似乎可以改改上面遍历的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">     Object obj = list.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我相信大家在日常编码中会经常使用到这种方式。</p><h1 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h1><p>&#160; &#160; &#160; &#160;这种通过下标访问的方式，我们把它称之为RandomAccess。我们知道数组这种数据结构对这种随机访问的天生支持（事实上ArrayList和Vector就是用数组实现的），也就是说它的访问效率是非常高的。<br>现在我们回过头来看JDK中对List的三种实现，我们会发现其中的ArrayList和Vector竟然实现了一个叫RandomAccess接口，查看它的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>竟然是一个空接口？好吧这种接口的作用实际上是一种标记接口，对于它的使用，往往需要配合instanceof这种<a href="http://baike.baidu.com/link?url=c6vVFXT41_awqHe0TVcfrR74uwaprffqcyzQP4qw_o3VQQ0L2OSvQgzxWGR_a6_argI5qoOg2Pe5P_cv2X0YEq">RTTI</a>的方式。可以说并不是一种很理想的方式。</p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>我们可以写一个小程序来测试一下使用迭代器和使用RandomAccess的性能差异<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">travelwithoutIterator</span><span class="params">(List list, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">long</span> endTime;</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= count; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">    System.out.println(<span class="string">&quot;不使用迭代器的间隔时间：&quot;</span> + interval);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">travelwithIterator</span><span class="params">(List list, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">long</span> endTime;</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= count; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">    System.out.println(<span class="string">&quot;使用迭代器的间隔时间：&quot;</span> + interval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(List list, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= n; m++) &#123;</span><br><span class="line">        list.add(<span class="string">&quot;&quot;</span> + m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在main中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">System.out.println(<span class="string">&quot;遍历ArrayList：&quot;</span>);</span><br><span class="line">addObject(list, number);</span><br><span class="line">travelwithoutIterator(list, count);</span><br><span class="line">travelwithIterator(list, count);</span><br></pre></td></tr></table></figure><br>结果是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">遍历ArrayList：</span><br><span class="line">不使用迭代器的间隔时间：5</span><br><span class="line">使用迭代器的间隔时间：12</span><br></pre></td></tr></table></figure><br>我们对于ArrayList，使用RandomAccess的效率要比使用迭代器高不少，这对于一些对于性能要求比较苛刻的程序来说，可能会是一个优化的点。</p><p>但是我们现在换成LinkedList来试一试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">System.out.println(<span class="string">&quot;遍历LinkedList：&quot;</span>);</span><br><span class="line">addObject(list, number);</span><br><span class="line">travelwithoutIterator(list, count);</span><br><span class="line">travelwithIterator(list, count);</span><br></pre></td></tr></table></figure><br>结果是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">遍历LinkedList：</span><br><span class="line">不使用迭代器的间隔时间：1043247</span><br><span class="line">使用迭代器的间隔时间：139</span><br></pre></td></tr></table></figure><br>对于List的使用者来说，或者说正在编写一个框架的人，我们经常不知道List指针会接到什么样的一个具体实例，于是乎，我们只能以这种贴膏药的方式来修补我们的程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.size(); i &lt; list.size(); i++) &#123;</span><br><span class="line">        Object obj = list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="设计的问题"><a href="#设计的问题" class="headerlink" title="设计的问题"></a>设计的问题</h1><p>&#160; &#160; &#160; &#160;到这里，我们可以看出LinkedList明显是不应该实现List这么大的一个接口了，或者说早期的jdk设计人员并没有考虑到这样的性能问题。我们再回过头来看RandomAccess接口，jdk设计人员似乎也是意识到了这一点，才搞出了这么一个东西。<br>那会为什么不让LinkedList直接去掉List接口呢？（在C#中LinkedList并没有实现IList接口）我想这应该是Java设计人员始终坚持的兼容性原则，这跟Jvm始终不愿意引入泛型是一个道理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;List接口的定义&quot;&gt;&lt;a href=&quot;#List接口的定义&quot; class=&quot;headerlink&quot; title=&quot;List接口的定义&quot;&gt;&lt;/a&gt;List接口的定义&lt;/h1&gt;&lt;p&gt;List接口在java中算是使用频率相当高的一个接口，我们先来看一下它的定义：&lt;br
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>协同进程的死锁问题</title>
    <link href="http://yoursite.com/2016/12/14/deak-lock/"/>
    <id>http://yoursite.com/2016/12/14/deak-lock/</id>
    <published>2016-12-14T07:25:01.000Z</published>
    <updated>2019-02-03T09:20:19.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>&#160; &#160; &#160; &#160;要理解协同进程的话，首先要知道什么是管道。管道是UNIX系统当中IPC的最古老形式，所有的UNIX系统都提供这种通信机制。<br>管道是通过调用pipe函数创建的:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure><p>经由参数返回两个文件描述符：fd[0]为读而打开，fd[1]为写而打开。fd[1]的输出是fd[0]的输入。下图是管道的结构：</p><p><img src="/image/pipe.jpg" alt="管道"></p><p>单个进程中的管道几乎没有任何用处。通常，进程会先调用pipe，接着调用fork，从而创建从父进程到子进程的IPC通道，反之亦然。下图显示了这种情况</p><p><img src="/image/fork_pipe.jpg" alt="父子进程的管道"></p><p>fork之后做什么取决于我们想要的数据流的方向。对于从父进程到子进程的管道，父进程关闭管道的读端(fd[0]),子进程关闭写端(fd[1])。下图显示了在此之后描述符的状态结果：</p><p><img src="/image/fork_pipe2.jpg" alt="父子进程的管道"></p><h1 id="协同进程"><a href="#协同进程" class="headerlink" title="协同进程"></a>协同进程</h1><p>&#160; &#160; &#160; &#160;当A进程既产生B进程的输入，又读取B进程的输出时，B进程就变成了A进程的<strong>协同进程</strong>（coprocess）。下图显示了这种安排：<br><img src="/image/coprocess.jpg" alt="协同进程"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>让我们通过一个示例来观察协同进程。我们先创建一个简单的协同进程，它从其标准输入读取两个数，计算它们的和，然后将和写至其标准输出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, int1,int2;</span><br><span class="line">  <span class="keyword">char</span> line[MAXLINE];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((n = <span class="built_in">read</span>(STDIN_FILENO, line, MAXLINE)) &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    line[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sscanf</span>(line, <span class="string">&quot;%d%d&quot;</span>,&amp;int1,&amp;int2) == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(line, <span class="string">&quot;%d\n&quot;</span>,int1 + int2);</span><br><span class="line">      n = <span class="built_in">strlen</span>(line);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">write</span>(STDOUT_FILENO,line,n) != n)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">write</span>(STDOUT_FILENO,<span class="string">&quot;invalid args\n&quot;</span>,<span class="number">13</span>) != <span class="number">13</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>对此程序进行编译，并保存为可执行文件add</p><p>下面的程序创建两个管道： 一个是协同进程的标准输入，另一个是协同进程的标准输出。它先从其标准输入读取两个数之后调用add协同进程，并将协同进程送来的值写到其标准输出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apue.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_pipe</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,fd1[<span class="number">2</span>],fd2[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  <span class="keyword">char</span> line[MAXLINE];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">signal</span>(SIGPIPE,sig_pipe) == SIG_ERR)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;signal error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">pipe</span>(fd1) &lt; <span class="number">0</span> || <span class="built_in">pipe</span>(fd2) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;pipe error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>((pid = fork()) &lt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">close</span>(fd1[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">close</span>(fd2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fgets</span>(line,MAXLINE,stdin) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      n = <span class="built_in">strlen</span>(line);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">write</span>(fd1[<span class="number">1</span>],line,n) != n)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;write error to pipe&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>((n = <span class="built_in">read</span>(fd2[<span class="number">0</span>],line,MAXLINE)) &lt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;read error from pipe&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_msg</span>(<span class="string">&quot;child closed pipe&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      line[n] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">fputs</span>(line,stdout) == EOF)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;fputs error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ferror</span>(stdin))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">err_sys</span>(<span class="string">&quot;fgets error on stdin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">close</span>(fd1[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">close</span>(fd2[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(fd1[<span class="number">0</span>] != STDIN_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">dup2</span>(fd1[<span class="number">0</span>],STDIN_FILENO) != STDIN_FILENO)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;dup2 error to stdin&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">close</span>(fd1[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fd2[<span class="number">1</span>] != STDOUT_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">dup2</span>(fd2[<span class="number">1</span>],STDOUT_FILENO) != STDOUT_FILENO)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;dup2 error to stdout&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">close</span>(fd2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">execl</span>(<span class="string">&quot;./add&quot;</span>,<span class="string">&quot;add&quot;</span>,(<span class="keyword">char</span> *)<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">err_sys</span>(<span class="string">&quot;execl error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_pipe</span><span class="params">(<span class="keyword">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;SIGPIPE caught\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编译运行此程序，它会按预期工作。但是如果在它等待输入的时候杀死add协同进程，然后又输入两个数，那么程序对没有读进程的管道进行写操作时，会产生SIGPIPE信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">SIGPIPE caught</span><br></pre></td></tr></table></figure></p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>&#160; &#160; &#160; &#160;我们用这个程序替换原来的add协同程序，则会发生死锁的问题：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> int1,int2;</span><br><span class="line">  <span class="keyword">char</span> line[MAXLINE];</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">fgets</span>(line,MAXLINE,stdin) != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sscanf</span>(line,<span class="string">&quot;%d%d&quot;</span>,&amp;int1,&amp;int2) == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,int1 + int2) == EOF)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;printf error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">printf</span>(<span class="string">&quot;invalid args\n&quot;</span>) == EOF)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">err_sys</span>(<span class="string">&quot;printf error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>&#160; &#160; &#160; &#160;我们第一个add程序是直接使用write和read的系统调用，后一个add程序则使用了标准I/O。因为标准输入现在变换成了管道，所以标准I/O的缓冲方式从行缓冲变成了全缓冲，标准输出也是如此，当子进程从其标准输入读取而发生阻塞时，父进程从管道读时也发生阻塞，于是产生了死锁。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>&#160; &#160; &#160; &#160;知道了原因，我们就可以通过设置标准I/O缓冲方式为行缓冲来解决问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">setvbuf</span>(stdin,<span class="literal">NULL</span>,_IOLBF,<span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;setvbuf error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">setvbuf</span>(stdout,<span class="literal">NULL</span>,_IOLBF,<span class="number">0</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;setvbuf error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中：</p><ul><li>_IOFBF: 全缓冲</li><li>_IOLBF: 行缓冲</li><li>_IONBF: 无缓冲</li></ul><p>重新编译并运行程序，发现死锁问题被解决了。<br>（全文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;管道&quot;&gt;&lt;a href=&quot;#管道&quot; class=&quot;headerlink&quot; title=&quot;管道&quot;&gt;&lt;/a&gt;管道&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;要理解协同进程的话，首先要知道什么是管道。管道是UNIX系统当中IPC的最古老形式，所
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>linux中的文件强制锁</title>
    <link href="http://yoursite.com/2016/12/07/linux-lockfile/"/>
    <id>http://yoursite.com/2016/12/07/linux-lockfile/</id>
    <published>2016-12-07T09:39:44.000Z</published>
    <updated>2019-02-03T09:20:19.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是建议性锁和强制性锁"><a href="#什么是建议性锁和强制性锁" class="headerlink" title="什么是建议性锁和强制性锁"></a>什么是建议性锁和强制性锁</h1><ul><li>建议性锁：建议性锁并不从内核限制程序访问文件，而是依赖各个合作进程(cooperating process)之间遵循相应的规则。</li><li>强制性锁：强制性锁会让内核检查每一个open、read、和write,验证调用进程是否违背了正访问的文件上的某一把锁。<blockquote><p>就好比红灯亮了，人们遵守规则不闯红灯，但是如果有人要强行闯红灯的话，并没有好的方法去阻止，这就是建议性锁。<br>但是如果我们在红灯亮的同时，把道路也封起来，这时候你想闯也闯不了，这就是强制性锁。</p></blockquote></li></ul><h1 id="Linux上的强制性锁"><a href="#Linux上的强制性锁" class="headerlink" title="Linux上的强制性锁"></a>Linux上的强制性锁</h1><p>Linux系统上的强制性锁默认情况下是不开启的。如果要开启强制性锁，要由以下两个步骤完成：</p><ol><li>在文件系统mount的时候加上-o mand参数</li><li>打开文件的设置组ID位并且关闭其组执行位</li></ol><p>在shell下可以这样打开<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod g+s &lt;filename&gt;</span><br><span class="line">$ chmod g-x &lt;filename&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;或者通过fchmod函数设置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fchmod</span>(fd,(statbuf.st_mode &amp; ~S_IXGRP) | S_ISGID)</span><br></pre></td></tr></table></figure></p><h1 id="验证强制性锁"><a href="#验证强制性锁" class="headerlink" title="验证强制性锁"></a>验证强制性锁</h1><p> 我们可以编写一段测试程序，它打开一个文件（系统已打开强制性锁模式），对该文件整体设置一把读锁，然后休眠一段时间。<br> 该程序如下：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apue.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> fd;</span><br><span class="line">   <span class="keyword">pid_t</span> pid;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statbuf</span>;</span></span><br><span class="line">   <span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;usage: %s filename\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>((fd = <span class="built_in">open</span>(argv[<span class="number">1</span>],O_RDWR | O_CREAT | O_TRUNC,FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">err_sys</span>(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">write</span>(fd,<span class="string">&quot;abcef&quot;</span>,<span class="number">6</span>) != <span class="number">6</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">err_sys</span>(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">fstat</span>(fd,&amp;statbuf) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">err_sys</span>(<span class="string">&quot;fstat error&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">fchmod</span>(fd,(statbuf.st_mode &amp; ~S_IXGRP) | S_ISGID) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">err_sys</span>(<span class="string">&quot;fchmod error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>((<span class="built_in">read_lock</span>(fd, <span class="number">0</span>, SEEK_SET, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">err_sys</span>(<span class="string">&quot;read_lock error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">sleep</span>(<span class="number">60</span>);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 运行程序<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./lock temp.lock</span><br></pre></td></tr></table></figure><br> 在另一个终端验证<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; temp.lock</span><br></pre></td></tr></table></figure><br> 可以看到出现了下面的错误<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: temp.lock: Resource temporarily unavailable</span><br></pre></td></tr></table></figure><br> 事实证明我们的读锁生效了。</p><h1 id="绕过强制性锁"><a href="#绕过强制性锁" class="headerlink" title="绕过强制性锁"></a>绕过强制性锁</h1><p> 我们用vi程序对temp.lock进行洗编辑，其结果竟然可以写回磁盘！强制性锁不起作用了？<br> 我们用strace -c vim 命令跟踪vim程序的系统调用<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ strace -c vim temp.lock</span><br></pre></td></tr></table></figure><br> 返回如下信息：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> % time     seconds  usecs/call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000015          15         1           setxattr</span><br><span class="line">  0.00    0.000000           0        34           <span class="built_in">read</span></span><br><span class="line">  0.00    0.000000           0        31           write</span><br><span class="line">  0.00    0.000000           0        29         2 open</span><br><span class="line">  0.00    0.000000           0        29           close</span><br><span class="line">  0.00    0.000000           0        22         4 <span class="built_in">stat</span></span><br><span class="line">  0.00    0.000000           0        20           fstat</span><br><span class="line">  0.00    0.000000           0         4         3 lstat</span><br><span class="line">  0.00    0.000000           0         2           poll</span><br><span class="line">  0.00    0.000000           0         5           lseek</span><br><span class="line">  0.00    0.000000           0        34           mmap</span><br><span class="line">  0.00    0.000000           0        17           mprotect</span><br><span class="line">  0.00    0.000000           0         8           munmap</span><br><span class="line">  0.00    0.000000           0         6           brk</span><br><span class="line">  0.00    0.000000           0        22           rt_sigaction</span><br><span class="line">  0.00    0.000000           0         6           rt_sigprocmask</span><br><span class="line">  0.00    0.000000           0        19           ioctl</span><br><span class="line">  0.00    0.000000           0         6         2 access</span><br><span class="line">  0.00    0.000000           0        46           select</span><br><span class="line">  0.00    0.000000           0         1           getpid</span><br><span class="line">  0.00    0.000000           0         2           socket</span><br><span class="line">  0.00    0.000000           0         2           connect</span><br><span class="line">  0.00    0.000000           0         2           sendto</span><br><span class="line">  0.00    0.000000           0         1           recvmsg</span><br><span class="line">  0.00    0.000000           0         1           execve</span><br><span class="line">  0.00    0.000000           0         1           uname</span><br><span class="line">  0.00    0.000000           0         9           fcntl</span><br><span class="line">  0.00    0.000000           0         1           fsync</span><br><span class="line">  0.00    0.000000           0         8           getcwd</span><br><span class="line">  0.00    0.000000           0         5           <span class="built_in">chdir</span></span><br><span class="line">  0.00    0.000000           0         4           fchdir</span><br><span class="line">  0.00    0.000000           0         1           rename</span><br><span class="line">  0.00    0.000000           0         6         1 unlink</span><br><span class="line">  0.00    0.000000           0         1         1 readlink</span><br><span class="line">  0.00    0.000000           0         2           chmod</span><br><span class="line">  0.00    0.000000           0         1           fchown</span><br><span class="line">  0.00    0.000000           0         1           getrlimit</span><br><span class="line">  0.00    0.000000           0         1           sysinfo</span><br><span class="line">  0.00    0.000000           0         3           getuid</span><br><span class="line">  0.00    0.000000           0         1           sigaltstack</span><br><span class="line">  0.00    0.000000           0         1           statfs</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">  0.00    0.000000           0         1         1 getxattr</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000015                   398        14 total</span><br></pre></td></tr></table></figure><br> 我们可以发现其调用了rename函数，我们知道rename其实是通过unlink和link函数来实现对文件硬连接的改变。<br> 分析其原理：</p><blockquote><p>vim将新内容写到一个临时文件中，然后删除原文件，最后将临时文件名改为原文件名。而强制性锁对unlink函数没有影响^_^。</p></blockquote><p> 知道了原理那么我们可以自己编写一段代码来验证：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((fd = <span class="built_in">open</span>(<span class="string">&quot;.temp&quot;</span>,O_RDWR | O_CREAT | O_TRUNC,FILE_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">write</span>(fd,<span class="string">&quot;ghijkl&quot;</span>,<span class="number">6</span>) != <span class="number">6</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">unlink</span>(argv[<span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;unlink error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">link</span>(<span class="string">&quot;.temp&quot;</span>,argv[<span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;link error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">unlink</span>(<span class="string">&quot;.temp&quot;</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">err_sys</span>(<span class="string">&quot;unlink error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>该程序先创建一个.temp临时文件，然后写放一些数据，接着unlink原文件，再将.temp重命名成原文件，最后记得unlink临时文件。<br>记得该程序的工作目录必须和原文件处在同一个磁盘，因为跨磁盘的link是不允许的。最后看看效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat temp.lock</span><br><span class="line">ghijkl</span><br></pre></td></tr></table></figure></p><p>(全文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是建议性锁和强制性锁&quot;&gt;&lt;a href=&quot;#什么是建议性锁和强制性锁&quot; class=&quot;headerlink&quot; title=&quot;什么是建议性锁和强制性锁&quot;&gt;&lt;/a&gt;什么是建议性锁和强制性锁&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;建议性锁：建议性锁并不从内核限制程序访问文件，而
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>linux的控制终端</title>
    <link href="http://yoursite.com/2016/11/17/linux-terminal/"/>
    <id>http://yoursite.com/2016/11/17/linux-terminal/</id>
    <published>2016-11-17T10:55:08.000Z</published>
    <updated>2019-02-03T09:20:19.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>&#160; &#160; &#160; &#160;我们都知道，linux打开一个终端运行一个程序，在程序运行未结束的时候如果关掉终端的话，那么该程序也会跟着退出。但我们有时候需要长期间的运行一个程序，又不想开着我们的终端，那么我们就可以利用下面的语句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup &lt;<span class="built_in">command</span>&gt; &amp;</span><br></pre></td></tr></table></figure></p><ul><li>nohup的意思是让我们的程序进程忽略所有挂断（SIGHUP）信号。</li><li>“&amp;” 符号表示让我们的程序进程进入后台运行</li></ul><p>为什么这样做以后我们的程序就不会退出呢，接下来我们先补充一些相关的知识</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><p>&#160; &#160; &#160; &#160;终端(Terminal)也是一台物理设备，只用于输入输出，本身没有强大的计算能力。一台计算机只有一个控制台，在计算资源紧张的时代，人们想共享一台计算机，可以通过终端连接到计算机上，将指令输入终端，终端传送给计算机，计算机完成指令后，将输出传送给终端，终端将结果显示给用户。</p><h2 id="登录终端"><a href="#登录终端" class="headerlink" title="登录终端"></a>登录终端</h2><p>&#160; &#160; &#160; &#160;在早期的计算机上面，用户用哑终端（用硬连接连到主机）进行登录，这种登录要经由内核的终端设备驱动程序。因为连到主机上的终端设备数是固定的，所以同时的登录数也就有了已知的上限。随着图形终端的出现，创建终端窗口的应用也被开发出来，它仿真了基于字符的终端，使用户可以用熟悉的方式（shell命令行）与主机进行交互。包括使用网络进行远程登录的远程终端也是使用的这种方式。</p><h2 id="伪终端"><a href="#伪终端" class="headerlink" title="伪终端"></a>伪终端</h2><p>&#160; &#160; &#160; &#160;随着图形终端的出现，创建终端窗口的应用也被开发出来，它仿真了基于字符的终端，使用户可以用熟悉的方式（shell命令行）与主机进行交互。包括使用网络进行远程登录的远程终端也是使用的这种方式。网络登录与传统的串行终端登录的区别在于，前者必须等待一个网络连接请求到达，而不是使一个进程等待每一个可能的登录。为了使同一个软件既能处理终端登录又能处理网络登录，系统使用了一种称为伪终端（pseudo terminal）的软件驱动程序，<br>它仿真串行终端的运行行为，并将终端操作映射为网络操作。</p><h2 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h2><p>&#160; &#160; &#160; &#160;每个进程除了有一进程ID外，还属于一个进程组，进程组就是一个或多个进程的集合。<br>&#160; &#160; &#160; &#160;那为啥Linux里要有进程组呢？其实，提供进程组就是为了方便对进程进行管理。假设要完成一个任务，需要同时并发100个进程。当用户处于某种原因要终止 这个任务时，要是没有进程组，就需要手动的一个个去杀死这100个进程。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>&#160; &#160; &#160; &#160;Shell分前后台来控制的不是进程而是作业（Job）或者进程组（Process Group）。一个前台作业可以由多个进程组成，一个后台也可以由多个进程组成，Shell可以运行一个前台作业和任意多个后台作业，这称为作业控制。<br>&#160; &#160; &#160; &#160;作业与进程组的区别：如果作业中的某个进程又创建了子进程，则子进程不属于作业。一旦作业运行结束，Shell就把自己提到前台，如果原来的前台进程还存在（如果这个子进程还没终止），它自动变为后台进程组。</p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>&#160; &#160; &#160; &#160;会话（session）是一个或多个进程组的集合。<br><img src="/image/session.jpg" alt="会话"><br>&#160; &#160; &#160; &#160;如图，该会话中有三个进程组。通常是由shell的管道将几个进程编成一组的。上图有可能是由下列形式的shell命令形成的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ proc1 | proc2 &amp; </span><br><span class="line">$ proc3 | proc4 | proc5</span><br></pre></td></tr></table></figure></p><h2 id="控制终端"><a href="#控制终端" class="headerlink" title="控制终端"></a>控制终端</h2><ul><li>当一个终端与一个会话相关联后，那么这个终端就称为该会话的控制终端(controlling terminal)。</li><li>建立与控制终端连接的会话首进程被称为控制进程(controlling process)。</li><li>一个会话中的几个进程组可被分成一个前台进程组(foreground process group)以及一个或多个后台进程组(background process group)。</li><li>如果一个会话有一个控制终端的话， 则它有一个前台进程组，其他进程组为后台进程组。</li><li>无论何时键入终端的中断键或退出键，都会将中断信号或退出信号发送至前台进程组的所有进程。</li><li>如果终端检测到调制解调器（或网络）断开，则挂断信号（SIGHUP）发送至控制进程（会话首进程），如果会<strong>话首进程退出,则将挂断信号（SIGHUP）发送至前台进程组的所有进程</strong>。<br><img src="/image/session2.jpg" alt="会话"><br>&#160; &#160; &#160; &#160;有的时候程序的标准输入，输出会被重定向到其它地方，那么会话中的进程要<strong>获取终端的话可以open文件/dev/tty</strong>，这就告诉内核我要获取当前会话的控制终端。如果会话没有控制终端的话，那么对此设备的open将失败。</li></ul><h2 id="孤儿进程组"><a href="#孤儿进程组" class="headerlink" title="孤儿进程组"></a>孤儿进程组</h2><p>&#160; &#160; &#160; &#160;孤儿进程组定义为：该组中每个成员的父进程要么是该组的一个成员，要么不是该组所属会话的成员。换句话说，一个进程组中有一个进程，其父进程在属于同一个会话的另一个组中，那么它就不是孤儿进程组。</p><blockquote><p>在POSIX.1中，要求向新产生的孤儿进程组中处于停止状态的每一个进程发送挂断信号（SIGHUP），接着又向其发送继续信号（SIGCONT）。<strong>对挂断信号的系统默认动作是终止该进程</strong>。</p></blockquote><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ol><li>当控制中端退出的时候，首先会发一个挂断信号(SIGHUP)给会话首进程，一般会话首进程都是shell进程，而此动作将导致shell进程退出。</li><li>当会话首进程退出时，挂断信号（SIGHUP）还会继续发送给前台进程组的所有进程。</li><li>若进程未对挂断信号（SIGHUP）进行处理时，内核默认动作是终止该进程。</li></ol><p>&#160; &#160; &#160; &#160;由此我们可以得出，导致进程退出的罪魁祸首就是这一个挂断信号（SIGHUP）。回到文章最前面提出的解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup &lt;<span class="built_in">command</span>&gt; &amp;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;其中的nohup命令是让程序忽略<strong>所有</strong>的挂断信号，所以就算终端退出，我们的程序也不会退出了。而最后面的”&amp;”符号其实对防止程序退出没有任何用处。</p><h1 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h1><p>&#160; &#160; &#160; &#160;那么我们能不能让程序自动具备防退出功能呢？其实原理很简单，我们只要注册挂断信号(SIGHUP)的处理程序，那么内核就认为你对该信号作出响应了，自然就不会终止程序了。来看代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;apue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_hup</span><span class="params">(<span class="keyword">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;received signup\n&quot;</span>);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;pid = %d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">  <span class="built_in">signal</span>(SIGHUP, sig_hup);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    count++;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;函数void (<em>signal(int, void(</em>)(int)))(int) 带两个参数,一个为整型,一个为函数指针，返回值也是一个函数指针。这两个函数指针所指向的函数接受一个整型参数 且没有返回值。我们代码中定义的sig_hup正好是这一种类型。因此可以将其注册为挂断信号（SIGHUP）的处理函数。这样一来，我们的程序就不会因收到挂断信号而退出了。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>&#160; &#160; &#160; &#160;如果我们再次向进程发送SIGHUP信号(可利用kill -1命令)，那么我们的程序将会怎样呢，对于这种状况我们又该如何应对呢？</p><p>(全文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;我们都知道，linux打开一个终端运行一个程序，在程序运行未结束的时候如果关掉终端的话
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
